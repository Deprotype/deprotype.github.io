{"version":3,"file":"./experiment_configuration.js","mappings":";;;;;;;;;;;;;;;;AAA6C;AACtC;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iDAAiD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACrFyC;AAClC;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,eAAe,kDAAQ;AACvB;AACA;;;;;;;;;;;;;;ACdO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACjB6C;AACtC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAQ;AACvB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACA;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,sCAAsC;AACtH;AACA;AACA,yBAAyB;AACzB;AACA,wEAAwE,sBAAsB;AAC9F;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,yDAAQ;AACvD,qCAAqC;AACrC;AACA;AACA,yBAAyB;AACzB;AACA,wEAAwE,OAAO,yDAAQ,gBAAgB;AACvG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;ACvGuE;AACpB;AAC5C;AACP;AACA;AACA;AACO,6CAA6C,+EAAkB;AACtE;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtCkD;AAC2B;AACQ;AAC9E;AACP;AACA;AACA;AACO,6BAA6B,8FAA8B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAqB,mDAAmD;AAC3F;AACA;AACA;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3D2E;AACpE,mCAAmC,oFAAyB;AACnE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;ACb6E;AAC3B;AACmC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wCAAwC,8FAA8B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAqB,+GAA+G;AACvJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAqB,+GAA+G;AACvJ;AACA;AACA;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjJqF;AACR;AAC3B;AAClD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO,sCAAsC,8FAA8B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAqB,4GAA4G;AACpJ;AACA;AACA;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtG6E;AAC3B;AACyB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2CAA2C,oFAAyB;AAC3E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAqB,sIAAsI;AAC9K;AACA;AACA;AACA;AACA,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,8DAAI;AAChB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3FuE;AACA;AACrB;AAC3C,6CAA6C,+EAAkB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mFAAe,qBAAqB;AAC5D,YAAY,8DAAI;AAChB;AACA;AACA,4BAA4B,gCAAgC,wCAAwC;AACpG,YAAY,8DAAI;AAChB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxC0E;AACF;AAC2B;AAC5F,oCAAoC,yEAAwB;AACngHAAgC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kEAAiB;AAC7B;AACA,KAAK;AACL;AACA,yBAAyB,iEAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC7ImE;AACO;AACkB;AACU;AAChB;AACM;AACrF;AACP;AACA;AACO,yCAAyC,4EAAqB;AACrE;AACA;AACA,oCAAoC,kFAAc;AAClD,8BAA8B,kFAAc;AAC5C;AACA,iDAAiD,8FAAoB;AACrE;AACA;AACA,qCAAqC,8GAA4B;AACjE;AACA;AACA;AACA,qCAAqC,oGAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oGAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7CO;AACA;AACP;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA,6CAA6C,gBAAgB,aAAa,WAAW,qBAAqB;AAC1G;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,8DAA8D;AAC9D,iDAAiD;AACjD,8CAA8C;AAC9C,6EAA6E;AAC7E,uDAAuD;AACvD,qEAAqE,aAAa;AAClF;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDuE;AACL;AACsC;AACjG;AACA;AACP;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP,eAAe,wFAAW;AAC1B;AACO;AACP,eAAe,qFAAQ;AACvB;AACO;AACP,eAAe,yFAAY;AAC3B;AACO;AACP;AACA,eAAe,8EAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAK;AACL;;;;;;;;;;;;;;ACtSO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5EsD;AACA;AACrB;AAC6C;AACvE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,uFAAqB;AACrE,gBAAgB,kEAAY;AAC5B,yEAAyE,+DAAS;AAClF,iBAAiB;AACjB,+BAA+B,0CAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClC+E;AACD;AACR;AACS;AACxE;AACP,oBAAoB,uFAAqB;AACzC,yCAAyC,uFAAqB;AAC9D,oCAAoC,sFAA0B;AAC9D,qCAAqC,8EAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;ACxB2C;AACpC;AACP;AACA;AACA;AACA;AACA,qCAAqC,oDAAS;AAC9C;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACViE;AACqB;AACnB;AAC5D;AACP;AACA;AACA;AACA;AACA,4CAA4C,0EAAoB;AAChE;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,QAAQ,+FAAsB;AAC9B,4CAA4C,4EAAqB;AACjE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrCO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACVO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACbkC;AAC2B;AAC7D;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxC2C;AACpC;AACA;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP,oBAAoB,iBAAiB;AACrC,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,6BAA6B;AAC7B,4BAA4B;AAC5B,4BAA4B;AAC5B,8BAA8B;AAC9B,6BAA6B;AAC7B;AACA,8BAA8B;AAC9B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,kCAAkC,yBAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iCAAiC,kDAAkD;AACnF,qBAAqB,mCAAmC,iBAAiB;AACzE;AACA;AACA,wDAAQ;AACR;;;;;;;;;;;;;;AClGA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClEO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACO;AACP,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7EA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB,gBAAgB;;AAElE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC;AACA,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC;AACA,wCAAwC;AACxC;;AAEA,4BAA4B;AAC5B,4BAA4B;AAC5B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,oCAAoC,oBAAoB;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,EAAE;AAC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","sources":["webpack:///../N-of-1-Experimentation/modules/Automata/Automata.js","webpack:///../N-of-1-Experimentation/modules/Automata/Automata_Configurator.js","webpack:///../N-of-1-Experimentation/modules/Automata/Automata_Forwarder.js","webpack:///../N-of-1-Experimentation/modules/Automata/Transitions.js","webpack:///../N-of-1-Experimentation/modules/Automata_Forwarders/Automata_With_Output_Forwarder.js","webpack:///../N-of-1-Experimentation/modules/Automata_Forwarders/Book_Forwarder.js","webpack:///../N-of-1-Experimentation/modules/Automata_Forwarders/Experiment_Forwarder.js","webpack:///../N-of-1-Experimentation/modules/Automata_Forwarders/Experimentation_Forwarder.js","webpack:///../N-of-1-Experimentation/modules/Automata_Forwarders/Questionnaire_Forwarder.js","webpack:///../N-of-1-Experimentation/modules/Automata_Forwarders/Training_Execution_Forwarder.js","webpack:///../N-of-1-Experimentation/modules/Books/Sequential_Forwarder_Forwarder.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/Browser_Output_Writer.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/Code_Experiment_Definition.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/Experiment_Definition.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/Experimentation.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/Task.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/Training_Configuration.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/functions/create_code_experiment_execution.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/treatments/Independent_Variable.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/treatments/Independent_Variables.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/treatments/Treatment.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/treatments/Treatment_Combination.js","webpack:///../N-of-1-Experimentation/modules/Experimentation/treatments/Treatments_Combinator.js","webpack:///../N-of-1-Experimentation/modules/utils/Utils.js","webpack:///../N-of-1-Experimentation/modules/utils/Utils_Test.js","webpack:///../N-of-1-Experimentation/modules/utils/arrays/all_array_combinations.js","webpack:///../N-of-1-Experimentation/modules/utils/loops/loop.js","webpack:///../N-of-1-Experimentation/modules_hard_import/seedrandom/seedrandom.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./typescript/experiment_configuration.ts"],"sourcesContent":["import { contains } from \"../utils/Utils.js\";\nexport function init() { }\nexport class Automata {\n    constructor(config) {\n        this.current_state = -1;\n        this.transitions = [];\n        this.states = [];\n        this.start_state = config.start;\n        this.states = config.states;\n        for (let i = 0; i < this.states.length; i++) {\n            this.transitions.push([]);\n        }\n        for (let t of config.transitions) {\n            if (this.transitions == null) {\n                console.log(\"Something is wrong here\");\n            }\n            if (this.transitions == undefined || t.from == undefined) {\n                console.log(\"Something is wrong here\");\n            }\n            if (this.transitions[t.from] == undefined) {\n                console.log(\"Something is wrong here\");\n            }\n            try {\n                this.transitions[t.from].push(t);\n            }\n            catch (e) {\n                console.log(\"weird\");\n            }\n        }\n        this.init_function = config.init_function;\n        this.end_states = config.end_states;\n    }\n    // on_finish_function: (number) => void;\n    input(input) {\n        let matching_transition = this.first_match(input);\n        let state_before = this.current_state;\n        if (matching_transition != null) {\n            this.current_state = matching_transition.next_state; // go to next state\n            matching_transition.action(state_before, input, this.current_state); // go to next state\n        }\n    }\n    start() {\n        this.current_state = this.start_state;\n    }\n    first_match(input) {\n        for (let i = 0; i < this.transitions[this.current_state].length; i++) {\n            if (this.transitions[this.current_state][i].accepts(input))\n                return this.transitions[this.current_state][i];\n        }\n        return null;\n    }\n    initialize() {\n        this.current_state = this.start_state;\n        this.init_function();\n    }\n    add_finish_action(action) {\n        for (let transitions of this.transitions) {\n            for (let transition of transitions) {\n                if (this.is_transition_to_end(transition)) {\n                    let former_action = transition.action;\n                    transition.action = (from, input, next) => {\n                        former_action(from, input, next);\n                        action();\n                    };\n                }\n            }\n        }\n    }\n    is_transition_to_end(transition) {\n        return contains(this.end_states, transition.next_state);\n    }\n    add_action_to_transitions(is_target_transition, action) {\n        for (let transitions of this.transitions) {\n            for (let transition of transitions) {\n                if (is_target_transition(transition)) {\n                    let former_action = transition.action;\n                    transition.action = (from, input, next) => {\n                        former_action(from, input, next);\n                        action();\n                    };\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=Automata.js.map","import { Automata } from \"./Automata.js\";\nexport function init() { }\nexport class Automata_Configurator {\n    constructor(states, start, init_function, transitions, end_states) {\n        this.states = states;\n        this.start = start;\n        this.init_function = init_function;\n        this.transitions = transitions;\n        this.end_states = end_states;\n    }\n}\nexport function create_automata(states, start, init_function, transitions, end_states) {\n    return new Automata(new Automata_Configurator(states, start, init_function, transitions, end_states));\n}\n//# sourceMappingURL=Automata_Configurator.js.map","export class Automata_Forwarder {\n    constructor(forwarder_name) {\n        this.set_active_function = () => { };\n        this.forwarder_name = forwarder_name;\n    }\n    input(s) {\n        this.automata.input(s);\n    }\n    add_activation_function(to_add) {\n        // let old_activation_function = this.set_active_function;\n        // this.set_active_function = () => {\n        //     old_activation_function();\n        //     to_add();\n        // }\n    }\n    set_active() { }\n}\n//# sourceMappingURL=Automata_Forwarder.js.map","import { contains } from \"../utils/Utils.js\";\nexport function init() { }\nclass Transition_Acceptor {\n}\nclass Transition_Strings_Acceptor extends Transition_Acceptor {\n    constructor(strings) {\n        super();\n        this.accepted_strings = strings;\n    }\n    accepts(input) {\n        return contains(this.accepted_strings, input);\n    }\n}\nexport class Transition_Acceptor_Function extends Transition_Acceptor {\n    constructor(acceptor_function) {\n        super();\n        this.acceptor_function = acceptor_function;\n    }\n    accepts(input) {\n        return this.acceptor_function(input);\n    }\n}\nclass Transition_Strings_Accepts_ALL extends Transition_Acceptor {\n    accepts(input) {\n        return true;\n    }\n}\nexport function keys(strings) {\n    return new Transition_Strings_Acceptor(strings);\n}\nexport function if_func(f) {\n    return new Transition_Acceptor_Function(f);\n}\nexport function each_char(charlist) {\n    var chars = [];\n    for (let a of charlist) {\n        chars.push(a);\n    }\n    return new Transition_Strings_Acceptor(chars);\n}\nexport class Transition {\n    constructor(from, acceptor, next_state, action) {\n        this.from = from;\n        this.acceptor = acceptor;\n        this.next_state = next_state;\n        this.action = action;\n    }\n    ;\n    is_valid_input(input) {\n        return this.acceptor.accepts(input);\n    }\n    accepts(input) {\n        return this.acceptor.accepts(input);\n    }\n}\nexport function Simple_Transition(from, accept_input_function, next_state, action) {\n    return new Transition(from, new Transition_Acceptor_Function(accept_input_function), next_state, (s, i, n) => action(i));\n}\nexport function accept_all() {\n    return new Transition_Strings_Accepts_ALL();\n}\nexport function do_nothing(at, input, next) { }\nexport function pass(f) {\n    return (at, input, next) => f();\n}\nexport function from(from) {\n    return {\n        to: (to) => {\n            return {\n                on: (key) => {\n                    return {\n                        if: (check) => {\n                            return {\n                                do: (action) => {\n                                    return Simple_Transition(from, (input) => { return input == key && check(input); }, to, action);\n                                }\n                            };\n                        },\n                        do: (action) => {\n                            return Simple_Transition(from, (input) => { return input == key; }, to, action);\n                        }\n                    };\n                },\n                on_any: (keys) => {\n                    return {\n                        if: (check) => {\n                            return {\n                                do: (action) => {\n                                    return Simple_Transition(from, (input) => {\n                                        return contains(keys, input) && check(input);\n                                    }, to, action);\n                                }\n                            };\n                        },\n                        do: (action) => {\n                            return Simple_Transition(from, (input) => { return contains(keys, input); }, to, action);\n                        }\n                    };\n                }\n            };\n        },\n    };\n}\n//# sourceMappingURL=Transitions.js.map","import { Automata_Forwarder } from \"../Automata/Automata_Forwarder.js\";\nimport { Automata } from \"../Automata/Automata.js\";\nexport function init() { }\n/*\n    I don't do anything - I am just a superclass\n */\nexport class Automata_With_Output_Forwarder extends Automata_Forwarder {\n    constructor(forwarder_name, measurement, pre_run_instructions, post_run_instructions) {\n        super(forwarder_name);\n        this.pre_run_instructions = pre_run_instructions;\n        this.post_run_instructions = post_run_instructions;\n        this.measurement = measurement;\n        this.automata = this.create_automata(); //new Automata(this.automata_configurator());\n        this.automata.initialize();\n    }\n    set_active() {\n        this.show_intro();\n    }\n    create_automata() {\n        return new Automata(this.automata_configurator());\n    }\n    output_writer() {\n        return this.measurement.output_writer();\n    }\n    show_intro() {\n        this.output_writer().clear_all();\n        this.output_writer().print_string_to_state(this.forwarder_name);\n        this.pre_run_instructions();\n    }\n    empty_screen_and_show_instructions(command) {\n        this.output_writer().clear_state();\n        this.output_writer().clear_stage();\n        if (command == null || command == undefined)\n            console.log(\"something is strange\");\n        else\n            command();\n    }\n}\n//# sourceMappingURL=Automata_With_Output_Forwarder.js.map","import { from } from \"../Automata/Transitions.js\";\nimport { Automata_Configurator } from \"../Automata/Automata_Configurator.js\";\nimport { Automata_With_Output_Forwarder } from \"./Automata_With_Output_Forwarder.js\";\nexport function init() { }\nlet SHOW_PAGE = 0;\nlet FINISHED_BOOK = 1;\nlet EVERYTHING_DONE = 1;\nexport class Book_Forwarder extends Automata_With_Output_Forwarder {\n    constructor(book_name, text, measurement) {\n        super(book_name, measurement, text[0], text[text.length - 1]);\n        this.current_page_number = -1;\n        this.pages = text;\n        this.create_automata();\n    }\n    set_page_index(index) {\n        this.current_page_number = index;\n        this.empty_screen_and_show_instructions(this.pages[this.current_page_number]);\n        this.output_writer().print_string_to_state(this.forwarder_name);\n        this.output_writer().print_string_to_page_number(\"Page \" + (this.current_page_number + 1) + \" / \" + this.pages.length);\n        let navigation_string = \"<hr>\";\n        if (index > 0)\n            navigation_string += \"[&#8592] = previous page\";\n        if (index < this.pages.length - 1)\n            navigation_string += (navigation_string != \"<hr>\" ? \"<br>\" : \"\") + \"[&#8594] = next page\";\n        if (index == this.pages.length - 1)\n            navigation_string += (navigation_string != \"<hr>\" ? \"<br>\" : \"\") + \"[Enter] = Finish\";\n        this.output_writer().print_html_on_stage(navigation_string);\n    }\n    set_active() {\n        super.set_active();\n    }\n    show_intro() {\n        this.set_page_index(0);\n    }\n    show_outro() { }\n    automata_configurator() {\n        return new Automata_Configurator([SHOW_PAGE, EVERYTHING_DONE], SHOW_PAGE, () => { }, this.transitions(), [EVERYTHING_DONE]);\n    }\n    transitions() {\n        return [\n            from(SHOW_PAGE).to(SHOW_PAGE)\n                .on(\"ArrowRight\")\n                .if((i) => this.current_page_number < this.pages.length - 1)\n                .do((i) => {\n                this.set_page_index(++this.current_page_number);\n            }),\n            from(SHOW_PAGE).to(SHOW_PAGE)\n                .on(\"ArrowLeft\")\n                .if((i) => this.current_page_number > 0)\n                .do((i) => {\n                this.set_page_index(--this.current_page_number);\n            }),\n            from(SHOW_PAGE).to(EVERYTHING_DONE)\n                .on(\"Enter\")\n                .if((i) => this.current_page_number >= this.pages.length - 1)\n                .do((i) => { })\n        ];\n    }\n}\n//# sourceMappingURL=Book_Forwarder.js.map","import { Experimentation_Forwarder } from \"./Experimentation_Forwarder.js\";\nexport class Experiment_Forwarder extends Experimentation_Forwarder {\n    constructor(pre_run_instructions, experiment_definition, measurement) {\n        super(\"Main Experiment\", () => {\n            pre_run_instructions();\n            measurement.output_writer().print_html_on_stage(\"<hr>\" +\n                \"Press [Enter] to start the experiment.\");\n        }, () => {\n            measurement.output_writer().print_html_on_stage(\"You finished the experiment phase.<hr>\" +\n                \"Please, press [Enter] to go to the next phase.<br>\");\n        }, experiment_definition, measurement);\n    }\n}\n//# sourceMappingURL=Experiment_Forwarder.js.map","import { Automata_Configurator } from \"../Automata/Automata_Configurator.js\";\nimport { from } from \"../Automata/Transitions.js\";\nimport { Automata_With_Output_Forwarder } from \"./Automata_With_Output_Forwarder.js\";\nlet SHOW_INTRO = 0;\nlet SHOW_PRE_TASK_INFO = 1;\nlet SHOW_TASK = 2;\nlet SHOW_PENALTY = 3;\nlet TASK_FINISHED = 4;\nlet SHOW_OUTRO = 5;\nlet EVERYTHING_DONE = 6;\nexport class Experimentation_Forwarder extends Automata_With_Output_Forwarder {\n    show_intro() {\n        this.empty_screen_and_show_instructions(this.pre_run_instructions);\n        this.output_writer().print_experiment_name(this.forwarder_name);\n    }\n    show_outro() {\n        this.empty_screen_and_show_instructions(this.post_run_instructions);\n    }\n    automata_configurator() {\n        return new Automata_Configurator([SHOW_INTRO, SHOW_PRE_TASK_INFO, SHOW_TASK, TASK_FINISHED, SHOW_OUTRO, EVERYTHING_DONE], SHOW_INTRO, () => { }, this.transitions(), [EVERYTHING_DONE]);\n    }\n    current_task() {\n        return this.experiment_definition.tasks[this.current_page_index];\n    }\n    ;\n    constructor(experiment_automata_name, pre_run_instructions, post_run_instructions, experiment_definition, measurement) {\n        super(experiment_automata_name, measurement, pre_run_instructions, post_run_instructions);\n        this.current_page_index = -1;\n        this.experiment_definition = experiment_definition;\n    }\n    automata_configuration() {\n        return new Automata_Configurator([SHOW_INTRO, SHOW_PRE_TASK_INFO, SHOW_TASK, TASK_FINISHED, SHOW_OUTRO, EVERYTHING_DONE], SHOW_INTRO, () => { }, this.transitions(), [EVERYTHING_DONE]);\n    }\n    transitions() {\n        return [\n            from(SHOW_INTRO).to(SHOW_TASK)\n                .on(\"Enter\")\n                .if((i) => !this.first_task().has_pre_task_description)\n                .do((i) => {\n                this.set_experiment_index(0);\n                this.measurement.start_measurement(this.current_task());\n            }),\n            from(SHOW_INTRO).to(SHOW_PRE_TASK_INFO)\n                .on(\"Enter\")\n                .if((i) => this.first_task().has_pre_task_description)\n                .do((i) => {\n                this.set_experiment_index(0);\n                this.show_pre_task_info();\n            }),\n            from(SHOW_INTRO).to(SHOW_OUTRO) // State=3: Experiment done - just the message afterwards shown\n                .on(\"Delete\")\n                .do((i) => {\n                this.show_outro();\n            }),\n            from(SHOW_PRE_TASK_INFO).to(SHOW_TASK)\n                .on(\"Enter\")\n                .do((i) => {\n                this.measurement.start_measurement(this.current_task());\n            }),\n            // Task Shown - Incorrect input => Remain in Task\n            from(SHOW_TASK).to(SHOW_TASK)\n                .on_any(this.measurement.accepted_responses())\n                .if((i) => !this.current_task().accepts_answer(i) && !this.measurement.demands_penalty())\n                .do((i) => {\n                this.measurement.incorrect_response(i, this.current_task());\n            }),\n            from(SHOW_TASK).to(SHOW_OUTRO)\n                .on(\"?+Control\")\n                .if((i) => true)\n                .do((i) => {\n                this.measurement.stop_measurement(i, this.current_task());\n                this.show_outro();\n            }),\n            // STATE 1=Task is shown, 2=Input correct\n            from(SHOW_TASK).to(TASK_FINISHED)\n                .on_any(this.measurement.accepted_responses())\n                .if((i) => this.current_task().accepts_answer(i) &&\n                this.current_page_index < this.experiment_definition.tasks.length - 1)\n                .do((i) => {\n                this.measurement.stop_measurement(i, this.current_task());\n            }),\n            from(SHOW_TASK).to(SHOW_PENALTY)\n                .on_any(this.measurement.accepted_responses())\n                .if((i) => !this.current_task().accepts_answer(i) && this.measurement.demands_penalty())\n                .do((i) => {\n                this.measurement.incorrect_response(i, this.current_task());\n            }),\n            from(SHOW_PENALTY).to(SHOW_TASK)\n                .on(\"Enter\")\n                .if((i) => this.measurement.penalty_is_over())\n                .do((i) => {\n                this.measurement.start_measurement(this.current_task());\n            }),\n            // Between Tasks to next task\n            from(TASK_FINISHED).to(SHOW_PRE_TASK_INFO)\n                .on(\"Enter\")\n                .if((i) => this.current_page_index < this.experiment_definition.tasks.length - 1 && this.next_task().has_pre_task_description)\n                .do((i) => {\n                this.inc_current_experiment();\n                this.show_pre_task_info();\n            }),\n            from(TASK_FINISHED).to(SHOW_TASK)\n                .on(\"Enter\")\n                .if((i) => this.current_page_index < this.experiment_definition.tasks.length - 1 && !this.next_task().has_pre_task_description)\n                .do((i) => {\n                this.inc_current_experiment();\n                this.measurement.start_measurement(this.current_task());\n            }),\n            from(SHOW_TASK).to(SHOW_OUTRO) // State=3: Experiment done - just the message afterwards shown\n                .on_any(this.measurement.accepted_responses())\n                .if((i) => this.current_task().accepts_answer(i) &&\n                this.current_page_index == this.experiment_definition.tasks.length - 1)\n                .do((i) => {\n                this.measurement.stop_measurement(i, this.current_task());\n                this.show_outro();\n            }),\n            from(SHOW_OUTRO).to(EVERYTHING_DONE)\n                .on(\"Enter\")\n                .do((i) => {\n                let a = 1;\n            })\n        ];\n    }\n    set_experiment_index(index) {\n        this.current_page_index = index;\n        this.output_writer().print_string_to_page_number(\"Task \" + (this.current_page_index + 1) + \" / \" + this.experiment_definition.tasks.length);\n    }\n    inc_current_experiment() {\n        this.set_experiment_index(++this.current_page_index);\n    }\n    init_experiment() {\n        this.experiment_definition.init_experiment(false);\n    }\n    show_pre_task_info() {\n        this.output_writer().clear_stage();\n        this.output_writer().clear_error();\n        this.current_task().print_pre_task_info();\n    }\n    next_task() {\n        return this.experiment_definition.tasks[this.current_page_index + 1];\n    }\n    first_task() {\n        return this.experiment_definition.tasks[0];\n    }\n}\n//# sourceMappingURL=Experimentation_Forwarder.js.map","import { Automata_With_Output_Forwarder } from \"./Automata_With_Output_Forwarder.js\";\nimport { Automata_Configurator } from \"../Automata/Automata_Configurator.js\";\nimport { from } from \"../Automata/Transitions.js\";\nlet SHOW_INTRO = 0;\nlet SHOW_QUESTION = 1;\nlet ANSWERED_INCOMPLETE = 2;\nlet ANSWERES_COMPLETE = 3;\nlet EVERYTHING_DONE = 4;\nexport class Question {\n    constructor(variable_name, question_text) {\n        this.answer = null;\n        this.variable_name = variable_name;\n        this.question_text = question_text;\n    }\n    store_answer() {\n        let element = document.getElementById(this.variable_name);\n        // @ts-ignore\n        this.answer = element.value;\n    }\n}\nexport class Alternatives extends Question {\n    constructor(variable_name, question_text, alternatives) {\n        super(variable_name, question_text);\n        this.alternatives = alternatives;\n    }\n    input_html() {\n        let html_string = \"<select id=\\\"\" + this.variable_name + \"\\\">\";\n        html_string += \"<option disabled selected value> -- select an option -- </option>\";\n        let index = 0;\n        this.alternatives.forEach((a) => html_string += \"<option value=\" + index++ + \">\" + a + \"</option>\");\n        html_string += (\"</select>\");\n        return html_string;\n    }\n    store_answer() {\n        let element = document.getElementById(this.variable_name);\n        // @ts-ignore\n        this.answer = this.alternatives[element.value];\n    }\n}\nexport class Information extends Question {\n    html_string() {\n        let html_string = \"<p>We have one question to you.</p>\";\n        return html_string;\n    }\n    input_html() {\n        let html_string = \"<input type=\\\"text\\\" id=\\\"\" + this.variable_name + \"\\\">\";\n        return html_string;\n    }\n    constructor(question_text) {\n        super(null, question_text);\n    }\n}\nexport class Freetext extends Question {\n    html_string() {\n    }\n    input_html() {\n        let html_string = \"<input type=\\\"text\\\" id=\\\"\" + this.variable_name + \"\\\">\";\n        return html_string;\n    }\n}\nexport class Questionnaire_Forwarder extends Automata_With_Output_Forwarder {\n    constructor(questions, measurement) {\n        super(\"Questionnaire\", measurement, () => measurement.output_writer().print_html_on_stage(\"Please, answer the following questions.<br>\"), () => measurement.output_writer().print_html_on_stage(\"Thank you for answering the questions.\"));\n        this.current_question_number = -1;\n        this.questions = questions;\n    }\n    automata_configurator() {\n        return new Automata_Configurator([SHOW_INTRO, SHOW_QUESTION, ANSWERED_INCOMPLETE, ANSWERES_COMPLETE, EVERYTHING_DONE], SHOW_INTRO, () => { }, this.transitions(), [EVERYTHING_DONE]);\n    }\n    transitions() {\n        return [\n            from(SHOW_INTRO).to(EVERYTHING_DONE)\n                .on(\"DONE\")\n                .if((i) => true)\n                .do((i) => {\n                this.add_result_to_question();\n                console.log(\"dummy\");\n            }),\n        ];\n    }\n    show_intro() {\n        super.show_intro();\n        let html_string = this.create_questionnaire_html_string();\n        this.output_writer().print_html_on_stage(html_string);\n        document.getElementById(\"DONE\").onclick = () => this.input(\"DONE\");\n        ;\n    }\n    show_outro() {\n    }\n    create_questionnaire_html_string() {\n        let html_string = \"<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>\";\n        this.questions.forEach((q) => html_string += \"<tr><td>\" + q.question_text + \"</td>\" +\n            \"<td>\" + q.input_html() + \"</td></tr>\");\n        html_string += \"</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>\";\n        return html_string;\n    }\n    add_result_to_question() {\n        for (let question of this.questions) {\n            question.store_answer();\n        }\n    }\n}\n//# sourceMappingURL=Questionnaire_Forwarder.js.map","import { Automata_Configurator } from \"../Automata/Automata_Configurator.js\";\nimport { from } from \"../Automata/Transitions.js\";\nimport { Experimentation_Forwarder } from \"./Experimentation_Forwarder.js\";\nlet SHOW_INTRO = 0;\nlet SHOW_PRE_TASK_INFO = 1;\nlet SHOW_TASK = 2;\nlet SHOW_PENALTY = 3;\nlet TASK_FINISHED = 4;\nlet SHOW_OUTRO = 5;\nlet EVERYTHING_DONE = 6;\nlet ESCAPED = 7;\nexport class Training_Execution_Forwarder extends Experimentation_Forwarder {\n    constructor(pre_run_instructions, training_configuration, experiment_definition, measurement) {\n        super(\"Training\", () => {\n            pre_run_instructions();\n            measurement.output_writer().print_html_on_stage(\"<hr>\" +\n                \"Press [Enter] to start training.\");\n        }, () => {\n            measurement.output_writer().print_html_on_stage(\"You finished the training phase.<hr>\" +\n                (training_configuration.can_be_repeated ? \"Please, press [Enter] to run again a training session.<br>\" : \"\") +\n                \"Please, press [E] (capital E, i.e., [shift] + [e]) to enter the experiment phase.\");\n        }, experiment_definition, measurement);\n        this.training_configuration = training_configuration;\n    }\n    print_cancel_text() {\n        this.output_writer().clear_stage();\n        this.output_writer().print_string_to_page_number(\"Cancelled\");\n        let navigation_string = \"You cancelled this training session.<hr>\" +\n            \"Press [Enter] if you want to start another training session.<br>\" +\n            \"Press [E] (capital E!) if you want to start with the experiment.\";\n        this.output_writer().print_html_on_stage(navigation_string);\n    }\n    automata_configurator() {\n        return new Automata_Configurator([SHOW_INTRO, SHOW_PRE_TASK_INFO, SHOW_TASK, SHOW_PENALTY, TASK_FINISHED, SHOW_OUTRO, EVERYTHING_DONE, ESCAPED], SHOW_INTRO, () => { }, this.transitions(), [EVERYTHING_DONE]);\n    }\n    transitions() {\n        let experiment_transitions = super.transitions();\n        let this_transitions = [\n            from(SHOW_INTRO).to(ESCAPED)\n                .on(\"Escape\")\n                .if(() => this.training_configuration.can_be_cancelled)\n                .do((i) => {\n                this.print_cancel_text();\n            }),\n            from(SHOW_TASK).to(ESCAPED)\n                .on(\"Escape\")\n                .if(() => this.training_configuration.can_be_cancelled)\n                .do((i) => {\n                this.print_cancel_text();\n            }),\n            from(TASK_FINISHED).to(ESCAPED)\n                .on(\"Escape\")\n                .if(() => this.current_page_index < this.experiment_definition.tasks.length - 1 && this.training_configuration.can_be_cancelled)\n                .do((i) => {\n                this.print_cancel_text();\n            }),\n            from(ESCAPED).to(EVERYTHING_DONE)\n                .on(\"E\").do(() => {\n                let dummy = 1;\n            }),\n            from(ESCAPED).to(SHOW_INTRO)\n                .on(\"Enter\").do(() => {\n                this.experiment_definition.init_experiment(true);\n                this.show_intro();\n            }),\n            from(SHOW_OUTRO).to(SHOW_INTRO)\n                .on(\"Enter\")\n                .if(() => this.training_configuration.can_be_repeated)\n                .do(() => {\n                this.experiment_definition.init_experiment(true);\n                this.show_intro();\n            }),\n            from(SHOW_OUTRO).to(EVERYTHING_DONE)\n                .on(\"E\")\n                .do((i) => {\n                let dummy = 1;\n            })\n        ];\n        experiment_transitions.splice(experiment_transitions.length - 1);\n        this_transitions.forEach((e) => experiment_transitions.push(e));\n        return experiment_transitions;\n    }\n    input(s) {\n        if (![\"a\", \"b\", \"c\"].includes(s) && this.automata.current_state != 0)\n            return super.input(s);\n        super.input(s);\n    }\n    init_experiment() {\n        this.training_configuration.init_experiment(this.experiment_definition);\n    }\n}\n//# sourceMappingURL=Training_Execution_Forwarder.js.map","import { Automata_Forwarder } from \"../Automata/Automata_Forwarder.js\";\nimport { create_automata } from \"../Automata/Automata_Configurator.js\";\nimport { from } from \"../Automata/Transitions.js\";\nexport class Sequential_Forwarder_Forwarder extends Automata_Forwarder {\n    constructor(forwarders) {\n        super(\"Default Sequential Forwarder Forwader\");\n        this.current_forwarder_index = 0;\n        this.forwarders = forwarders;\n        for (let forwarder of forwarders) {\n            forwarder.automata.add_finish_action(() => this.automata.input(\"switch to next state\"));\n        }\n        this.automata = create_automata([0, 1], 0, () => { }, [\n            from(0).to(0)\n                .on(\"switch to next state\")\n                .if(() => this.current_forwarder_index < this.forwarders.length - 1)\n                .do(() => { this.current_forwarder_index++; this.current_forwarder().set_active(); }),\n            from(0).to(1)\n                .on(\"switch to next state\")\n                .if(() => this.current_forwarder_index == this.forwarders.length - 1)\n                .do(() => { })\n        ], [1]);\n        this.automata.initialize();\n        // this.set_active();\n        // console.log(\"active forward: \" + this.current_forwarder().forwarder_name);\n    }\n    input(input) {\n        this.forwarders[this.current_forwarder_index].input(input);\n    }\n    input_sequence(input_sequence) {\n        for (let s of input_sequence)\n            this.input(s);\n    }\n    current_forwarder() {\n        return this.forwarders[this.current_forwarder_index];\n    }\n    set_active() {\n        super.set_active();\n        this.current_forwarder().set_active();\n    }\n}\n//# sourceMappingURL=Sequential_Forwarder_Forwarder.js.map","import { Experiment_Output_Writer, SET_SEED } from \"./Experimentation.js\";\nimport { key_event_string, save_file_in_html } from \"../utils/Utils.js\";\nimport { create_code_experiment_execution } from \"./functions/create_code_experiment_execution.js\";\nexport class Browser_Output_Writer extends Experiment_Output_Writer {\n    print_experiment_name(s) {\n        this.get_html_element_by_id(\"STATE\").innerHTML = s;\n    }\n    clear_error() {\n        let element_id = [\n            \"STAGE_ERROR\"\n        ];\n        for (let e of element_id) {\n            let parent = document.getElementById(e);\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n    clear_stage() {\n        let element_id = [\n            \"STAGE\",\n            \"STAGE_MSG\",\n            \"STAGE_ERROR\"\n        ];\n        for (let e of element_id) {\n            let parent = document.getElementById(e);\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n    clear_state() {\n        let element_id = [\n            \"STATE\",\n            \"TASK\"\n        ];\n        for (let e of element_id) {\n            let parent = document.getElementById(e);\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n    print_error_string_on_stage(s) {\n        let e = this.get_html_element_by_id(\"STAGE_ERROR\");\n        e.innerHTML = s;\n    }\n    get_html_element_by_id(s) {\n        // @ts-ignore\n        return document.getElementById(s);\n    }\n    print_string_to_state(s) {\n        this.get_html_element_by_id(\"STATE\").innerHTML = s;\n    }\n    print_string_on_stage(s) {\n        this.print_html_on_stage(\"<p>\" + s + \"</p>\");\n    }\n    ask_for_input() {\n        // @ts-ignore\n        let p = document.createElement(\"p\");\n        let l = document.createElement(\"label\");\n        l.setAttribute('type', 'text');\n        p.textContent = \"Answer: \";\n        p.appendChild(l);\n        // @ts-ignore\n        let i = document.createElement(\"input\");\n        i.setAttribute('type', 'text');\n        i.setAttribute('class', 'input');\n        p.appendChild(i);\n        i.id = \"INPUT\";\n        this.get_html_element_by_id(\"STAGE\").appendChild(p);\n        i.focus();\n    }\n    set_focus_on_input() {\n        let i = this.get_html_element_by_id(\"INPUT\");\n        i.focus();\n    }\n    print_string_to_page_number(s) {\n        this.get_html_element_by_id(\"TASK\").innerHTML = s;\n    }\n    get_given_answer() {\n        return this.get_html_element_by_id(\"INPUT\").value;\n    }\n    print_on_input_response(given_answer) {\n        this.get_html_element_by_id(\"INPUT\").value = given_answer;\n    }\n    create_html_element_from_string(s) {\n        let parser = new DOMParser();\n        let elements = parser.parseFromString(s, \"text/html\").body;\n        return elements;\n    }\n    print_html_on_stage(s) {\n        // for(let e of this.create_html_element_from_string(s)) {\n        this.get_html_element_by_id(\"STAGE\")\n            .appendChild(this.create_html_element_from_string(s));\n        // }\n    }\n    print_html_on_error(s) {\n        // for(let e of this.create_html_element_from_string(s)) {\n        //     this.get_html_element_by_id(\"STAGE_ERROR\")\n        //         .appendChild(e);\n        // }\n        this.get_html_element_by_id(\"STAGE_ERROR\")\n            .appendChild(this.create_html_element_from_string(s));\n    }\n}\nexport function BROWSER_EXPERIMENT(creator) {\n    let browser_output = new Browser_Output_Writer();\n    let cfg = creator(browser_output);\n    SET_SEED(cfg.seed);\n    let this_measurement = cfg.measurement(browser_output);\n    let experiment_automata = create_code_experiment_execution({\n        experiment_name: cfg.experiment_name,\n        seed: cfg.seed,\n        introduction_pages: cfg.introduction_pages,\n        post_questionnaire: cfg.post_questionnaire,\n        pre_run_training_output: cfg.pre_run_training_instructions,\n        training_configuration: cfg.training_configuration,\n        pre_run_experiment_output: cfg.pre_run_experiment_instructions,\n        finish_pages: cfg.finish_pages,\n        layout: cfg.layout,\n        repetitions: cfg.repetitions,\n        task_configuration: cfg.task_configuration,\n        measurement: this_measurement,\n        finish_function: (exp) => {\n            // @ts-ignore\n            document.removeEventListener(\"keydown\", key_forwarder);\n            save_file_in_html(cfg.experiment_name + \".csv\", exp.generate_csv_data());\n        }\n    });\n    let key_forwarder = (e) => {\n        let key_string = key_event_string(e);\n        experiment_automata.input(key_string);\n    };\n    // @ts-ignore\n    document.addEventListener(\"keydown\", key_forwarder, false);\n    if (cfg.pre_activation_function != undefined) {\n        cfg.pre_activation_function(experiment_automata);\n    }\n    experiment_automata.set_active();\n}\n//# sourceMappingURL=Browser_Output_Writer.js.map","import { Experiment_Definition } from \"./Experiment_Definition.js\";\nimport { Book_Forwarder } from \"../Automata_Forwarders/Book_Forwarder.js\";\nimport { Sequential_Forwarder_Forwarder } from \"../Books/Sequential_Forwarder_Forwarder.js\";\nimport { Training_Execution_Forwarder } from \"../Automata_Forwarders/Training_Execution_Forwarder.js\";\nimport { Experiment_Forwarder } from \"../Automata_Forwarders/Experiment_Forwarder.js\";\nimport { Questionnaire_Forwarder } from \"../Automata_Forwarders/Questionnaire_Forwarder.js\";\nexport function init() { }\n// TODO: Both classes should be one!!!\n// ASAP!!!!\nexport class Code_Experiment_Definition extends Experiment_Definition {\n    create_code_all_experiment_automatas(cfg) {\n        let output_writer = cfg.measurement.output_writer();\n        let introduction_book = new Book_Forwarder(\"Introduction\", cfg.introduction_texts, cfg.measurement);\n        let ending_book = new Book_Forwarder(\"Finish\", cfg.finish_texts, cfg.measurement);\n        ending_book.automata.add_finish_action(() => cfg.finish_function(experiment_execution_forwarder.experiment_definition));\n        let experiment_execution_forwarder = new Experiment_Forwarder(cfg.pre_run_experiment_output, this, cfg.measurement);\n        experiment_execution_forwarder.init_experiment();\n        let cloned_experiment_definition = this.clone();\n        let training_forwarder = new Training_Execution_Forwarder(cfg.pre_run_training_output, cfg.training_configuration, cloned_experiment_definition, cfg.measurement);\n        training_forwarder.init_experiment();\n        let post_questionnaire = null;\n        if (cfg.post_questionnaire != undefined) {\n            post_questionnaire = new Questionnaire_Forwarder(cfg.post_questionnaire, cfg.measurement);\n        }\n        let forwarders = [];\n        if (introduction_book != null) {\n            forwarders.push(introduction_book);\n        }\n        if (training_forwarder.experiment_definition.tasks.length != 0)\n            forwarders.push(training_forwarder);\n        forwarders.push(experiment_execution_forwarder);\n        if (post_questionnaire != null) {\n            forwarders.push(post_questionnaire);\n            experiment_execution_forwarder.experiment_definition.questionnaires.push(post_questionnaire);\n        }\n        forwarders.push(ending_book);\n        let forwarder = new Sequential_Forwarder_Forwarder(forwarders);\n        return forwarder;\n    }\n    // WHATEVER HAPPENS ON EARTH - THIS SHOULD ONLY BE USED FOR TRAINING!\n    clone() {\n        let clone = new Code_Experiment_Definition(this.template.experiment_name, this.is_training, this.treatments_combinator.clone(), this.template.variables, this.template.repetitions, this.measurement, this.template.task_creator);\n        return clone;\n    }\n}\n//# sourceMappingURL=Code_Experiment_Definition.js.map","export function init() { }\nexport class Experiment_Definition {\n    constructor(experiment_name, is_training, treatments_combinator, variables, repetitions, measurement, task_creator) {\n        this.questionnaires = [];\n        this.tasks = [];\n        this.experiment_name = experiment_name;\n        this.is_training = is_training;\n        this.template = { experiment_name: experiment_name, variables: variables, repetitions: repetitions, task_creator: task_creator };\n        this.treatments_combinator = treatments_combinator;\n        this.variables = variables;\n        this.measurement = measurement;\n        this.experiment_definition_task_creator = task_creator;\n    }\n    init_experiment(is_training) {\n        this.tasks = this.treatments_combinator.create_tasks(this);\n    }\n    all_independent_variables() {\n        return this.variables.independent_variables;\n    }\n    generate_csv_data() {\n        let result = [];\n        // let questionnaire_variables = this.questionnaire_responses = cfg.questionnaire.filter((e: Input_Object)=> !(e instanceof Information)).map((e: Input_Object)=>e.variable);\n        for (let questionnaire of this.questionnaires) {\n            for (let question of questionnaire.questions) {\n                result.push(\"\\\"\" + question.variable_name + \"\\\"\" + \";\");\n            }\n        }\n        this.variables.print_to_array(result);\n        result.push(\"number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\\n\");\n        for (let task of this.tasks) {\n            for (let questionnaire of this.questionnaires) {\n                for (let question of questionnaire.questions) {\n                    result.push(\"\\\"\" + question.answer + \"\\\"\" + \";\");\n                }\n            }\n            for (let treatment_combination of task.treatment_combination.treatment_combination) {\n                result.push(treatment_combination.value + \";\");\n            }\n            result.push((task.invalid_answers.length + 1) + \";\");\n            result.push(task.expected_answer + \";\");\n            result.push(task.given_answer + \";\");\n            result.push(\"\" + (task.given_answer == task.expected_answer) + \";\");\n            result.push(task.required_milliseconds + \";\");\n            task.invalid_answers.forEach((a) => result.push(a[0] + \";\" + a[1] + \";\"));\n            result.push(\"\\n\");\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=Experiment_Definition.js.map","import dummy from \"../../modules_hard_import/seedrandom/seedrandom.js\";\nimport { convert_string_to_html_string } from \"../utils/Utils.js\";\nimport { Alternatives, Freetext, Information } from \"../Automata_Forwarders/Questionnaire_Forwarder.js\";\nexport function init() { }\nexport var VARIABLE_TYPE;\n(function (VARIABLE_TYPE) {\n    VARIABLE_TYPE[VARIABLE_TYPE[\"STRING\"] = 1] = \"STRING\";\n    VARIABLE_TYPE[VARIABLE_TYPE[\"NUMBER\"] = 2] = \"NUMBER\";\n})(VARIABLE_TYPE || (VARIABLE_TYPE = {}));\nexport function Reaction_Time(input) {\n    return (writer) => new Reaction_Time_Measurement(input(writer));\n}\n;\nexport function Reaction_Time_With_Penalty(input, penalty_seconds) {\n    return (writer) => new Reaction_Time_Penalty_Measurement(input(writer), penalty_seconds);\n}\n;\nexport function Time_to_finish(input) {\n    return (writer) => new Time_To_Finish_Measurement(input(writer));\n}\nexport function Time_to_finish_with_Penalty(input, penalty_seconds) {\n    return (writer) => new Time_To_Finish_With_Time_Penalty_Measurement(input(writer), penalty_seconds);\n}\nexport function keys(key_list) {\n    return (writer) => new Key_Pressing(key_list, writer);\n}\nexport function keys_0_to_9() {\n    return (writer) => new Key_Pressing([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"], writer);\n}\nexport function text_input_experiment(output_writer) {\n    return new Free_Text_User_Input_Experiment(output_writer);\n}\nexport function text_input_experiment_with_pre_post_label(pre, post) {\n    return (output_writer) => new Free_Text_User_Input_Experiment_With_PrePost(output_writer, pre, post);\n}\nexport function information(question) {\n    return new Information(question);\n}\nexport function free_text(var_name, question) {\n    return new Freetext(var_name, question);\n}\nexport function alternatives(var_name, question, alternatives) {\n    return new Alternatives(var_name, question, alternatives);\n}\nexport class Experiment_Output_Writer {\n    convert_string_to_html_string(s) {\n        return convert_string_to_html_string(s);\n    }\n    string_page_command(s) {\n        return () => this.print_string_on_stage(s);\n    }\n    stage_string_pages_commands(pages) {\n        let ret = [];\n        for (let a of pages) {\n            ret.push(this.string_page_command(a));\n        }\n        return ret;\n    }\n    get_given_answer(input) {\n        return input;\n    }\n    print_on_input_response(given_answer) { }\n    set_focus_on_input() { }\n    clear_all() {\n        this.clear_state();\n        this.clear_stage();\n    }\n}\nexport class Measurement_Type {\n    constructor(input_type) {\n        this.input_type = input_type;\n    }\n    accepted_responses() {\n        return this.input_type.accepted_responses();\n    }\n    given_answer(i) {\n        return this.input_type.given_answer(i);\n    }\n    start_measurement(task) {\n        this.start_time = new Date().getTime().valueOf();\n        task.print_task();\n    }\n    stop_measurement(input, task) {\n        let end_time = new Date().getTime().valueOf();\n        task.given_answer = this.input_type.get_given_answer(input);\n        task.required_milliseconds = end_time - this.start_time;\n        task.do_print_after_task_information();\n    }\n    incorrect_response(i, task) {\n        let end_time = new Date().getTime().valueOf();\n        let given_answer = task.experiment_definition.measurement.get_given_answer(i);\n        task.invalid_answers.push([given_answer, end_time - this.start_time]);\n        task.do_print_error_message(this.input_type.get_given_answer(i));\n    }\n    output_writer() {\n        return this.input_type.output_writer;\n    }\n    get_given_answer(input) {\n        return this.input_type.get_given_answer(input);\n    }\n    demands_penalty() {\n        return false;\n    }\n    penalty_is_over() {\n        return true;\n    }\n}\nexport class Reaction_Time_Measurement extends Measurement_Type {\n    constructor(input_type) {\n        super(input_type);\n    }\n}\nexport class Reaction_Time_Penalty_Measurement extends Measurement_Type {\n    constructor(input_type, penalty_seconds) {\n        super(input_type);\n        this.penalty_started = false;\n        this.penalty_start_point = null;\n        this.penalty_miliseconds = penalty_seconds * 1000;\n    }\n    demands_penalty() {\n        return true;\n    }\n    incorrect_response(i, task) {\n        super.incorrect_response(i, task);\n        this.penalty_started = true;\n        this.penalty_start_point = new Date().getTime().valueOf();\n        task.do_print_error_message(this.input_type.get_given_answer(i));\n    }\n    delete_penalty() {\n        this.penalty_started = false;\n        this.penalty_start_point = null;\n    }\n    penalty_is_over() {\n        let diff = (new Date().getTime().valueOf()) - this.start_time;\n        return !this.penalty_started || diff >= this.penalty_miliseconds;\n    }\n    start_measurement(task) {\n        super.start_measurement(task);\n        this.delete_penalty();\n    }\n}\nexport class Time_To_Finish_Measurement extends Measurement_Type {\n    constructor(input_type) {\n        super(input_type);\n    }\n}\nexport class Time_To_Finish_With_Time_Penalty_Measurement extends Time_To_Finish_Measurement {\n    constructor(input_type, penalty_seconds) {\n        super(input_type);\n        this.penalty_started = false;\n        this.penalty_start_point = null;\n        this.penalty_miliseconds = penalty_seconds * 1000;\n    }\n    demands_penalty() {\n        return true;\n    }\n    incorrect_response(i, task) {\n        super.incorrect_response(i, task);\n        this.penalty_started = true;\n        this.penalty_start_point = new Date().getTime().valueOf();\n        task.do_print_error_message(this.input_type.get_given_answer(i));\n    }\n    delete_penalty() {\n        this.penalty_started = false;\n        this.penalty_start_point = null;\n    }\n    penalty_is_over() {\n        let diff = (new Date().getTime().valueOf()) - this.start_time;\n        return !this.penalty_started || diff >= this.penalty_miliseconds;\n    }\n    start_measurement(task) {\n        super.start_measurement(task);\n        this.delete_penalty();\n    }\n}\nexport class Experiment_Input_Type {\n    constructor(output_writer) {\n        this.output_writer = output_writer;\n    }\n    print_input_request() {\n        this.output_writer.ask_for_input();\n    }\n    get_given_answer(input_string) {\n        let value = this.output_writer.get_given_answer(input_string);\n        return value;\n    }\n}\nexport class Key_Pressing extends Experiment_Input_Type {\n    constructor(accepted_keys, output_writer) {\n        super(output_writer);\n        this.accepted_keys = accepted_keys;\n    }\n    accepted_responses() {\n        return this.accepted_keys;\n    }\n    given_answer(key_pressed) {\n        return key_pressed;\n    }\n    print_input_request() {\n        // I am a key....no need for input fields\n    }\n    get_given_answer(input_string) {\n        return input_string;\n    }\n}\nexport class Free_Text_User_Input_Experiment extends Experiment_Input_Type {\n    constructor(output_writer) {\n        super(output_writer);\n    }\n    accepted_responses() {\n        return [\"Enter\"];\n    }\n    given_answer(key_pressed) { }\n    print_input_request() {\n        this.output_writer.ask_for_input();\n    }\n}\nexport class Free_Text_User_Input_Experiment_With_PrePost extends Experiment_Input_Type {\n    constructor(output_writer, pre, post) {\n        super(output_writer);\n    }\n    accepted_responses() {\n        return [\"Enter\"];\n    }\n    given_answer(key_pressed) { }\n    print_input_request() {\n        this.output_writer.ask_for_input();\n    }\n}\nclass _Random {\n    constructor() {\n        // @ts-ignore\n        Math.seedrandom('1234567890');\n    }\n    // @ts-ignore\n    new_random_integer(upper_limit) {\n        return Math.trunc(upper_limit * Math.random());\n    }\n    set_seed(seed) {\n        // @ts-ignore\n        Math.seedrandom(seed);\n    }\n}\nexport const Random = new _Random();\nexport function SET_SEED(seed) {\n    Random.set_seed(seed);\n}\nexport function random_integer_up_to_excluding(upper_limit) {\n    return Random.new_random_integer(upper_limit);\n}\nexport function do_random_array_sort(array) {\n    let copy = [...array];\n    let result = [];\n    while (copy.length > 0) {\n        result.push(copy.splice(random_integer_up_to_excluding(copy.length), 1)[0]);\n    }\n    return result;\n}\nexport function random_array_element_and_remove(array) {\n    let position = random_integer_up_to_excluding(array.length);\n    let ret = array[position];\n    array.splice(position, 1);\n    return ret;\n}\nexport function random_array_element(array) {\n    return array[random_integer_up_to_excluding(array.length)];\n}\nexport function random_array_element_without(array, exceptions) {\n    let copy = array.filter(e => !exceptions.includes(e));\n    return random_array_element(copy);\n}\nexport function random_array_elements_without_repetitions(array, number_of_elements_to_chose) {\n    let randomly_sorted_array = do_random_array_sort(array);\n    return randomly_sorted_array.slice(0, number_of_elements_to_chose);\n}\nexport function random_lower_case_letter() {\n    return String.fromCharCode(97 + random_integer_up_to_excluding(26));\n}\nexport function random_lower_case_letter_except(letters) {\n    while (true) {\n        let ret = String.fromCharCode(97 + random_integer_up_to_excluding(26));\n        if (!letters.includes(ret))\n            return ret;\n    }\n}\nexport function random_upper_case_letter_except(letters) {\n    while (true) {\n        let ret = String.fromCharCode(97 + random_integer_up_to_excluding(26)).toUpperCase();\n        if (!letters.includes(ret))\n            return ret;\n    }\n}\n// This invocation just makes sure that RANDOM is loaded\ndummy();\n//# sourceMappingURL=Experimentation.js.map","export class Task {\n    constructor(tc, experiment_definition, text) {\n        this.expected_answer = \"\";\n        this.given_answer = \"\";\n        this.required_milliseconds = null;\n        this.task_number_in_execution = -1;\n        this.invalid_answers = [];\n        this.is_training = false;\n        this.has_pre_task_description = false;\n        this.do_print_task = () => {\n            throw new Error(\"Method not implemented.\");\n        };\n        this.do_print_pre_task = () => {\n            throw new Error(\"Method not implemented.\");\n        };\n        this.do_print_error_message = () => {\n            throw new Error(\"Method not implemented.\");\n        };\n        this.accepts_answer_function = (answer) => true;\n        this.do_print_after_task_information = () => {\n            throw new Error(\"Method not implemented.\");\n        };\n        this.treatment_combination = tc;\n        this.experiment_definition = experiment_definition;\n        // this.code_string(text);\n    }\n    accepts_answer(input) {\n        let answer = this.experiment_definition.measurement.get_given_answer(input);\n        return this.accepts_answer_function(answer);\n    }\n    next_task() {\n        if (this.task_number_in_execution < this.experiment_definition.tasks.length)\n            return this.experiment_definition.tasks[this.task_number_in_execution];\n        else\n            return null;\n    }\n    html_string_with_cmd(html_string, cmd) {\n        // this.write_action = (writer: Automata_IO) => {\n        //     writer.write(AUTOMATA_OUTPUT_WRITER_ACTION.OVERWRITE, AUTOMATA_OUTPUT_WRITER_TAGS.STAGE, html_line(html_string));\n        //     cmd();\n        // }\n    }\n    html_node_with_cmd(element, cmd) {\n        // this.write_action = (writer: Automata_IO) => {\n        //     writer.write(AUTOMATA_OUTPUT_WRITER_ACTION.OVERWRITE, AUTOMATA_OUTPUT_WRITER_TAGS.STAGE, html_node(element));\n        //     cmd();\n        // }\n    }\n    after_task_string_constructor(a_string_constructor) {\n        // this.after_task_write_action = () => (writer: Automata_IO) =>writer.write(AUTOMATA_OUTPUT_WRITER_ACTION.APPEND, AUTOMATA_OUTPUT_WRITER_TAGS.STAGE, text_line(a_string_constructor()));\n    }\n    print_task() {\n        this.do_print_task();\n        this.print_input_request();\n    }\n    print_pre_task_info() {\n        this.do_print_pre_task();\n    }\n    print_input_request() {\n        this.experiment_definition.measurement.input_type.print_input_request();\n    }\n    treatment_value(treatment_name) {\n        for (let treatment of this.treatment_combination.treatment_combination)\n            if (treatment.variable.name === treatment_name)\n                return treatment.value;\n        throw \"Unknown treatment: \" + treatment_name;\n    }\n    set_computed_variable_value(variable_name, value) {\n        for (let treatment of this.treatment_combination.treatment_combination)\n            if (treatment.variable.name === variable_name) {\n                treatment.value = value;\n                return;\n            }\n        throw \"Unknown treatment: \" + variable_name;\n    }\n}\n//# sourceMappingURL=Task.js.map","import { Treatment } from \"./treatments/Treatment.js\";\nimport { iterate_both } from \"../utils/loops/loop.js\";\nimport { Task } from \"./Task.js\";\nimport { Treatment_Combination } from \"./treatments/Treatment_Combination.js\";\nexport class Training_Configuration {\n    constructor(training_configuration) {\n        this.can_be_cancelled = true;\n        this.can_be_repeated = true;\n        if (training_configuration === undefined)\n            return;\n        if (training_configuration.fixed_treatments != undefined)\n            this.fixed_treatments = training_configuration.fixed_treatments;\n        this.can_be_cancelled = training_configuration.can_be_cancelled;\n        this.can_be_repeated = training_configuration.can_be_repeated;\n    }\n    init_experiment(experiment_definition) {\n        experiment_definition.tasks = [];\n        if (this.fixed_treatments != undefined) {\n            for (let a_treatment_combination of this.fixed_treatments) {\n                let treatment_combination = new Treatment_Combination([]);\n                iterate_both(experiment_definition.all_independent_variables(), a_treatment_combination, (variable, value) => {\n                    treatment_combination.treatment_combination.push(new Treatment(variable, value));\n                });\n                let task = new Task(treatment_combination, experiment_definition, \"\");\n                task.is_training = true;\n                experiment_definition.experiment_definition_task_creator(task);\n                experiment_definition.tasks.push(task);\n            }\n        }\n        else {\n            experiment_definition.init_experiment(true);\n        }\n    }\n}\n//# sourceMappingURL=Training_Configuration.js.map","import { Treatments_Combinator } from \"../treatments/Treatments_Combinator.js\";\nimport { Code_Experiment_Definition } from \"../Code_Experiment_Definition.js\";\nimport { Training_Configuration } from \"../Training_Configuration.js\";\nimport { Independent_Variables } from \"../treatments/Independent_Variables.js\";\nexport function create_code_experiment_execution(cfg) {\n    let variables = Independent_Variables.from_layout(cfg.layout);\n    let all_treatment_combinations = new Treatments_Combinator(variables, cfg.repetitions);\n    let experiment_definition = new Code_Experiment_Definition(cfg.experiment_name, false, all_treatment_combinations, variables, cfg.repetitions, cfg.measurement, cfg.task_configuration);\n    let training_configuration = new Training_Configuration(cfg.training_configuration);\n    let experiment_execution = experiment_definition.create_code_all_experiment_automatas({\n        seed: cfg.seed,\n        introduction_texts: cfg.introduction_pages,\n        post_questionnaire: cfg.post_questionnaire,\n        pre_run_training_output: cfg.pre_run_training_output,\n        training_configuration: training_configuration,\n        // post_run_training_output: cfg.post_run_training_output,\n        pre_run_experiment_output: cfg.pre_run_experiment_output,\n        // post_run_experiment_output: cfg.post_run_experiment_output,\n        finish_texts: cfg.finish_pages,\n        measurement: cfg.measurement,\n        finish_function: cfg.finish_function\n    });\n    return experiment_execution;\n}\n//# sourceMappingURL=create_code_experiment_execution.js.map","import { Treatment } from \"./Treatment.js\";\nexport class Independent_Variable {\n    constructor(name, treatments) {\n        this.treatments = [];\n        this.name = name;\n        for (let aString of treatments) {\n            this.treatments.push(new Treatment(this, aString));\n        }\n    }\n}\n//# sourceMappingURL=Independent_Variable.js.map","import { Independent_Variable } from \"./Independent_Variable.js\";\nimport { all_array_combinations } from \"../../utils/arrays/all_array_combinations.js\";\nimport { Treatment_Combination } from \"./Treatment_Combination.js\";\nexport class Independent_Variables {\n    constructor() {\n        this.independent_variables = [];\n    }\n    push_variable(n, treatments) {\n        this.independent_variables.push(new Independent_Variable(n, treatments));\n    }\n    print_to_array(result) {\n        for (let variable of this.independent_variables) {\n            result.push(variable.name + \";\");\n        }\n    }\n    create_treatment_combinations() {\n        let treatment_combinations = [];\n        all_array_combinations(this.independent_variables.map(t => t.treatments), (treatments) => {\n            treatment_combinations.push(new Treatment_Combination([...treatments]));\n        });\n        return treatment_combinations;\n    }\n    get_variable_named(var_name) {\n        for (let v of this.independent_variables) {\n            if (v.name === var_name)\n                return v;\n        }\n        throw \"Unknown independent variable named: \" + var_name;\n    }\n    static from_layout(layout) {\n        let variables = new Independent_Variables();\n        for (let aVar of layout) {\n            variables.push_variable(aVar.variable, aVar.treatments);\n        }\n        return variables;\n    }\n}\n//# sourceMappingURL=Independent_Variables.js.map","export class Treatment {\n    constructor(variable, value) {\n        this.variable = variable;\n        this.value = \"\" + value;\n    }\n    clone() {\n        let ret = new Treatment(this.variable, this.value);\n        return ret;\n    }\n}\n//# sourceMappingURL=Treatment.js.map","export class Treatment_Combination {\n    constructor(treatment_combination) {\n        this.treatment_combination = [];\n        this.treatment_combination = treatment_combination;\n    }\n    clone() {\n        let ret = new Treatment_Combination([]);\n        for (let treatment of this.treatment_combination) {\n            ret.treatment_combination.push(treatment.clone());\n        }\n        return ret;\n    }\n}\n//# sourceMappingURL=Treatment_Combination.js.map","import { Task } from \"../Task.js\";\nimport { do_random_array_sort } from \"../Experimentation.js\";\n/**\n * All experiment definitions contain the treatment combinations (including repetitions)\n */\nexport class Treatments_Combinator {\n    constructor(variables, repetitions) {\n        this.variables = variables;\n        this.repetitions = repetitions;\n    }\n    clone() {\n        return new Treatments_Combinator(this.variables, this.repetitions);\n    }\n    create_treatment_combinations() {\n        let treatment_combinations = [];\n        for (let r = 0; r < this.repetitions; r++) {\n            treatment_combinations = treatment_combinations.concat(this.variables.create_treatment_combinations());\n        }\n        return treatment_combinations;\n    }\n    create_tasks(experiment_definition) {\n        let tasks = [];\n        for (let treatment_combination of this.create_treatment_combinations()) {\n            let task = new Task(treatment_combination.clone(), experiment_definition, \"\");\n            try {\n                experiment_definition.experiment_definition_task_creator(task);\n            }\n            catch (ex) {\n                console.log(\"halt\");\n                experiment_definition.experiment_definition_task_creator(task);\n            }\n            task.is_training = experiment_definition.is_training;\n            tasks.push(task);\n        }\n        return do_random_array_sort(tasks);\n    }\n    get_variable_named(var_name) {\n        return this.variables.get_variable_named(var_name);\n    }\n}\n//# sourceMappingURL=Treatments_Combinator.js.map","import { do_tests } from \"./Utils_Test.js\";\nexport function init() { }\nexport class RefObject {\n    constructor(value) {\n        this.value = value;\n    }\n}\nexport function contains(collection, element) {\n    return collection.indexOf(element) != -1;\n}\nexport function cartesian_product(arr1, arr2, f) {\n    for (let i = 0; i < arr1.length; i++) {\n        for (let j = 0; i < arr2.length; i++) {\n            f(arr1[i], arr2[j]);\n        }\n    }\n}\nexport function guarantee_test(f) {\n    let result = f();\n    if (!result)\n        throw \"Something is wrong here\";\n}\nexport function guarantee_true(trueFalse) {\n    if (!trueFalse)\n        throw \"Something is wrong here\";\n}\nexport function convert_string_to_html_string(s) {\n    return s\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\n/g, \"<br/>\")\n        .replace(/ /g, '&nbsp;');\n}\nexport function key_event_string(event) {\n    var postfix = \"\";\n    if (event.key == \"Alt\")\n        if (event.ctrlKey)\n            return \"Alt+Ctrl\";\n    if (event.key == \"Control\")\n        if (event.altKey)\n            return \"Ctrl+Alt\";\n    postfix = postfix + (event.altKey ? \"+Alt\" : \"\");\n    postfix = postfix + (event.ctrlKey ? \"+Control\" : \"\");\n    if (event.key == \"Alt\")\n        return \"Alt\";\n    // if(event.key==\"Control\") return postfix;\n    return \"\" + event.key + postfix;\n}\nexport function array_to_sequence_of_size_(sequence) {\n    var ret = [];\n    var counter = 0;\n    for (var element of sequence) {\n        ret.push(counter);\n        counter++;\n    }\n    return ret;\n}\nexport function csv_encoding(a_string) {\n    let add_escapes = a_string.split(\"\\\"\").join(\"\\\"\\\"\");\n    return \"\\\"\" + add_escapes + \"\\\"\";\n}\nexport function save_file_in_html(filename, data) {\n    const blob = new Blob(data, { type: 'application/ssc' });\n    const elem = window.document.createElement('a');\n    elem.href = window.URL.createObjectURL(blob);\n    elem.download = filename;\n    document.body.appendChild(elem);\n    elem.click();\n    document.body.removeChild(elem);\n}\nexport function add_upload_push_button(url, button_test, data) {\n    const elem = window.document.createElement('form');\n    elem.setAttribute(\"action\", url);\n    elem.setAttribute(\"method\", \"post\");\n    const i = window.document.createElement('input');\n    i.setAttribute(\"name\", \"data\");\n    i.setAttribute(\"type\", \"hidden\");\n    i.setAttribute(\"value\", data);\n    elem.appendChild(i);\n    const j = window.document.createElement('input');\n    j.setAttribute(\"value\", button_test);\n    j.setAttribute(\"type\", \"submit\");\n    elem.appendChild(j);\n    document.body.appendChild(elem);\n}\nexport function upload_experiment_to_server(experiment) {\n    let csv = experiment.generate_csv_data();\n    let currentUrl = window.location.href;\n    // const response = fetch('http://127.0.0.1:8088', {\n    //     method: 'POST',\n    //     body: JSON.stringify({experiment_name : \"dummy2\", experiment_data: data}),\n    //     headers: {'Content-Type': 'application/json; charset=UTF-8'} })\n    console.log(currentUrl);\n}\ndo_tests();\n//# sourceMappingURL=Utils.js.map","// Does not do anything any longer. I still keep it here - probably need it in the future.\n// Is executed by Utils.\nexport function do_tests() {\n    // let encoded_string = \"\";\n    //\n    // encoded_string =csv_encoding('\"');\n    // console.log(encoded_string);\n    //\n    // encoded_string = csv_encoding('\"\"');\n    // console.log(encoded_string);\n    //\n    // encoded_string = csv_encoding('\"\"\"\"\"\"\"\"\"\"');\n    // console.log(encoded_string);\n    //\n    // encoded_string = csv_encoding('\";');\n    // console.log(encoded_string);\n}\n//# sourceMappingURL=Utils_Test.js.map","function all_array_combinations_internal(arr, combination, f) {\n    if (arr.length == 0) {\n        f(combination);\n    }\n    else {\n        let last = arr.shift();\n        for (let e of last) {\n            combination.push(e);\n            all_array_combinations_internal(arr, combination, f);\n            combination.pop();\n        }\n        arr.unshift(last);\n    }\n}\n/**\n *  @param arr: An array of arrays\n *  executes for all combinations of arrays the function f\n */\nexport function all_array_combinations(arr, f) {\n    all_array_combinations_internal(arr, [], f);\n}\n/**\n * Examples:\n *   all_x_tupel(1, [1, 2, 3]) = [1, 2, 3]\n *   all_x_tupel(2, [1, 2, 3]) = [[1, 1], [1,2]], [1,3], [2,1]....[3,3]]\n\n */\nexport function all_x_tupel(tupel_length, arr) {\n    let result = [];\n    if (tupel_length == 1) {\n        for (let e of arr) {\n            result.push([e]);\n        }\n        return result;\n    }\n    let x_minus_one_tupel = all_x_tupel(tupel_length - 1, arr);\n    for (let e of arr) {\n        for (let a_x_minux_one_tupel of x_minus_one_tupel) {\n            result.push([e, ...a_x_minux_one_tupel]);\n        }\n    }\n    return result;\n}\n/**\n * Examples:\n *   all_different_x_tupel(3, [1, 2, 3]) = [[1, 2, 3], [1,3,2], [2,1,3], [2,3,1]. [3,1,2], [3,2,1]]\n *\n*/\nexport function all_different_x_tupel(tupel_length, arr) {\n    let result = [];\n    if (tupel_length == 1) {\n        for (let e of arr) {\n            result.push([e]);\n        }\n        return result;\n    }\n    for (let e = 0; e < arr.length; e++) {\n        let arr_without_current_element = arr.slice();\n        arr_without_current_element.splice(e, 1);\n        let x_minus_one_tupel = all_different_x_tupel(tupel_length - 1, arr_without_current_element);\n        for (let a_x_minux_one_tupel of x_minus_one_tupel) {\n            result.push([arr[e], ...a_x_minux_one_tupel]);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=all_array_combinations.js.map","export function iterate_with_counter(array, f) {\n    let counter = 0;\n    for (let e of array) {\n        f(e, counter++);\n    }\n}\nexport function iterate_both(a1, a2, f) {\n    if (a1.length > a2.length)\n        throw \"Cannot loop both: first array has length: \" + a1.length + \", but second has length \" + a2.length;\n    let counter = 0;\n    for (let e of a1) {\n        f(e, a2[counter++]);\n    }\n}\nexport function iterate_matrix(matrix, f) {\n    iterate(matrix).do_with_counter((row, row_no) => {\n        iterate(matrix[row_no]).do_with_counter((element, column_no) => {\n            f(element, row_no, column_no);\n        });\n    });\n}\nexport function iterate(array) {\n    return new Iterator(array);\n}\nexport class Iterator {\n    constructor(array) {\n        this.array = array;\n    }\n    do(f) {\n        for (let element of this.array)\n            f(element);\n    }\n    do_with_counter(f) {\n        for (let c = 0; c < this.array.length; c++) {\n            f(this.array[c], c);\n        }\n    }\n}\nexport function repeat(n, f) {\n    for (let c = 0; c < n; c++) {\n        f(c);\n    }\n    // return new Repeat(0)\n}\nexport function repeat_n_times(n) {\n    return new Repeat(n);\n}\nexport function repeat_(n) {\n    return new Repeat(n);\n}\nexport class Repeat {\n    constructor(counter) {\n        this.counter = counter;\n    }\n    and_collect(f) {\n        let arr = [];\n        for (let c = 1; c <= this.counter; c++) {\n            arr.push(f(c));\n        }\n        return arr;\n    }\n    _times(f) {\n        for (let c = 1; c <= this.counter; c++) {\n            f();\n        }\n    }\n    times(f) {\n        for (let c = 1; c <= this.counter; c++) {\n            f(c);\n        }\n    }\n    _do(f) {\n        for (let c = 1; c <= this.counter; c++) {\n            f(c);\n        }\n    }\n}\n//# sourceMappingURL=loop.js.map","/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto          // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) {\n          math[rngname] = prng;\n          return seed;\n        }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    // console.log(obj);\n    for (prop in obj) {\n      // console.log(prop);\n      try {\n        result.push(\n            flatten(\n                obj[\n                    prop\n                ],\n                depth - 1)\n        );\n      } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n\n    nodecrypto = require('crypto');\n    var out = crypto.randomByte\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  math['seed' + rngname] = seedrandom;\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n  // module.exports = seedrandom;\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n\nexport function INIT_RANDOM(){\n  console.log(\"DONE\");\n}\n\nexport default function dummy() {\n  console.log(\"DONE\");\n}\n\nconsole.log(\"RANDOM_INIT\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { BROWSER_EXPERIMENT } from \"../../N-of-1-Experimentation/modules/Experimentation/Browser_Output_Writer.js\";\nimport {\n    alternatives, Experiment_Output_Writer, random_array_element, SET_SEED, text_input_experiment, Time_to_finish\n} from \"../../N-of-1-Experimentation/modules/Experimentation/Experimentation.js\";\nimport { Task } from \"../../N-of-1-Experimentation/modules/Experimentation/Task.js\";\n\nconst SEED = \"321\";\nSET_SEED(SEED);\n\n// Utility to randomly pick n unique elements from an array\nfunction random_letters(n: number): string[] {\n    const alphabet = \"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\".split(\" \");\n    const result: string[] = [];\n    while (result.length < n) {\n        const letter = random_array_element(alphabet);\n        if (!result.includes(letter)) result.push(letter);\n    }\n    return result;\n}\n\nconst NUM_PARAMS_OPTIONS = [2, 3, 4, 5];\n\nconst experiment_configuration_function = (writer: Experiment_Output_Writer) => ({\n    experiment_name: \"Generic-Static-Dynamic-Treatment\",\n    seed: SEED,\n\n    introduction_pages: writer.stage_string_pages_commands([\n        writer.convert_string_to_html_string(`\n      In this experiment, you will see a Java-like code snippet and a method call.\n      Your task: enter the resulting type, given the code. Example: Map<A, B>\n    `)\n    ]),\n\n    pre_run_training_instructions: writer.string_page_command(\n        writer.convert_string_to_html_string(\"TEST You entered the training phase. You can skip the training by pressing [Esc].\")\n    ),\n\n    pre_run_experiment_instructions: writer.string_page_command(\n        writer.convert_string_to_html_string(\"Now the experiment begins. Provide the correct resulting types.\")\n    ),\n\n    post_questionnaire: [\n        alternatives(\"impression\", \"How difficult was this?\", [\"Easy\", \"Neutral\", \"Hard\"])\n    ],\n\n    finish_pages: [\n        writer.string_page_command(`<p>Thank you! Please download the data and send it to the experimenter...</p>`)\n    ],\n\n    layout: [\n        { variable: \"Treatment\", treatments: [\"Static Type\", \"Dynamic Type\"] },\n        { variable: \"Number_of_parameters\", treatments: NUM_PARAMS_OPTIONS.map(String) }\n    ],\n\n    repetitions: 5,\n    measurement: Time_to_finish(text_input_experiment),\n\n    task_configuration: (task: Task) => {\n        const treatment = task.treatment_value(\"Treatment\") as \"Static Type\" | \"Dynamic Type\";\n        const num_params = parseInt(task.treatment_value(\"Number_of_parameters\"));\n        const letters = random_letters(num_params); // e.g., [B, J, F, H, K]\n\n        // --- Classes\n        const class_defs = letters.map(l => `class ${l} {}`).join(\"\\n\");\n\n        let method_sig: string;\n        let call_line: string;\n\n        if (treatment === \"Static Type\") {\n            method_sig = `static Map<${letters.join(\", \")}> organize(${letters.map((l, i) => `${l} param${i + 1}`).join(\", \")}) { /* ... */ }`;\n            const param_list = letters.map((_, i) => `param${i + 1}`).join(\", \");\n            call_line = `Map<${letters.join(\", \")}> result = organize(${param_list});`;\n\n        } else {\n            const typeVars = letters.map((_, i) => `T${i}`);\n\n            // Shuffle: Which param index each typeVar will match\n            const paramIndexes = [...Array(num_params).keys()];\n            const shuffledParamIndexes = [...paramIndexes].sort(() => Math.random() - 0.5);\n\n            // Each Tn is bound to the class of the corresponding param it will stand in for\n            const mappings = typeVars.map((typeVar, i) => {\n                const paramIndex = shuffledParamIndexes[i];\n                return {\n                    typeVar,\n                    paramName: `param${paramIndex + 1}`,\n                    boundClass: letters[paramIndex]\n                };\n            });\n\n            // Shuffle again just for display (order of <T0 extends ...>)\n            const shuffledMappingsForDisplay = [...mappings].sort(() => Math.random() - 0.5);\n\n            const generic_bounds = shuffledMappingsForDisplay.map(m => `${m.typeVar} extends ${m.boundClass}`).join(\", \");\n            const params = mappings.map(m => `${m.typeVar} ${m.paramName}`).join(\", \");\n            const wildcards = mappings.map(() => \"?\").join(\", \");\n            const callParams = mappings.map(m => `${m.paramName}`).join(\", \");\n\n            method_sig = `static <${generic_bounds}>\\nMap<${wildcards}> organize(${params}) { /* ... */ }`;\n            call_line = `Map<${wildcards}> result = organize(${callParams});`;\n        }\n\n        // --- Parameter declarations\n        const param_decls = letters.map((l, i) => `${l} param${i + 1} = new ${l}();`).join(\"\\n\");\n\n        // --- Expected answer\n        const callParamOrder = call_line.match(/organize\\((.*?)\\)/)?.[1].split(\",\").map(p => p.trim()) || [];\n        const paramMap: Record<string, string> = {};\n        letters.forEach((l, i) => { paramMap[`param${i + 1}`] = l; });\n        const expectedTypesInCallOrder = callParamOrder.map(p => paramMap[p]);\n        const expected = `Map<${expectedTypesInCallOrder.join(\", \")}>`;\n\n        const code_blocks = [\n            \"---\",\n            class_defs,\n            \"---\",\n            method_sig,\n            \"---\",\n            param_decls,\n            \"---\",\n            call_line,\n            \"---\",\n        ];\n\n        const display_code = code_blocks.join(\"\\n\\n\");\n\n        // Assign behavior\n        task.do_print_task = () => {\n            writer.clear_stage();\n            writer.print_string_on_stage(writer.convert_string_to_html_string(display_code));\n        };\n\n        task.expected_answer = expected;\n\n        task.accepts_answer_function = (answer: string) => answer.trim() === expected;\n\n        task.do_print_error_message = () => {\n            writer.clear_error();\n            writer.print_string_on_stage(`Incorrect, expected ${expected}`);\n        };\n\n        task.do_print_after_task_information = () => {\n            writer.clear_stage();\n            writer.clear_error();\n            writer.print_string_on_stage(writer.convert_string_to_html_string(\"Correct. Press Enter to continue.\"));\n        };\n    }\n});\n\nBROWSER_EXPERIMENT(experiment_configuration_function);"],"names":[],"sourceRoot":""}