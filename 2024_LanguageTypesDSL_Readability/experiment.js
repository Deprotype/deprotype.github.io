(()=>{"use strict";function e(e,t){return-1!=e.indexOf(t)}!function(e,t,r){var n,s=256,i="random",a=r.pow(s,6),o=r.pow(2,52),_=2*o,p=s-1;function h(p,h,b){var f=[],g=d(l((h=1==h?{entropy:!0}:h||{}).entropy?[p,m(t)]:null==p?function(){try{n=require("crypto");var r=crypto.randomByte;return n&&(r=n.randomBytes)?r=r(s):(r=new Uint8Array(s),(e.crypto||e.msCrypto).getRandomValues(r)),m(r)}catch(r){var i=e.navigator,a=i&&i.plugins;return[+new Date,e,a,e.screen,m(t)]}}():p,3),f),y=new c(f),w=function(){for(var e=y.g(6),t=a,r=0;e<o;)e=(e+r)*s,t*=s,r=y.g(1);for(;e>=_;)e/=2,t/=2,r>>>=1;return(e+r)/t};return w.int32=function(){return 0|y.g(4)},w.quick=function(){return y.g(4)/4294967296},w.double=w,d(m(y.S),t),(h.pass||b||function(e,t,n,s){return s&&(s.S&&u(s,y),e.state=function(){return u(y,{})}),n?(r[i]=e,t):e})(w,g,"global"in h?h.global:this==r,h.state)}function c(e){var t,r=e.length,n=this,i=0,a=n.i=n.j=0,o=n.S=[];for(r||(e=[r++]);i<s;)o[i]=i++;for(i=0;i<s;i++)o[i]=o[a=p&a+e[i%r]+(t=o[i])],o[a]=t;(n.g=function(e){for(var t,r=0,i=n.i,a=n.j,o=n.S;e--;)t=o[i=p&i+1],r=r*s+o[p&(o[i]=o[a=p&a+t])+(o[a]=t)];return n.i=i,n.j=a,r})(s)}function u(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function l(e,t){var r,n=[],s=typeof e;if(t&&"object"==s)for(r in e)try{n.push(l(e[r],t-1))}catch(e){}return n.length?n:"string"==s?e:e+"\0"}function d(e,t){for(var r,n=e+"",s=0;s<n.length;)t[p&s]=p&(r^=19*t[p&s])+n.charCodeAt(s++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(d(r.random(),t),"object"==typeof module&&module.exports){module.exports=h;try{n=require("crypto")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return h})):r["seed"+i]=h}("undefined"!=typeof self?self:void 0,[],Math);class t{constructor(e){this.set_active_function=()=>{},this.forwarder_name=e}input(e){this.automata.input(e)}add_activation_function(e){}set_active(){}}class r{constructor(e){this.current_state=-1,this.transitions=[],this.states=[],this.start_state=e.start,this.states=e.states;for(let e=0;e<this.states.length;e++)this.transitions.push([]);for(let t of e.transitions)this.transitions[t.from].push(t);this.init_function=e.init_function,this.end_states=e.end_states}input(e){let t=this.first_match(e),r=this.current_state;null!=t&&(this.current_state=t.next_state,t.action(r,e,this.current_state))}start(){this.current_state=this.start_state}first_match(e){for(let t=0;t<this.transitions[this.current_state].length;t++)if(this.transitions[this.current_state][t].accepts(e))return this.transitions[this.current_state][t];return null}initialize(){this.current_state=this.start_state,this.init_function()}add_finish_action(e){for(let t of this.transitions)for(let r of t)if(this.is_transition_to_end(r)){let t=r.action;r.action=(r,n,s)=>{t(r,n,s),e()}}}is_transition_to_end(t){return e(this.end_states,t.next_state)}add_action_to_transitions(e,t){for(let r of this.transitions)for(let n of r)if(e(n)){let e=n.action;n.action=(r,n,s)=>{e(r,n,s),t()}}}}class n extends t{constructor(e,t,r,n){super(e),this.pre_run_instructions=r,this.post_run_instructions=n,this.measurement=t,this.automata=this.create_automata(),this.automata.initialize()}set_active(){this.show_intro()}create_automata(){return new r(this.automata_configurator())}output_writer(){return this.measurement.output_writer()}show_intro(){this.output_writer().clear_all(),this.output_writer().print_string_to_state(this.forwarder_name),this.pre_run_instructions()}empty_screen_and_show_instructions(e){this.output_writer().clear_state(),this.output_writer().clear_stage(),null==e||null==e?console.log("something is strange"):e()}}class s{constructor(e,t,r,n,s){this.states=e,this.start=t,this.init_function=r,this.transitions=n,this.end_states=s}}class i{}class a extends i{constructor(e){super(),this.acceptor_function=e}accepts(e){return this.acceptor_function(e)}}class o{constructor(e,t,r,n){this.from=e,this.acceptor=t,this.next_state=r,this.action=n}is_valid_input(e){return this.acceptor.accepts(e)}accepts(e){return this.acceptor.accepts(e)}}function _(e,t,r,n){return new o(e,new a(t),r,((e,t,r)=>n(t)))}function p(t){return{to:r=>({on:e=>({if:n=>({do:s=>_(t,(t=>t==e&&n(t)),r,s)}),do:n=>_(t,(t=>t==e),r,n)}),on_any:n=>({if:s=>({do:i=>_(t,(t=>e(n,t)&&s(t)),r,i)}),do:s=>_(t,(t=>e(n,t)),r,s)})})}}class h{constructor(e,t){this.answer=null,this.variable_name=e,this.question_text=t}store_answer(){let e=document.getElementById(this.variable_name);this.answer=e.value}}class c extends h{constructor(e,t,r){super(e,t),this.alternatives=r}input_html(){let e='<select id="'+this.variable_name+'">';e+="<option disabled selected value> -- select an option -- </option>";let t=0;return this.alternatives.forEach((r=>e+="<option value="+t+++">"+r+"</option>")),e+="</select>",e}store_answer(){let e=document.getElementById(this.variable_name);this.answer=this.alternatives[e.value]}}class u extends n{constructor(e,t){super("Questionnaire",t,(()=>t.output_writer().print_html_on_stage("Please, answer the following questions.<br>")),(()=>t.output_writer().print_html_on_stage("Thank you for answering the questions."))),this.current_question_number=-1,this.questions=e}automata_configurator(){return new s([0,1,2,3,4],0,(()=>{}),this.transitions(),[4])}transitions(){return[p(0).to(4).on("DONE").if((e=>!0)).do((e=>{this.add_result_to_question(),console.log("dummy")}))]}show_intro(){super.show_intro();let e=this.create_questionnaire_html_string();this.output_writer().print_html_on_stage(e),document.getElementById("DONE").onclick=()=>this.input("DONE")}show_outro(){}create_questionnaire_html_string(){let e="<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>";return this.questions.forEach((t=>e+="<tr><td>"+t.question_text+"</td><td>"+t.input_html()+"</td></tr>")),e+="</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>",e}add_result_to_question(){for(let e of this.questions)e.store_answer()}}var l;function d(e,t,r){return new c(e,t,r)}!function(e){e[e.STRING=1]="STRING",e[e.NUMBER=2]="NUMBER"}(l||(l={}));class m{convert_string_to_html_string(e){return function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/\n/g,"<br/>").replace(/ /g,"&nbsp;")}(e)}string_page_command(e){return()=>this.print_string_on_stage(e)}stage_string_pages_commands(e){let t=[];for(let r of e)t.push(this.string_page_command(r));return t}get_given_answer(e){return e}print_on_input_response(e){}set_focus_on_input(){}clear_all(){this.clear_state(),this.clear_stage()}}class b{constructor(e){this.input_type=e}accepted_responses(){return this.input_type.accepted_responses()}given_answer(e){return this.input_type.given_answer(e)}start_measurement(e){this.start_time=(new Date).getTime().valueOf(),e.print_task()}stop_measurement(e,t){let r=(new Date).getTime().valueOf();t.given_answer=this.input_type.get_given_answer(e),t.required_milliseconds=r-this.start_time,t.do_print_after_task_information()}incorrect_response(e,t){let r=(new Date).getTime().valueOf(),n=t.experiment_definition.measurement.get_given_answer(e);t.invalid_answers.push([n,r-this.start_time]),t.do_print_error_message(this.input_type.get_given_answer(e))}output_writer(){return this.input_type.output_writer}get_given_answer(e){return this.input_type.get_given_answer(e)}demands_penalty(){return!1}penalty_is_over(){return!0}}class f extends b{constructor(e){super(e)}}class g{constructor(e){this.output_writer=e}print_input_request(){this.output_writer.ask_for_input()}get_given_answer(e){return this.output_writer.get_given_answer(e)}}class y extends g{constructor(e,t){super(t),this.accepted_keys=e}accepted_responses(){return this.accepted_keys}given_answer(e){return e}print_input_request(){}get_given_answer(e){return e}}const w=new class{constructor(){Math.seedrandom("1234567890")}new_random_integer(e){return Math.trunc(e*Math.random())}set_seed(e){Math.seedrandom(e)}};function x(e){w.set_seed(e)}function v(e){return w.new_random_integer(e)}class E{constructor(e,t,r){this.expected_answer="",this.given_answer="",this.required_milliseconds=null,this.task_number_in_execution=-1,this.invalid_answers=[],this.is_training=!1,this.do_print_task=()=>{throw new Error("Method not implemented.")},this.do_print_error_message=()=>{throw new Error("Method not implemented.")},this.accepts_answer_function=e=>!0,this.do_print_after_task_information=()=>{throw new Error("Method not implemented.")},this.treatment_combination=e,this.experiment_definition=t}accepts_answer(e){let t=this.experiment_definition.measurement.get_given_answer(e);return this.accepts_answer_function(t)}next_task(){return this.task_number_in_execution<this.experiment_definition.tasks.length?this.experiment_definition.tasks[this.task_number_in_execution]:null}html_string_with_cmd(e,t){}html_node_with_cmd(e,t){}after_task_string_constructor(e){}print_task(){this.do_print_task(),this.print_input_request()}print_input_request(){this.experiment_definition.measurement.input_type.print_input_request()}treatment_value(e){for(let t of this.treatment_combination.treatment_combination)if(t.variable.name===e)return t.value;throw"Unknown treatment: "+e}set_computed_variable_value(e,t){for(let r of this.treatment_combination.treatment_combination)if(r.variable.name===e)return void(r.value=t);throw"Unknown treatment: "+e}}class T{constructor(e,t){this.variables=e,this.repetitions=t}clone(){return new T(this.variables,this.repetitions)}create_treatment_combinations(){let e=[];for(let t=0;t<this.repetitions;t++)e=e.concat(this.variables.create_treatment_combinations());return e}create_tasks(e){let t=[];for(let r of this.create_treatment_combinations()){let n=new E(r.clone(),e,"");e.experiment_definition_task_creator(n),n.is_training=e.is_training,t.push(n)}return function(e){let t=[...e],r=[];for(;t.length>0;)r.push(t.splice(v(t.length),1)[0]);return r}(t)}get_variable_named(e){return this.variables.get_variable_named(e)}}class O{constructor(e,t,r,n,s,i,a){this.questionnaires=[],this.tasks=[],this.experiment_name=e,this.is_training=t,this.template={experiment_name:e,variables:n,repetitions:s,task_creator:a},this.treatments_combinator=r,this.variables=n,this.measurement=i,this.experiment_definition_task_creator=a}init_experiment(e){this.tasks=this.treatments_combinator.create_tasks(this)}all_independent_variables(){return this.variables.independent_variables}generate_csv_data(){let e=[];for(let t of this.questionnaires)for(let r of t.questions)e.push('"'+r.variable_name+'";');this.variables.print_to_array(e),e.push("number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\n");for(let t of this.tasks){for(let t of this.questionnaires)for(let r of t.questions)e.push('"'+r.answer+'";');for(let r of t.treatment_combination.treatment_combination)e.push(r.value+";");e.push(t.invalid_answers.length+1+";"),e.push(t.expected_answer+";"),e.push(t.given_answer+";"),e.push((t.given_answer==t.expected_answer)+";"),e.push(t.required_milliseconds+";"),t.invalid_answers.forEach((t=>e.push(t[0]+";"+t[1]+";"))),e.push("\n")}return e}}class k extends n{constructor(e,t,r){super(e,r,t[0],t[t.length-1]),this.current_page_number=-1,this.pages=t,this.create_automata()}set_page_index(e){this.current_page_number=e,this.empty_screen_and_show_instructions(this.pages[this.current_page_number]),this.output_writer().print_string_to_state(this.forwarder_name),this.output_writer().print_string_to_page_number("Page "+(this.current_page_number+1)+" / "+this.pages.length);let t="<hr>";e>0&&(t+="[&#8592] = previous page"),e<this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[&#8594] = next page"),e==this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[Enter] = Finish"),this.output_writer().print_html_on_stage(t)}set_active(){super.set_active()}show_intro(){this.set_page_index(0)}show_outro(){}automata_configurator(){return new s([0,1],0,(()=>{}),this.transitions(),[1])}transitions(){return[p(0).to(0).on("ArrowRight").if((e=>this.current_page_number<this.pages.length-1)).do((e=>{this.set_page_index(++this.current_page_number)})),p(0).to(0).on("ArrowLeft").if((e=>this.current_page_number>0)).do((e=>{this.set_page_index(--this.current_page_number)})),p(0).to(1).on("Enter").if((e=>this.current_page_number>=this.pages.length-1)).do((e=>{}))]}}class B extends t{constructor(e){super("Default Sequential Forwarder Forwader"),this.current_forwarder_index=0,this.forwarders=e;for(let t of e)t.automata.add_finish_action((()=>this.automata.input("switch to next state")));var t,n,i;this.automata=(t=[0,1],n=()=>{},i=[p(0).to(0).on("switch to next state").if((()=>this.current_forwarder_index<this.forwarders.length-1)).do((()=>{this.current_forwarder_index++,this.current_forwarder().set_active()})),p(0).to(1).on("switch to next state").if((()=>this.current_forwarder_index==this.forwarders.length-1)).do((()=>{}))],new r(new s(t,0,n,i,[1]))),this.automata.initialize()}input(e){this.forwarders[this.current_forwarder_index].input(e)}input_sequence(e){for(let t of e)this.input(t)}current_forwarder(){return this.forwarders[this.current_forwarder_index]}set_active(){super.set_active(),this.current_forwarder().set_active()}}class L extends n{show_intro(){this.empty_screen_and_show_instructions(this.pre_run_instructions),this.output_writer().print_experiment_name(this.forwarder_name)}show_outro(){this.empty_screen_and_show_instructions(this.post_run_instructions)}automata_configurator(){return new s([0,1,3,4,5],0,(()=>{}),this.transitions(),[5])}current_task(){return this.experiment_definition.tasks[this.current_page_index]}constructor(e,t,r,n,s){super(e,s,t,r),this.current_page_index=-1,this.experiment_definition=n}automata_configuration(){return new s([0,1,3,4,5],0,(()=>{}),this.transitions(),[5])}transitions(){return[p(0).to(1).on("Enter").do((e=>{console.log("Dummy Exp: Enter On Exp"),this.set_experiment_index(0),this.measurement.start_measurement(this.current_task())})),p(0).to(4).on("Delete").do((e=>{console.log("Dummy Exp: Delete On Exp"),this.show_outro()})),p(1).to(4).on("?+Control").if((e=>!0)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),p(1).to(3).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index<this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task())})),p(1).to(1).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&!this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),p(1).to(2).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),p(2).to(1).on("Enter").if((e=>this.measurement.penalty_is_over())).do((e=>{this.measurement.start_measurement(this.current_task())})),p(3).to(1).on("Enter").if((e=>this.current_page_index<this.experiment_definition.tasks.length-1)).do((e=>{this.inc_current_experiment(),this.measurement.start_measurement(this.current_task())})),p(1).to(4).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index==this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),p(4).to(5).on("Enter").do((e=>{}))]}set_experiment_index(e){this.current_page_index=e,this.output_writer().print_string_to_page_number("Task "+(this.current_page_index+1)+" / "+this.experiment_definition.tasks.length)}inc_current_experiment(){this.set_experiment_index(++this.current_page_index)}init_experiment(){this.experiment_definition.init_experiment(!1)}}class M extends L{constructor(e,t,r,n){super("Training",(()=>{e(),n.output_writer().print_html_on_stage("<hr>Press [Enter] to start training.")}),(()=>{n.output_writer().print_html_on_stage("You finished the training phase.<hr>"+(t.can_be_repeated?"Please, press [Enter] to run again a training session.<br>":"")+"Please, press [E] (capital E, i.e., [shift] + [e]) to enter the experiment phase.")}),r,n),this.training_configuration=t}print_cancel_text(){this.output_writer().clear_stage(),this.output_writer().print_string_to_page_number("Cancelled"),this.output_writer().print_html_on_stage("You cancelled this training session.<hr>Press [Enter] if you want to start another training session.<br>Press [E] (capital E!) if you want to start with the experiment.")}automata_configurator(){return new s([0,1,2,3,4,5,6],0,(()=>{}),this.transitions(),[5])}transitions(){let e=super.transitions(),t=[p(0).to(6).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),p(1).to(6).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),p(3).to(6).on("Escape").if((()=>this.current_page_index<this.experiment_definition.tasks.length-1&&this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),p(6).to(5).on("E").do((()=>{})),p(6).to(0).on("Enter").do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),p(4).to(0).on("Enter").if((()=>this.training_configuration.can_be_repeated)).do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),p(4).to(5).on("E").do((e=>{}))];return e.splice(e.length-1),t.forEach((t=>e.push(t))),e}input(e){if(!["a","b","c"].includes(e)&&0!=this.automata.current_state)return super.input(e);super.input(e)}init_experiment(){this.training_configuration.init_experiment(this.experiment_definition)}}class R extends L{constructor(e,t,r){super("Main Experiment",(()=>{e(),r.output_writer().print_html_on_stage("<hr>Press [Enter] to start the experiment.")}),(()=>{r.output_writer().print_html_on_stage("You finished the experiment phase.<hr>Please, press [Enter] to go to the next phase.<br>")}),t,r)}}class N extends O{create_code_all_experiment_automatas(e){e.measurement.output_writer();let t=new k("Introduction",e.introduction_texts,e.measurement),r=new k("Finish",e.finish_texts,e.measurement);r.automata.add_finish_action((()=>e.finish_function(n.experiment_definition)));let n=new R(e.pre_run_experiment_output,this,e.measurement);x(e.seed),n.init_experiment();let s=this.clone(),i=new M(e.pre_run_training_output,e.training_configuration,s,e.measurement);i.init_experiment();let a=null;null!=e.post_questionnaire&&(a=new u(e.post_questionnaire,e.measurement));let o=[];return null!=t&&o.push(t),o.push(i),o.push(n),null!=a&&(o.push(a),n.experiment_definition.questionnaires.push(a)),o.push(r),new B(o)}clone(){return new N(this.template.experiment_name,this.is_training,this.treatments_combinator.clone(),this.template.variables,this.template.repetitions,this.measurement,this.template.task_creator)}}class ${constructor(e,t){this.variable=e,this.value=""+t}clone(){return new $(this.variable,this.value)}}function U(e,t,r){if(e.length>t.length)throw"Cannot loop both: first array has length: "+e.length+", but second has length "+t.length;let n=0;for(let s of e)r(s,t[n++])}class q{constructor(e){this.treatment_combination=[],this.treatment_combination=e}clone(){let e=new q([]);for(let t of this.treatment_combination)e.treatment_combination.push(t.clone());return e}}class z{constructor(e){this.can_be_cancelled=!0,this.can_be_repeated=!0,void 0!==e&&(null!=e.fixed_treatments&&(this.fixed_treatments=e.fixed_treatments),this.can_be_cancelled=e.can_be_cancelled,this.can_be_repeated=e.can_be_repeated)}init_experiment(e){if(e.tasks=[],null!=this.fixed_treatments)for(let t of this.fixed_treatments){let r=new q([]);U(e.all_independent_variables(),t,((e,t)=>{r.treatment_combination.push(new $(e,t))}));let n=new E(r,e,"");n.is_training=!0,e.experiment_definition_task_creator(n),e.tasks.push(n)}else e.init_experiment(!0)}}class C{constructor(e,t){this.treatments=[],this.name=e;for(let e of t)this.treatments.push(new $(this,e))}}function S(e,t,r){if(0==e.length)r(t);else{let n=e.shift();for(let s of n)t.push(s),S(e,t,r),t.pop();e.unshift(n)}}function A(e,t){S(e,[],t)}function I(e,t){let r=[];if(1==e){for(let e of t)r.push([e]);return r}for(let n=0;n<t.length;n++){let s=t.slice();s.splice(n,1);let i=I(e-1,s);for(let e of i)r.push([t[n],...e])}return r}class F{constructor(){this.independent_variables=[]}push_variable(e,t){this.independent_variables.push(new C(e,t))}print_to_array(e){for(let t of this.independent_variables)e.push(t.name+";")}create_treatment_combinations(){let e=[];return A(this.independent_variables.map((e=>e.treatments)),(t=>{e.push(new q([...t]))})),e}get_variable_named(e){for(let t of this.independent_variables)if(t.name===e)return t;throw"Unknown independent variable named: "+e}static from_layout(e){let t=new F;for(let r of e)t.push_variable(r.variable,r.treatments);return t}}class P extends m{print_experiment_name(e){this.get_html_element_by_id("STATE").innerHTML=e}clear_error(){let e=["STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_stage(){let e=["STAGE","STAGE_MSG","STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_state(){let e=["STATE","TASK"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}print_error_string_on_stage(e){this.get_html_element_by_id("STAGE_ERROR").innerHTML=e}get_html_element_by_id(e){return document.getElementById(e)}print_string_to_state(e){this.get_html_element_by_id("STATE").innerHTML=e}print_string_on_stage(e){this.print_html_on_stage("<p>"+e+"</p>")}ask_for_input(){let e=document.createElement("p"),t=document.createElement("label");t.setAttribute("type","text"),e.textContent="Answer: ",e.appendChild(t);let r=document.createElement("input");r.setAttribute("type","text"),r.setAttribute("class","input"),e.appendChild(r),r.id="INPUT",this.get_html_element_by_id("STAGE").appendChild(e),r.focus()}set_focus_on_input(){this.get_html_element_by_id("INPUT").focus()}print_string_to_page_number(e){this.get_html_element_by_id("TASK").innerHTML=e}get_given_answer(){return this.get_html_element_by_id("INPUT").value}print_on_input_response(e){this.get_html_element_by_id("INPUT").value=e}create_html_element_from_string(e){return(new DOMParser).parseFromString(e,"text/html").body}print_html_on_stage(e){this.get_html_element_by_id("STAGE").appendChild(this.create_html_element_from_string(e))}print_html_on_error(e){this.get_html_element_by_id("STAGE_ERROR").appendChild(this.create_html_element_from_string(e))}}function D(e){return"&nbsp;".repeat(e)}class J{equals(e){return this.constructor.name===e.constructor.name}}class j{constructor(e){this.arr=e}write(e){this.arr.push(e)}writeln(e){this.arr.push(e+"<br>")}write_rules(e,t){for(let r=0;r<3;r++)e.x_y_z[r].do_writer_on(this,t,r)}write_function_rule(e,t){}write_left_outer_rule(e,t){}write_right_outer_rule(e,t){}}class G extends j{constructor(e){super(e)}write_rules(e,t){this.write("<td colspan='3' style='border: 1px solid black;'>"),this.writeln("class feature extends LTerm {<br>"),this.writeln(D(2)+"LTerm t1 t2 t3;<br>"),this.writeln(D(2)+"Type type_of(Environment e) {"),e.x_y_z[0].do_writer_on(this,t,0),e.x_y_z[1].do_writer_on(this,t,1),e.x_y_z[2].do_writer_on(this,t,2),this.writeln(D(4)+"if(ft.left.equals(type_left) && ft.right.equals(type_right)){"),this.writeln(D(6)+"return BOOL;"),this.writeln(D(4)+"}"),this.writeln(D(2)+"}"),this.writeln("}"),this.write("</td>")}write_function_rule(e,t){this.writeln(D(4)+"Function_Type ft = (Function_Type) t"+(t+1)+".type_of(e);")}write_left_outer_rule(e,t){this.writeln(D(4)+"Type type_left = t"+(t+1)+".type_of(e);")}write_right_outer_rule(e,t){this.writeln(D(4)+"Type type_right = t"+(t+1)+".type_of(e);")}}class H extends j{constructor(e){super(e)}write_rules(e,t){this.arr.push("$"),e.x_y_z[0].do_writer_on(this,t,0),this.arr.push("$<br><br><br>$"),e.x_y_z[1].do_writer_on(this,t,1),this.arr.push("$<br><br><br>$"),e.x_y_z[2].do_writer_on(this,t,2),this.arr.push("$<br><br><br>")}write_function_rule(e,t){let r=e,n="BOOL"==e?"NUMBER":"BOOL";this.writeln("\\mathrm{exp}_{\\mathrm{"+(t+1)+"}}:\\,\\mathrm{"+r+"}\\rightarrow\\mathrm{"+n+"}")}write_left_outer_rule(e,t){this.write("\\mathrm{exp}_{\\mathrm{"+(t+1)+"}}:\\mathrm{"+e+"}")}write_right_outer_rule(e,t){this.write("\\mathrm{exp}_{\\mathrm{"+(t+1)+"}}:\\mathrm{"+("BOOL"==e?"NUMBER":"BOOL")+"}")}}class Y extends j{constructor(e){super(e)}write_rules(e,t){this.write("$\\Large{\\frac{"),e.x_y_z[0].do_writer_on(this,t,0),this.write("\\,\\,\\,\\,\\,\\,\\,\\,\\,"),e.x_y_z[1].do_writer_on(this,t,1),this.write("\\,\\,\\,\\,\\,\\,\\,\\,\\,"),e.x_y_z[2].do_writer_on(this,t,2),this.write("}{\\mathrm{E}\\,\\vdash\\,\\mathrm{feature(\\,\\mathrm{t}_{\\mathrm{1}}\\,\\,\\mathrm{t}_{\\mathrm{2}}\\,\\,\\mathrm{t}_{\\mathrm{3}}\\,)}:\\,\\mathrm{BOOL}}}$")}write_function_rule(e,t){this.writeln("\\mathrm{E}\\,\\vdash\\,\\mathrm{t}_{\\mathrm{"+(t+1)+"}}:\\,\\mathrm{T}_{\\mathrm{left}}\\rightarrow\\mathrm{T}_{\\mathrm{right}}")}write_left_outer_rule(e,t){this.write("\\mathrm{E}\\,\\vdash\\,\\mathrm{t}_{\\mathrm{"+(t+1)+"}}:\\,\\mathrm{T}_{\\mathrm{left}}")}write_right_outer_rule(e,t){this.write("\\mathrm{E}\\,\\vdash\\,\\mathrm{t}_{\\mathrm{"+(t+1)+"}}:\\,\\mathrm{T}_{\\mathrm{right}}")}}class K extends j{constructor(e){super(e)}write_code(e,t){this.write("<td style='border: 1px solid black;'>"),this.writeln("class exp_"+(e+1)+" extends LTerm {"),this.writeln("&nbsp;&nbsp;Type type_of(Environment e) {&nbsp;&nbsp;"),this.writeln(t),this.writeln("&nbsp;&nbsp;}"),this.writeln("}"),this.write("</td>")}write_function_rule(e,t){this.write_code(t,"&nbsp;&nbsp;&nbsp;&nbsp;return new Function_Type("+e+", "+("BOOL"==e?"NUMBER":"BOOL")+");&nbsp;&nbsp;")}write_outer_rule(e,t){this.write_code(t,"&nbsp;&nbsp;&nbsp;&nbsp;return "+e+";")}write_left_outer_rule(e,t){this.write_outer_rule(e,t)}write_right_outer_rule(e,t){this.write_outer_rule("BOOL"==e?"NUMBER":"BOOL",t)}}class W extends J{type_name(e){return e.first_type_in_function+" -> "+e.second_type_in_function()}do_writer_on(e,t,r){e.write_function_rule(t,r)}}class Q extends J{type_name(e){return e.first_type_in_function}do_writer_on(e,t,r){e.write_left_outer_rule(t,r)}}class V extends J{type_name(e){return e.second_type_in_function()}do_writer_on(e,t,r){e.write_right_outer_rule(t,r)}}class X{constructor(e){this.x_y_z=e}apply_writer(e,t){e.write_rules(this,t)}}class Z{constructor(e,t,r,n){this.term_typing_output_ordering=e,this.first_type_in_function=t,this.feature_term=r,this.typing_rules=n}typing_rules_as_code_html_string(){let e=new K([]);e.arr.push("<table style='border: 1px solid black;'>"),e.arr.push("<tr style='vertical-align:top'>"),this.feature_term.apply_writer(e,this.first_type_in_function),e.arr.push("</tr>"),e.arr.push('<tr style="vertical-align:top">');let t=new G(e.arr);return this.typing_rules.apply_writer(t,this.first_type_in_function),e.arr.push("</tr>"),e.arr.push('<tr style="vertical-align:top">'),e.arr.push("<td colspan='3' style='border: 1px solid black;'>"),e.arr.push("feature(  exp_"+(this.term_typing_output_ordering[0]+1)+"  exp_"+(this.term_typing_output_ordering[1]+1)+"  exp_"+(this.term_typing_output_ordering[2]+1)+" )<br>"),e.arr.push("</td>"),e.arr.push("</tr>"),e.arr.push("</table>"),e.arr.join("")}inference_rules_as_html_string(){let e=new H([]);this.feature_term.apply_writer(e,this.first_type_in_function);let t=new Y(e.arr);return this.typing_rules.apply_writer(t,this.first_type_in_function),t.arr.push("<br><br>$<br><br>\\mathrm{feature(  exp_"+(this.term_typing_output_ordering[0]+1)+"\\,\\,  exp_"+(this.term_typing_output_ordering[1]+1)+"\\,\\,  exp_"+(this.term_typing_output_ordering[2]+1)+" )}$<br>"),t.arr.join("")}error_position(){let e=[];for(let t=0;t<=2;t++)e.push(this.type_string_of_term_no(t));for(let e=0;e<=2;e++)if(this.typing_rules.x_y_z[e]instanceof W&&!(this.feature_term.x_y_z[this.term_typing_output_ordering[e]]instanceof W))return e+1;for(let e=0;e<=2;e++)if(this.typing_rules.x_y_z[e]instanceof Q&&this.feature_term.x_y_z[this.term_typing_output_ordering[e]]instanceof V||this.typing_rules.x_y_z[e]instanceof V&&this.feature_term.x_y_z[this.term_typing_output_ordering[e]]instanceof Q)for(let t=0;t<=2;t++)if(this.typing_rules.x_y_z[t]instanceof W)return t>e?t+1:e+1;return 0}type_string_of_term_no(e){let t=this.feature_term.x_y_z[this.term_typing_output_ordering[e]];if(t instanceof Q)return this.first_type_in_function;if(t instanceof V)return"BOOL"===this.first_type_in_function?"NUMBER":"BOOL";if(t instanceof W)return this.first_type_in_function+"->"+("BOOL"===this.first_type_in_function?"NUMBER":"BOOL");throw"Something is strange"}second_type_in_function(){return"BOOL"===this.first_type_in_function?"NUMBER":"BOOL"}ordered_terms(){return[this.feature_term.x_y_z[this.term_typing_output_ordering[0]],this.feature_term.x_y_z[this.term_typing_output_ordering[1]],this.feature_term.x_y_z[this.term_typing_output_ordering[2]]]}response_text(){let e="";return e=e+"The correct response is: "+this.error_position()+"\n\n",e}debug_help(e){5==e.task_number_in_execution&&console.log(),this.error_position()}}x("42");let ee=function(){let e,t=[new W,new Q,new V];e=I(3,[0,1,2]);let r={1:[],2:[],3:[],0:[]};return A([e,["BOOL","NUMBER"],e,e],(e=>{let n=e[3],s=new X([t[n[0]],t[n[1]],t[n[2]]]),i=e[2],a=new X([t[i[0]],t[i[1]],t[i[2]]]),o=e[0],_=e[1],p=new Z(o,_,a,s);r[""+p.error_position()].push(p)})),r}();!function(){let e=new P,t={experiment_name:"TypeSystems-ConstructorCalls-Hierarchical",seed:"42",introduction_pages:[()=>i.print_string_on_stage("Thank you for participating in the experiment. This experiment compares the possible effect of different\nnotations on readability in the context of programming language design.<br<br><p>Before doing the experiment, please start your browser in full-screen mode (probably by pressing <code>[F11]</code>).</p><p>In the experiment, a typing rule for the programming language construct called <code>feature</code> is given. The rule consists of three types: one function type and two types that refer to the left or right side of that function type. The typing rules are either described using an inference notation or using Java.<br><br>The next page introduces the inference language."),()=>{i.print_string_on_stage("There are simple rules that say that a given literal <code>myterm</code> has the type <code>BOOL</code>, that a term <code>otherterm</code> has the type <code>NUMBER</code>, or that <code>somethingelse</code> is a function that maps a <code>NUMBER</code> to a <code>BOOL</code>. They look as follows:<br><br>$\\scriptsize{\\mathrm{myterm:BOOL}}$<br>$\\scriptsize{\\mathrm{otherterm:NUMBER}}$<br>$\\scriptsize{\\mathrm{somethingelse:NUMBER}\\rightarrow\\mathrm{BOOL}}$<br><br>The left hand side of a rule describes the terminal (such as <code>myterm</code>, the right hand side describes the type (such as <code>BOOL</code>).<br><br>Type systems describe rules that are slightly more complex than the definition of types for literals. In such rules, some context is required that is represented by an environment variable which is traditionally called in type systems <code>E</code>. Furthermore, there is an operator $\\vdash$ that described that some type relationship can be derived from an environment (actually, in the present study, we do not do anything with the environment - we just mention it for reasons of completeness). For example, the rule $\\scriptsize{\\mathrm{E}\\,\\vdash\\,\\mathrm{t}:\\mathrm{T}}$ describes that it can be inferred from an environment that the term <code>t</code> has the type <code>T</code>. Additionally, there are type rules where some type relationship depends on some preconditions, where the preconditions are above a fractional line and the actual rule is below the fractional line. For example the rule<br><br>$\\frac{\\mathrm{E}\\,\\vdash\\,\\mathrm{t1}:\\,\\mathrm{T1}\\,\\,\\,\\mathrm{E}\\,\\vdash\\,\\mathrm{t2}:\\mathrm{\\,T2}}{\\mathrm{E}\\,\\vdash\\,\\mathrm{newconstruct(t1\\,\\,t2)}:\\,\\mathrm{T1}}$<br><br>says that the type of the new language construct <code>newconstruct</code>, that requires two further terms t1 and t2, has the same type as the first term. Hence, if we combine this with the typing rule above, a term such as<br><br>$\\scriptsize{\\mathrm{newconstruct(\\,myterm\\,\\, otherterm) }}$<br><br>has a valid type, and that type is <code>Bool</code> (because the first parameter has the type <code>Bool</code>, while the second parameter has the type <code>Number</code>): the type of <code>newconstruct</code> is the same as the type of the first parameter. In principle, that's all you need to know for the experiment.<br><br>Let's see on the next page how such type systems can be represented using ordinary Java code."),MathJax.typeset()},()=>{i.print_string_on_stage("We assume in the given experiment, that (in a language implementation) each language construct is defined in it's own class (extending some root class LTerm) and that this class has a method <code>Type type_of(Environment e) {...}</code> that returns the type of the given language construct. For the type <code>BOOL</code> and <code>NUMBER</code> we assume the existence of corresponding constants.<br><br>Likewise to the previous examples, the following code says that a given literal <code>myterm</code> has the type <code>BOOL</code>, that a term <code>otherterm</code> has the type <code>NUMBER</code>, or that <code>somethingelse</code> is a function that maps a <code>NUMBER</code> to a <code>BOOL</code>.<br><br><table style='border: 1px solid black;'><tr style='vertical-align:top'><td style='border: 1px solid black;'><code>class myterm extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return BOOL;<br>&nbsp;&nbsp;}<br>}</code></td><td style='border: 1px solid black;'><code>class otherterm extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return NUMBER;<br>&nbsp;&nbsp;}<br>}</code></td><td style='border: 1px solid black;'><code>class somethingelse extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return new Function_Type(NUMBER, BOOL);<br>&nbsp;&nbsp;}<br>}</code></td></tr></table><br><br>In order to implement a rule that also has some preconditions, we ask each term for its type (that we might have to cast) and check, whether the types in the preconditions hold. For example, the following code checks for the language construct <code>newconstruct</code> the type of the terms t1 and t2 and then returns t1's type (i.e., the return type is the same as the one for t1).<br><br><table style='border: 1px solid black;'><tr style='vertical-align:top'><td style='border: 1px solid black;'><code>class newconstruct extends LTerm {<br>&nbsp;&nbsp;LTerm t1, t2;<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;Type t1_type = t1.type_of(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;Type t2_type = t2.type_of(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;return left_type;<br>&nbsp;&nbsp;}<br>}</code></td></tr></table><br><br>Before starting the experiment, let's see some examples on the next pages."),MathJax.typeset()},()=>{i.print_string_on_stage("The experiment asks, in what position in a given expression (with given type rules) a type error appears - and possibly there is no type error. In the experiment, there are two different literals (that have the type <code>BOOL</code> or <code>NUMBER</code>) and one additional literal that has a function type (either <code>BOOL->NUMBER</code> or <code>NUMBER->BOOL</code>).One expression for the language construct <code>feature</code> (with three literals as parameters) is given. The task is to answer, at what parameter a type errorsappears in the expression. Possible answers are: 0 (no error), 1 (error in the first parameter), 2, and 3. You give an answer by clicking [0], [1], [2], or [3].<br><br>Let's see the following code that could appear in the experiment.<table style='border: 1px solid black;'><tr style='vertical-align:top'><td style='border: 1px solid black;'><code>class exp_1 extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return BOOL;<br>&nbsp;&nbsp;}<br>}</code></td><td style='border: 1px solid black;'><code>class exp_2 extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return NUMBER;<br>&nbsp;&nbsp;}<br>}</code></td><td style='border: 1px solid black;'><code>class exp_3 extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return new Function_Type(NUMBER, BOOL);<br>&nbsp;&nbsp;}<br>}</code></td><tr style='vertical-align:top'><td colspan='3' style='border: 1px solid black;'><code>class feature extends LTerm {<br>&nbsp;&nbsp;LTerm t1, t2;<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;Type type_left = t1.type_of(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;Function_Type ft = (FunctionType) t2.type_of(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;Type type_right = t3.type_of(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;if(ft.left.equals(type_left) && ft.right.equals(type_right) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return BOOL;<br>&nbsp;&nbsp;&nbsp;&nbsp;throw RuntimeException(\"Invalid Type\");<br>&nbsp;&nbsp;}<br>}</code></td></tr><tr style='vertical-align:top'><td colspan='3' style='border: 1px solid black;'><code>feature(exp_2 exp_1 exp_3)</code></td></tr></table><br>The first term <code>exp_2</code> has the type <code>NUMBER</code> (which does not lead to an error),<br>The second term <code>exp_1</code> has the type <code>BOOL</code>, however, it must be a function type. I.e., there a type error occurs (and the right answer is 2).<br>Let's take a look at another example."),MathJax.typeset()},()=>{i.print_string_on_stage("<table style='border: 1px solid black;'><tr style='vertical-align:top'><td style='border: 1px solid black;'><code>class exp_1 extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return BOOL;<br>&nbsp;&nbsp;}<br>}</code></td><td style='border: 1px solid black;'><code>class exp_2 extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return new Function_Type(NUMBER, BOOL);<br>&nbsp;&nbsp;}<br>}</code></td><td style='border: 1px solid black;'><code>class exp_3 extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return NUMBER;<br>&nbsp;&nbsp;}<br>}</code></td><tr style='vertical-align:top'><td colspan='3' style='border: 1px solid black;'><code>class feature extends LTerm {<br>&nbsp;&nbsp;LTerm t1, t2;<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;Function_Type ft = (FunctionType) t1.type_of(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;Type type_left = t1.type_of(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;Type type_right = t3.type_of(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;if(ft.left.equals(type_left) && ft.right.equals(type_right) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return BOOL;<br>&nbsp;&nbsp;&nbsp;&nbsp;throw RuntimeException(\"Invalid Type\");<br>&nbsp;&nbsp;}<br>}</code></td></tr><tr style='vertical-align:top'><td colspan='3' style='border: 1px solid black;'><code>feature(exp_2 exp_1 exp_3)</code></td></tr></table><br>The first term <code>exp_2</code> has the type <code>NUMBER->BOOL</code> (which is fine),<br>The second term <code>exp_1</code> has the type <code>BOOL</code>, but it is assumed to have the left type of the function type (which is <code>NUMBER</code>), hence, exp_1 leads to an error (and the right answer is 2).<br>Let's take a look at another example."),MathJax.typeset()},()=>{i.print_string_on_stage("<table style='border: 1px solid black;'><tr style='vertical-align:top'><td style='border: 1px solid black;'><code>class exp_1 extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return new Function_Type(BOOL, NUMBER);<br>&nbsp;&nbsp;}<br>}</code></td><td style='border: 1px solid black;'><code>class exp_2 extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return NUMBER;<br>&nbsp;&nbsp;}<br>}</code></td><td style='border: 1px solid black;'><code>class exp_3 extends LTerm {<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return BOOL;<br>&nbsp;&nbsp;}<br>}</code></td><tr style='vertical-align:top'><td colspan='3' style='border: 1px solid black;'><code>class feature extends LTerm {<br>&nbsp;&nbsp;LTerm t1, t2;<br>&nbsp;&nbsp;Type type_of(Environment e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;Type type_right = t1.type_of(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;Type type_left = t2.type_of(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;Function_Type ft = (FunctionType) t3.type_of(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;if(ft.left.equals(type_left) && ft.right.equals(type_right) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return BOOL;<br>&nbsp;&nbsp;&nbsp;&nbsp;throw RuntimeException(\"Invalid Type\");<br>&nbsp;&nbsp;}<br>}</code></td></tr><tr style='vertical-align:top'><td colspan='3' style='border: 1px solid black;'><code>feature(exp_3 exp_2 exp_1 )</code></td></tr></table><br>The first term <code>exp_3</code> has the type <code>BOOL</code> (which is fine),<br>The second term <code>exp_2</code> has the type <code>NUMBER</code> (which is fine as well),<br>The third term <code>exp_1</code> has the type <code>BOOL->NUMBER</code> but it assumes that the first parameter has the right type of the function. Hence, it causes an error and the right answer is 3.<br>Let's see the same examples now with type inference rules."),MathJax.typeset()},()=>{i.print_string_on_stage("$\\small{ \\mathrm{ exp_1:\\,BOOL}}$<br><br>$\\small{ \\mathrm{ exp_2:\\,NUMBER}}$<br><br>$\\small{ \\mathrm{ exp_3: \\, NUMBER \\rightarrow BOOL}}$<br><br>$\\large{\\frac{\\mathrm{E\\,\\vdash\\,t_1:\\,T_{left}}\\,\\,\\,\\mathrm{E\\,\\vdash\\,t_2:\\,T_{left}\\rightarrow\\,T_{right}}\\,\\,\\,\\mathrm{E\\,\\vdash\\,t_3:\\,T_{right}}}{\\mathrm{E}\\,\\vdash\\,\\mathrm{feature(t_1\\,\\,t_2\\,\\,t_3):\\,BOOL}}}$<br><br>$\\small{ \\mathrm{ feature( \\,exp_2 \\,\\,\\, exp_1 \\,\\,\\, exp_3 \\, )}}$<br><br>The first term $\\scriptsize{\\mathrm{exp_2}}$ has the type <code>NUMBER</code> (which does not lead to an error),<br>The second term $\\scriptsize{\\mathrm{exp_1}}$ has the type <code>BOOL</code>, however, it must be a function type. I.e., there a type error occurs (and the right answer is 2).<br><br>Let's take a look at another example."),MathJax.typeset()},()=>{i.print_string_on_stage("$\\small{ \\mathrm{ exp_1:\\,BOOL}}$<br><br>$\\small{ \\mathrm{ exp_2:\\,NUMBER \\rightarrow BOOL}}$<br><br>$\\small{ \\mathrm{ exp_3: \\, NUMBER}}$<br><br>$\\large{\\frac{\\mathrm{E\\,\\vdash\\,t_1:\\,T_{left}\\rightarrow\\,T_{right}}\\,\\,\\,\\mathrm{E\\,\\vdash\\,t_2:\\,T_{left}}\\,\\,\\,\\mathrm{E\\,\\vdash\\,t_3:\\,T_{right}}}{\\mathrm{E}\\,\\vdash\\,\\mathrm{feature(t_1\\,\\,t_2\\,\\,t_3):\\,BOOL}}}$<br><br>$\\small{ \\mathrm{ feature( \\,exp_2 \\,\\,\\, exp_1 \\,\\,\\, exp_3 \\, )}}$<br><br>The first term <code>exp_2</code> has the type <code>NUMBER->BOOL</code> (which is fine),<br>The second term <code>exp_1</code> has the type <code>BOOL</code>, but it is assumed to have the left type of the function type (which is <code>NUMBER</code>), hence, exp_1 leads to an error (and the right answer is 2).<br><br></br>Let's take a look at the final example."),MathJax.typeset()},()=>{i.print_string_on_stage("$\\small{ \\mathrm{ exp_1:\\,BOOL \\rightarrow NUMBER}}$<br><br>$\\small{ \\mathrm{ exp_2:\\,NUMBER }}$<br><br>$\\small{ \\mathrm{ exp_3: \\, BOOL}}$<br><br>$\\large{\\frac{\\mathrm{E\\,\\vdash\\,t_1:\\,T_{right}}\\,\\,\\,\\mathrm{E\\,\\vdash\\,t_2:\\,T_{left}}\\,\\,\\,\\mathrm{E\\,\\vdash\\,t_3:\\,T_{left}\\rightarrow\\,T_{right}}}{\\mathrm{E}\\,\\vdash\\,\\mathrm{feature(t_1\\,\\,t_2\\,\\,t_3):\\,BOOL}}}$<br><br>$\\small{ \\mathrm{ feature( \\,exp_3 \\,\\,\\, exp_2 \\,\\,\\, exp_1 \\, )}}$<br><br>The first term <code>exp_3</code> has the type <code>BOOL</code> (which is fine),<br>The second term <code>exp_2</code> has the type <code>NUMBER</code> (which is fine as well),<br>The third term <code>exp_1</code> has the type <code>BOOL->NUMBER</code> but it assumes that the first parameter has the right type of the function (which is not the case, because the first parameter has the type <code>NUMBER</code>, not <code>BOOL</code>. Hence, it causes an error and the right answer is 3.<br><br>Ok, you are now ready to start with the training phase (that you enter by pressing <code>[Enter]</code>)."),MathJax.typeset()}],pre_run_training_instructions:(i=e).string_page_command("You entered the training phase. In the training phase, you get a random set of tasks, either as Java code or as inference rules.<br><br>Please, run the training until you feel familiar with the experiment. This could be - for example - the case when you correctly answered the tasks 10 times.<br><br>You can interrupt the training phase by pressing [ESC]. Otherwise, the training phase will be repeated.<br><br><b>Note that you can see that you are in the training phase (top, right of the screen says <code>Training</code>)</b><br><br>Note that you give a response to a question by pressing [0], [1], [2], or [3]."),pre_run_experiment_instructions:i.string_page_command(i.convert_string_to_html_string("You entered the experiment phase.")),post_questionnaire:[d("Age","What's your age??",["younger than 18","between 18 and (excluding) 25","between 25 and (excluding) 30","between 30 and (excluding) 35","between 35 and (excluding) 40","40 or older"]),d("Status","What is your current working status?",["Undergraduate student (BSc not yet finished)","Graduate student (at least BSc finished)","PhD student","Professional software developer","Teacher","Other"]),d("Studies","In case you study, what's your subject?",["I do not study","Computer science","computer science related (such as information systems, aka WiInf)","something else in natural sciences","something else"]),d("YearsOfExperience","How many years of experience do you have in software industry?",["none","less than or equal 1 year","more than 1 year, but less than or equal 3 years","more than 3 years, but less than or equal 5 year","more than 5 years"]),d("impression","What statement describes                        best your impression \n of the experiment?",["I do not think that there was a difference between the notations","The inference notation made it slightly easier for me","Java made it slightly easier for me","The inference notation made it much easier for me","Java made it much easier for me"])],finish_pages:[i.string_page_command("<p>Almost done. Next, the experiment data will be downloaded (after pressing [Enter]).<br><br>Please, send the downloaded file to the experimenter: <a href='mailto:stefan.hanenberg@uni-due.de'>stefan.hanenberg@uni-due.de</a></p><p>By sending that mail, you agree that your (anonymized) data will be used for scientific analyses where your data (together with others in an anonymized way) will be published.<br><br>I.e., you agree with the information sheet, see <a href='https://github.com/shanenbe/Experiments/blob/main/2024_TypeSystems_ConstructorCall_Flat/Agreement.pdf' target='_blank'>here</a>. Note, that it it no longer necessary to send a signed version of the agreement to the experimenter.<br><br>After sending your email, you can close this window.</p><p>Many thanks for your participation.<br>-Stefan Hanenberg</p>")],layout:[{variable:"Notation",treatments:["inference","code"]},{variable:"Error_position",treatments:["0","1","2","3"]},{variable:"Terms_to_read",treatments:["computed variable"]}],repetitions:4,measurement:(o=["0","1","2","3"],a=e=>new y(o,e),e=>new f(a(e))),task_configuration:e=>{let t=(r=ee[""+e.treatment_value("Error_position")])[v(r.length)];var r;e.set_computed_variable_value("Terms_to_read",0==t.error_position()?"3":""+t.error_position()),e.treatment_combination.treatment_combination[2],e.do_print_task=()=>{let r;i.clear_stage(),r="inference"===e.treatment_value("Notation")?t.typing_rules_as_code_html_string():t.inference_rules_as_html_string(),i.clear_stage(),i.print_html_on_stage(r),MathJax.typeset()},e.expected_answer=""+t.error_position(),e.do_print_after_task_information=()=>{let r=t.response_text();i.print_error_string_on_stage(i.convert_string_to_html_string(r+"\n\nIn case, you feel not concentrated enough, make a short break.\n\nPress [Enter] to go on. ")),t.debug_help(e)}}},r=t.measurement(e),n=function(e){let t=F.from_layout(e.layout),r=new T(t,e.repetitions),n=new N(e.experiment_name,!1,r,t,e.repetitions,e.measurement,e.task_configuration),s=new z(e.training_configuration);return n.create_code_all_experiment_automatas({seed:e.seed,introduction_texts:e.introduction_pages,post_questionnaire:e.post_questionnaire,pre_run_training_output:e.pre_run_training_output,training_configuration:s,pre_run_experiment_output:e.pre_run_experiment_output,finish_texts:e.finish_pages,measurement:e.measurement,finish_function:e.finish_function})}({experiment_name:t.experiment_name,seed:t.seed,introduction_pages:t.introduction_pages,post_questionnaire:t.post_questionnaire,pre_run_training_output:t.pre_run_training_instructions,training_configuration:t.training_configuration,pre_run_experiment_output:t.pre_run_experiment_instructions,finish_pages:t.finish_pages,layout:t.layout,repetitions:t.repetitions,task_configuration:t.task_configuration,measurement:r,finish_function:e=>{document.removeEventListener("keydown",s),function(e,t){const r=new Blob(t,{type:"application/ssc"}),n=window.document.createElement("a");n.href=window.URL.createObjectURL(r),n.download="experimentdata.csv",document.body.appendChild(n),n.click(),document.body.removeChild(n)}(0,e.generate_csv_data())}}),s=e=>{let t=(s="","Alt"==(r=e).key&&r.ctrlKey?"Alt+Ctrl":"Control"==r.key&&r.altKey?"Ctrl+Alt":(s+=r.altKey?"+Alt":"",s+=r.ctrlKey?"+Control":"","Alt"==r.key?"Alt":""+r.key+s));var r,s;n.input(t)};var i,a,o;document.addEventListener("keydown",s,!1),n.set_active()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,