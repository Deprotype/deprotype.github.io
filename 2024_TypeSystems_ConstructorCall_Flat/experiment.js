(()=>{"use strict";function e(e,t){return-1!=e.indexOf(t)}!function(e,t,n){var s,r=256,i="random",a=n.pow(r,6),o=n.pow(2,52),p=2*o,l=r-1;function c(l,c,m){var f=[],g=_(h((c=1==c?{entropy:!0}:c||{}).entropy?[l,d(t)]:null==l?function(){try{s=require("crypto");var n=crypto.randomByte;return s&&(n=s.randomBytes)?n=n(r):(n=new Uint8Array(r),(e.crypto||e.msCrypto).getRandomValues(n)),d(n)}catch(n){var i=e.navigator,a=i&&i.plugins;return[+new Date,e,a,e.screen,d(t)]}}():l,3),f),w=new u(f),y=function(){for(var e=w.g(6),t=a,n=0;e<o;)e=(e+n)*r,t*=r,n=w.g(1);for(;e>=p;)e/=2,t/=2,n>>>=1;return(e+n)/t};return y.int32=function(){return 0|w.g(4)},y.quick=function(){return w.g(4)/4294967296},y.double=y,_(d(w.S),t),(c.pass||m||function(e,t,s,r){return r&&(r.S&&b(r,w),e.state=function(){return b(w,{})}),s?(n[i]=e,t):e})(y,g,"global"in c?c.global:this==n,c.state)}function u(e){var t,n=e.length,s=this,i=0,a=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);i<r;)o[i]=i++;for(i=0;i<r;i++)o[i]=o[a=l&a+e[i%n]+(t=o[i])],o[a]=t;(s.g=function(e){for(var t,n=0,i=s.i,a=s.j,o=s.S;e--;)t=o[i=l&i+1],n=n*r+o[l&(o[i]=o[a=l&a+t])+(o[a]=t)];return s.i=i,s.j=a,n})(r)}function b(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function h(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(h(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function _(e,t){for(var n,s=e+"",r=0;r<s.length;)t[l&r]=l&(n^=19*t[l&r])+s.charCodeAt(r++);return d(t)}function d(e){return String.fromCharCode.apply(0,e)}if(_(n.random(),t),"object"==typeof module&&module.exports){module.exports=c;try{s=require("crypto")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return c})):n["seed"+i]=c}("undefined"!=typeof self?self:void 0,[],Math);class t{constructor(e){this.set_active_function=()=>{},this.forwarder_name=e}input(e){this.automata.input(e)}add_activation_function(e){}set_active(){}}class n{constructor(e){this.current_state=-1,this.transitions=[],this.states=[],this.start_state=e.start,this.states=e.states;for(let e=0;e<this.states.length;e++)this.transitions.push([]);for(let t of e.transitions)this.transitions[t.from].push(t);this.init_function=e.init_function,this.end_states=e.end_states}input(e){let t=this.first_match(e),n=this.current_state;null!=t&&(this.current_state=t.next_state,t.action(n,e,this.current_state))}start(){this.current_state=this.start_state}first_match(e){for(let t=0;t<this.transitions[this.current_state].length;t++)if(this.transitions[this.current_state][t].accepts(e))return this.transitions[this.current_state][t];return null}initialize(){this.current_state=this.start_state,this.init_function()}add_finish_action(e){for(let t of this.transitions)for(let n of t)if(this.is_transition_to_end(n)){let t=n.action;n.action=(n,s,r)=>{t(n,s,r),e()}}}is_transition_to_end(t){return e(this.end_states,t.next_state)}add_action_to_transitions(e,t){for(let n of this.transitions)for(let s of n)if(e(s)){let e=s.action;s.action=(n,s,r)=>{e(n,s,r),t()}}}}class s extends t{constructor(e,t,n,s){super(e),this.pre_run_instructions=n,this.post_run_instructions=s,this.measurement=t,this.automata=this.create_automata(),this.automata.initialize()}set_active(){this.show_intro()}create_automata(){return new n(this.automata_configurator())}output_writer(){return this.measurement.output_writer()}show_intro(){this.output_writer().clear_all(),this.output_writer().print_string_to_state(this.forwarder_name),this.pre_run_instructions()}empty_screen_and_show_instructions(e){this.output_writer().clear_state(),this.output_writer().clear_stage(),null==e||null==e?console.log("something is strange"):e()}}class r{constructor(e,t,n,s,r){this.states=e,this.start=t,this.init_function=n,this.transitions=s,this.end_states=r}}class i{}class a extends i{constructor(e){super(),this.acceptor_function=e}accepts(e){return this.acceptor_function(e)}}class o{constructor(e,t,n,s){this.from=e,this.acceptor=t,this.next_state=n,this.action=s}is_valid_input(e){return this.acceptor.accepts(e)}accepts(e){return this.acceptor.accepts(e)}}function p(e,t,n,s){return new o(e,new a(t),n,((e,t,n)=>s(t)))}function l(t){return{to:n=>({on:e=>({if:s=>({do:r=>p(t,(t=>t==e&&s(t)),n,r)}),do:s=>p(t,(t=>t==e),n,s)}),on_any:s=>({if:r=>({do:i=>p(t,(t=>e(s,t)&&r(t)),n,i)}),do:r=>p(t,(t=>e(s,t)),n,r)})})}}class c{constructor(e,t){this.answer=null,this.variable_name=e,this.question_text=t}store_answer(){let e=document.getElementById(this.variable_name);this.answer=e.value}}class u extends c{constructor(e,t,n){super(e,t),this.alternatives=n}input_html(){let e='<select id="'+this.variable_name+'">';e+="<option disabled selected value> -- select an option -- </option>";let t=0;return this.alternatives.forEach((n=>e+="<option value="+t+++">"+n+"</option>")),e+="</select>",e}store_answer(){let e=document.getElementById(this.variable_name);this.answer=this.alternatives[e.value]}}class b extends s{constructor(e,t){super("Questionnaire",t,(()=>t.output_writer().print_html_on_stage("Please, answer the following questions.<br>")),(()=>t.output_writer().print_html_on_stage("Thank you for answering the questions."))),this.current_question_number=-1,this.questions=e}automata_configurator(){return new r([0,1,2,3,4],0,(()=>{}),this.transitions(),[4])}transitions(){return[l(0).to(4).on("DONE").if((e=>!0)).do((e=>{this.add_result_to_question(),console.log("dummy")}))]}show_intro(){super.show_intro();let e=this.create_questionnaire_html_string();this.output_writer().print_html_on_stage(e),document.getElementById("DONE").onclick=()=>this.input("DONE")}show_outro(){}create_questionnaire_html_string(){let e="<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>";return this.questions.forEach((t=>e+="<tr><td>"+t.question_text+"</td><td>"+t.input_html()+"</td></tr>")),e+="</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>",e}add_result_to_question(){for(let e of this.questions)e.store_answer()}}var h;function _(e){return new y(e)}function d(e,t,n){return new u(e,t,n)}!function(e){e[e.STRING=1]="STRING",e[e.NUMBER=2]="NUMBER"}(h||(h={}));class m{convert_string_to_html_string(e){return function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/\n/g,"<br/>").replace(/ /g,"&nbsp;")}(e)}string_page_command(e){return()=>this.print_string_on_stage(e)}stage_string_pages_commands(e){let t=[];for(let n of e)t.push(this.string_page_command(n));return t}get_given_answer(e){return e}print_on_input_response(e){}set_focus_on_input(){}clear_all(){this.clear_state(),this.clear_stage()}}class f{constructor(e){this.input_type=e}accepted_responses(){return this.input_type.accepted_responses()}given_answer(e){return this.input_type.given_answer(e)}start_measurement(e){this.start_time=(new Date).getTime().valueOf(),e.print_task()}stop_measurement(e,t){let n=(new Date).getTime().valueOf();t.given_answer=this.input_type.get_given_answer(e),t.required_milliseconds=n-this.start_time,t.do_print_after_task_information()}incorrect_response(e,t){let n=(new Date).getTime().valueOf(),s=t.experiment_definition.measurement.get_given_answer(e);t.invalid_answers.push([s,n-this.start_time]),t.do_print_error_message(this.input_type.get_given_answer(e))}output_writer(){return this.input_type.output_writer}get_given_answer(e){return this.input_type.get_given_answer(e)}demands_penalty(){return!1}penalty_is_over(){return!0}}class g extends f{constructor(e){super(e)}}class w{constructor(e){this.output_writer=e}print_input_request(){this.output_writer.ask_for_input()}get_given_answer(e){return this.output_writer.get_given_answer(e)}}class y extends w{constructor(e){super(e)}accepted_responses(){return["Enter"]}given_answer(e){}print_input_request(){this.output_writer.ask_for_input()}}const k=new class{constructor(){Math.seedrandom("1234567890")}new_random_integer(e){return Math.trunc(e*Math.random())}set_seed(e){Math.seedrandom(e)}};function v(e){k.set_seed(e)}function x(e){return k.new_random_integer(e)}function E(e){let t=[...e],n=[];for(;t.length>0;)n.push(t.splice(x(t.length),1)[0]);return n}function S(e){return e[x(e.length)]}class q{constructor(e,t,n){this.expected_answer="",this.given_answer="",this.required_milliseconds=null,this.task_number_in_execution=-1,this.invalid_answers=[],this.is_training=!1,this.do_print_task=()=>{throw new Error("Method not implemented.")},this.do_print_error_message=()=>{throw new Error("Method not implemented.")},this.accepts_answer_function=e=>!0,this.do_print_after_task_information=()=>{throw new Error("Method not implemented.")},this.treatment_combination=e,this.experiment_definition=t}accepts_answer(e){let t=this.experiment_definition.measurement.get_given_answer(e);return this.accepts_answer_function(t)}next_task(){return this.task_number_in_execution<this.experiment_definition.tasks.length?this.experiment_definition.tasks[this.task_number_in_execution]:null}html_string_with_cmd(e,t){}html_node_with_cmd(e,t){}after_task_string_constructor(e){}print_task(){this.do_print_task(),this.print_input_request()}print_input_request(){this.experiment_definition.measurement.input_type.print_input_request()}treatment_value(e){for(let t of this.treatment_combination.treatment_combination)if(t.variable.name===e)return t.value;throw"Unknown treatment: "+e}}class T{constructor(e,t){this.variables=e,this.repetitions=t}clone(){return new T(this.variables,this.repetitions)}create_treatment_combinations(){let e=[];for(let t=0;t<this.repetitions;t++)e=e.concat(this.variables.create_treatment_combinations());return e}create_tasks(e){let t=[];for(let n of this.create_treatment_combinations()){let s=new q(n.clone(),e,"");e.experiment_definition_task_creator(s),s.is_training=e.is_training,t.push(s)}return E(t),t}get_variable_named(e){return this.variables.get_variable_named(e)}}class C{constructor(e,t,n,s,r,i,a){this.questionnaires=[],this.tasks=[],this.experiment_name=e,this.is_training=t,this.template={experiment_name:e,variables:s,repetitions:r,task_creator:a},this.treatments_combinator=n,this.variables=s,this.measurement=i,this.experiment_definition_task_creator=a}init_experiment(e){this.tasks=this.treatments_combinator.create_tasks(this)}all_independent_variables(){return this.variables.independent_variables}generate_csv_data(){let e=[];for(let t of this.questionnaires)for(let n of t.questions)e.push('"'+n.variable_name+'";');this.variables.print_to_array(e),e.push("number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\n");for(let t of this.tasks){for(let t of this.questionnaires)for(let n of t.questions)e.push('"'+n.answer+'";');for(let n of t.treatment_combination.treatment_combination)e.push(n.value+";");e.push(t.invalid_answers.length+1+";"),e.push(t.expected_answer+";"),e.push(t.given_answer+";"),e.push((t.given_answer==t.expected_answer)+";"),e.push(t.required_milliseconds+";"),t.invalid_answers.forEach((t=>e.push(t[0]+";"+t[1]+";"))),e.push("\n")}return e}}class A extends s{constructor(e,t,n){super(e,n,t[0],t[t.length-1]),this.current_page_number=-1,this.pages=t,this.create_automata()}set_page_index(e){this.current_page_number=e,this.empty_screen_and_show_instructions(this.pages[this.current_page_number]),this.output_writer().print_string_to_state(this.forwarder_name),this.output_writer().print_string_to_page_number("Page "+(this.current_page_number+1)+" / "+this.pages.length);let t="<hr>";e>0&&(t+="[&#8592] = previous page"),e<this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[&#8594] = next page"),e==this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[Enter] = Finish"),this.output_writer().print_html_on_stage(t)}set_active(){super.set_active()}show_intro(){this.set_page_index(0)}show_outro(){}automata_configurator(){return new r([0,1],0,(()=>{}),this.transitions(),[1])}transitions(){return[l(0).to(0).on("ArrowRight").if((e=>this.current_page_number<this.pages.length-1)).do((e=>{this.set_page_index(++this.current_page_number)})),l(0).to(0).on("ArrowLeft").if((e=>this.current_page_number>0)).do((e=>{this.set_page_index(--this.current_page_number)})),l(0).to(1).on("Enter").if((e=>this.current_page_number>=this.pages.length-1)).do((e=>{}))]}}class R extends t{constructor(e){super("Default Sequential Forwarder Forwader"),this.current_forwarder_index=0,this.forwarders=e;for(let t of e)t.automata.add_finish_action((()=>this.automata.input("switch to next state")));var t,s,i;this.automata=(t=[0,1],s=()=>{},i=[l(0).to(0).on("switch to next state").if((()=>this.current_forwarder_index<this.forwarders.length-1)).do((()=>{this.current_forwarder_index++,this.current_forwarder().set_active()})),l(0).to(1).on("switch to next state").if((()=>this.current_forwarder_index==this.forwarders.length-1)).do((()=>{}))],new n(new r(t,0,s,i,[1]))),this.automata.initialize()}input(e){this.forwarders[this.current_forwarder_index].input(e)}input_sequence(e){for(let t of e)this.input(t)}current_forwarder(){return this.forwarders[this.current_forwarder_index]}set_active(){super.set_active(),this.current_forwarder().set_active()}}class D extends s{show_intro(){this.empty_screen_and_show_instructions(this.pre_run_instructions),this.output_writer().print_experiment_name(this.forwarder_name)}show_outro(){this.empty_screen_and_show_instructions(this.post_run_instructions)}automata_configurator(){return new r([0,1,3,4,5],0,(()=>{}),this.transitions(),[5])}current_task(){return this.experiment_definition.tasks[this.current_page_index]}constructor(e,t,n,s,r){super(e,r,t,n),this.current_page_index=-1,this.experiment_definition=s}automata_configuration(){return new r([0,1,3,4,5],0,(()=>{}),this.transitions(),[5])}transitions(){return[l(0).to(1).on("Enter").do((e=>{console.log("Dummy Exp: Enter On Exp"),this.set_experiment_index(0),this.measurement.start_measurement(this.current_task())})),l(0).to(4).on("Delete").do((e=>{console.log("Dummy Exp: Delete On Exp"),this.show_outro()})),l(1).to(4).on("?+Control").if((e=>!0)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),l(1).to(3).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index<this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task())})),l(1).to(1).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&!this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),l(1).to(2).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),l(2).to(1).on("Enter").if((e=>this.measurement.penalty_is_over())).do((e=>{this.measurement.start_measurement(this.current_task())})),l(3).to(1).on("Enter").if((e=>this.current_page_index<this.experiment_definition.tasks.length-1)).do((e=>{this.inc_current_experiment(),this.measurement.start_measurement(this.current_task())})),l(1).to(4).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index==this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),l(4).to(5).on("Enter").do((e=>{}))]}set_experiment_index(e){this.current_page_index=e,this.output_writer().print_string_to_page_number("Task "+(this.current_page_index+1)+" / "+this.experiment_definition.tasks.length)}inc_current_experiment(){this.set_experiment_index(++this.current_page_index)}init_experiment(){this.experiment_definition.init_experiment(!1)}}class I extends D{constructor(e,t,n,s){super("Training",(()=>{e(),s.output_writer().print_html_on_stage("<hr>Press [Enter] to start training.")}),(()=>{s.output_writer().print_html_on_stage("You finished the training phase.<hr>"+(t.can_be_repeated?"Please, press [Enter] to run again a training session.<br>":"")+"Please, press [E] (capital E, i.e., [shift] + [e]) to enter the experiment phase.")}),n,s),this.training_configuration=t}print_cancel_text(){this.output_writer().clear_stage(),this.output_writer().print_string_to_page_number("Cancelled"),this.output_writer().print_html_on_stage("You cancelled this training session.<hr>Press [Enter] if you want to start another training session.<br>Press [E] (capital E!) if you want to start with the experiment.")}automata_configurator(){return new r([0,1,2,3,4,5,6],0,(()=>{}),this.transitions(),[5])}transitions(){let e=super.transitions(),t=[l(0).to(6).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),l(1).to(6).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),l(3).to(6).on("Escape").if((()=>this.current_page_index<this.experiment_definition.tasks.length-1&&this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),l(6).to(5).on("E").do((()=>{})),l(6).to(0).on("Enter").do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),l(4).to(0).on("Enter").if((()=>this.training_configuration.can_be_repeated)).do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),l(4).to(5).on("E").do((e=>{}))];return e.splice(e.length-1),t.forEach((t=>e.push(t))),e}input(e){if(!["a","b","c"].includes(e)&&0!=this.automata.current_state)return super.input(e);super.input(e)}init_experiment(){this.training_configuration.init_experiment(this.experiment_definition)}}class j extends D{constructor(e,t,n){super("Main Experiment",(()=>{e(),n.output_writer().print_html_on_stage("<hr>Press [Enter] to start the experiment.")}),(()=>{n.output_writer().print_html_on_stage("You finished the experiment phase.<hr>Please, press [Enter] to go to the next phase.<br>")}),t,n)}}class H extends C{create_code_all_experiment_automatas(e){e.measurement.output_writer();let t=new A("Introduction",e.introduction_texts,e.measurement),n=new A("Finish",e.finish_texts,e.measurement);n.automata.add_finish_action((()=>e.finish_function(s.experiment_definition)));let s=new j(e.pre_run_experiment_output,this,e.measurement);v(e.seed),s.init_experiment();let r=this.clone(),i=new I(e.pre_run_training_output,e.training_configuration,r,e.measurement);i.init_experiment();let a=null;null!=e.post_questionnaire&&(a=new b(e.post_questionnaire,e.measurement));let o=[];return null!=t&&o.push(t),o.push(i),o.push(s),null!=a&&(o.push(a),s.experiment_definition.questionnaires.push(a)),o.push(n),new R(o)}clone(){return new H(this.template.experiment_name,this.is_training,this.treatments_combinator.clone(),this.template.variables,this.template.repetitions,this.measurement,this.template.task_creator)}}class O{constructor(e,t){this.variable=e,this.value=""+t}clone(){return new O(this.variable,this.value)}}function N(e,t,n){if(e.length>t.length)throw"Cannot loop both: first array has length: "+e.length+", but second has length "+t.length;let s=0;for(let r of e)n(r,t[s++])}class z{constructor(e){this.treatment_combination=[],this.treatment_combination=e}clone(){let e=new z([]);for(let t of this.treatment_combination)e.treatment_combination.push(t.clone());return e}}class M{constructor(e){this.can_be_cancelled=!0,this.can_be_repeated=!0,void 0!==e&&(null!=e.fixed_treatments&&(this.fixed_treatments=e.fixed_treatments),this.can_be_cancelled=e.can_be_cancelled,this.can_be_repeated=e.can_be_repeated)}init_experiment(e){if(e.tasks=[],null!=this.fixed_treatments)for(let t of this.fixed_treatments){let n=new z([]);N(e.all_independent_variables(),t,((e,t)=>{n.treatment_combination.push(new O(e,t))}));let s=new q(n,e,"");s.is_training=!0,e.experiment_definition_task_creator(s),e.tasks.push(s)}else e.init_experiment(!0)}}class P{constructor(e,t){this.treatments=[],this.name=e;for(let e of t)this.treatments.push(new O(this,e))}}function U(e,t,n){if(0==e.length)n(t);else{let s=e.shift();for(let r of s)t.push(r),U(e,t,n),t.pop();e.unshift(s)}}function G(e,t){U(e,[],t)}class B{constructor(){this.independent_variables=[]}push_variable(e,t){this.independent_variables.push(new P(e,t))}print_to_array(e){for(let t of this.independent_variables)e.push(t.name+";")}create_treatment_combinations(){let e=[];return G(this.independent_variables.map((e=>e.treatments)),(t=>{e.push(new z([...t]))})),e}get_variable_named(e){for(let t of this.independent_variables)if(t.name===e)return t;throw"Unknown independent variable named: "+e}static from_layout(e){let t=new B;for(let n of e)t.push_variable(n.variable,n.treatments);return t}}class L extends m{print_experiment_name(e){this.get_html_element_by_id("STATE").innerHTML=e}clear_error(){let e=["STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_stage(){let e=["STAGE","STAGE_MSG","STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_state(){let e=["STATE","TASK"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}print_error_string_on_stage(e){this.get_html_element_by_id("STAGE_ERROR").innerHTML=e}get_html_element_by_id(e){return document.getElementById(e)}print_string_to_state(e){this.get_html_element_by_id("STATE").innerHTML=e}print_string_on_stage(e){this.print_html_on_stage("<p>"+e+"</p>")}ask_for_input(){let e=document.createElement("p"),t=document.createElement("label");t.setAttribute("type","text"),e.textContent="Answer: ",e.appendChild(t);let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("class","input"),e.appendChild(n),n.id="INPUT",this.get_html_element_by_id("STAGE").appendChild(e),n.focus()}set_focus_on_input(){this.get_html_element_by_id("INPUT").focus()}print_string_to_page_number(e){this.get_html_element_by_id("TASK").innerHTML=e}get_given_answer(){return this.get_html_element_by_id("INPUT").value}print_on_input_response(e){this.get_html_element_by_id("INPUT").value=e}create_html_element_from_string(e){return(new DOMParser).parseFromString(e,"text/html").body}print_html_on_stage(e){this.get_html_element_by_id("STAGE").appendChild(this.create_html_element_from_string(e))}print_html_on_error(e){this.get_html_element_by_id("STAGE_ERROR").appendChild(this.create_html_element_from_string(e))}}function F(e){let t=[];if(0==e)return[];for(let n=1;n<=e;n++){let s=F(e-n);for(let e of s){let s=[n];for(let t of e)s.push(t);t.push(s)}0==s.length&&t.push([e])}return t}function J(e,t="",n=!1){if(!e)throw console.error(t),"Wrong: "+t;n&&console.log("Ok: "+t)}!function(){let e=[];e=F(5),e=F(0)}();class Y{constructor(e,t){this.children=[],this.children=[],this.content=e,this.children=t}clone(){let e=[];for(let t of this.children)e.push(t.clone());return new Y(this.content,e)}preorder(e){e(this);for(let t of this.children)t.preorder(e)}postorder(e){for(let t of this.children)t.postorder(e);e(this)}distance_SH01(e,t){if(this==e)return this.left_distance_SH01(t)-1;if(this==t)return this.right_distance_SH01(e)-1;let n=null,s=null,r=1;for(let r of this.children)r.contains_node(e)&&(n=r),r.contains_node(t)&&(s=r);if(null===n||null===s)throw"should not be";if(n===s)return n.distance_SH01(e,t);let i=this.children.slice(this.children.indexOf(n)+1,this.children.indexOf(s)-1);for(let e of i)r+=e.number_of_nodes();return r+=n.right_distance_SH01(e),r+=s.left_distance_SH01(t),r}right_distance_SH01(e){let t=null,n=1;if(e===this)return 0;for(let n of this.children)if(n.contains_node(e)){t=n;break}if(null===t)throw"should not be";let s=this.children.slice(this.children.indexOf(t)+1);for(let e of s)n+=e.number_of_nodes();return n+=t.right_distance_SH01(e),n}left_distance_SH01(e){let t=null,n=1;if(e===this)return 0;for(let n of this.children)if(n.contains_node(e)){t=n;break}if(null===t)throw"should not be";let s=this.children.indexOf(t),r=this.children.slice(0,s);for(let e of r)n+=e.number_of_nodes();return n+=t.left_distance_SH01(e),n}path_length_from_this(e){if(this===e)return 0;for(let t of this.children){let n=t.path_length_from_this(e);if(n>0)return n+1}return-1}number_of_nodes(){let e=1;for(let t of this.children)e+=t.number_of_nodes();return e}contains_node(e){if(this===e)return!0;for(let t of this.children)if(t.contains_node(e))return!0;return!1}}function Q(e){let t=new Y(null,[]);return function(e){for(let n=0;n<e;n++)t.children.push(new Y(null,[]))}(e-1),[t]}function W(e=[]){return new Y(null,e)}[1,2].slice(0,1),function(e){let t=new Y("source",[]),n=new Y("target",[]),s=-1,r=null;r=W([W([W(),W(),W()]),W([W(),W([t,n]),W()])]),s=r.distance_SH01(t,n),J(1==s,"distance = 1",e),r=W([W([W(),W([t,n]),W()]),W([W(),W(),W()])]),s=r.distance_SH01(t,n),J(1==s,"distance = 1",e),r=W([W([W(),W([t]),W()]),W([W(),W(),n,W()])]),s=r.distance_SH01(t,n),J(7==s,"distance = 7",e),r=W([W([W(),W([t]),W()]),W([W(),n,W()])]),s=r.distance_SH01(t,n),J(6==s,"distance = 6",e),r=W([W([W(),t,W()]),W([W(),W(),n,W()])]),s=r.distance_SH01(t,n),J(6==s,"distance = 6",e),r=W([W([t,W()]),W([W(),n,W()])]),s=r.distance_SH01(t,n),J(5==s,"distance = 5",e),r=W([W([t,W()]),W([W(),n])]),s=r.distance_SH01(t,n),J(5==s,"distance = 5",e),r=W([W([t,W()]),W([n])]),s=r.distance_SH01(t,n),J(4==s,"distance = 4",e),r=t.clone(),r.children=[n],s=r.distance_SH01(r,n),J(0==s,"distance = 0 (source==root)",e),r=n.clone(),r.children=[t],s=r.distance_SH01(t,r),J(0==s,"distance = 0 (target==root)",e),r=W([t,n]),s=r.distance_SH01(t,n),J(1==s,"distance = 1",e),r=W([W([t]),n]),s=r.distance_SH01(t,n),J(2==s,"distance = 2",e),r=W([W([t,W()]),n]),s=r.distance_SH01(t,n),J(3==s,"distance = 3",e)}(!0);class K{constructor(e,t,n,s){this.parameter_names=[],this.parameter_ordering=[],this.class_name=e,this.parameter_type_names=n,this.method_name=s,this.parameter_names=t;let r=0;t.forEach((e=>this.parameter_ordering.push(r++))),this.parameter_ordering=E(this.parameter_ordering)}type_signature_string(){return this.class_name+"("+this.parameter_type_names.join(", ")+")"}print_html_into_array(e,t,n){let s=this.parameter_names.length>0?"<br/>":"",r=[];for(let e=0;e<this.parameter_names.length;e++)r.push((n?this.parameter_type_names[e]+" ":"")+this.parameter_names[e]);e.push("class "+this.class_name+" {<br/><br/>"),e.push("&nbsp;&nbsp;"+this.class_name+"("+r.join(",&nbsp;")+") {"+s);for(let n of this.parameter_ordering){let s=t.get_class_named(this.parameter_type_names[n]);e.push("&nbsp;&nbsp;&nbsp;&nbsp;"+this.parameter_names[n]+"."+s.method_name+"();<br/>")}e.push("&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br/><br/>"),e.push("&nbsp;&nbsp;"+this.method_name+"() {}&nbsp;&nbsp;&nbsp;<br/><br/>"),e.push("}")}}class V{constructor(e){this.class_definitions=e}type_check(e){let t=this.get_class_named(e.class_name),n=[];for(let t of e.parameters)this.type_check(t),n.push(t.class_name);if(n.length!=t.parameter_type_names.length)throw"invalid number of parameters: "+t.class_name+" expects "+t.parameter_names.length+" but got "+n.length;for(let e=0;e<t.parameter_type_names.length;e++)if(t.parameter_type_names[e]!==n[e])throw"invalid type in call. Expected "+t.type_signature_string()+" but got "+t.class_name+"("+n.join(", ")+")"}execute(e){let t=this.get_class_named(e.class_name),n=[];for(let t of e.parameters)this.execute(t),n.push(t.class_name);if(n.length!=t.parameter_type_names.length)throw"invalid number of parameters: "+t.class_name+" expects "+t.parameter_names.length+" but got "+n.length;for(let e=0;e<t.parameter_type_names.length;e++){let s=this.get_class_named(t.parameter_type_names[e]);if(t.parameter_type_names[e]!==n[e])throw"unknown method: "+s.method_name+" in object of class "+n[e]+"\n==>"+t.parameter_names[e]+"."+s.method_name+"();\n==>"+t.class_name+"("+t.parameter_names.join(", ")+"){...}"}}get_class_named(e){for(let t of this.class_definitions)if(t.class_name===e)return t;throw"no such class named: "+e}get_classes_named(e){let t=[];return e.forEach((e=>t.push(this.get_class_named(e)))),t}number_of_classes(){return this.class_definitions.length}html_table_string(e,t){let n=["<table style='border: 1px solid black;'>"],s=0;for(;s<this.class_definitions.length;){n.push('<tr style="vertical-align:top">');for(let r=0;r<e&&s<this.class_definitions.length;r++)"Target"===this.class_definitions[s].class_name?n.push("<td colspan='2' style='border: 1px solid black;'>"):n.push("<td style='border: 1px solid black;'>"),this.class_definitions[s].print_html_into_array(n,this,t),n.push("</td>"),s++;n.push("</tr>\n")}this.sort_class_definitions();let r=n.join("");return console.log("dummy print_into_html_table()"),r}sort_class_definitions(){this.class_definitions.sort(((e,t)=>"Target"===e.class_name?1:"Target"===t.class_name||e.class_name<t.class_name?-1:e.class_name>t.class_name?1:0));let e=this.class_definitions.pop();this.class_definitions.splice(10,0,e)}}class Z{constructor(){this.words=["account","achiever","acoustics","act","action","activity","actor","addition","adjustment","advertisement","advice","aftermath","afternoon","afterthought","agreement","air","airplane","airport","alarm","amount","amusement","anger","angle","animal","ants","apparatus","apparel","appliance","approval","arch","argument","arithmetic","arm","army","art","attack","attraction","aunt","authority","back","badge","bag","bait","balance","ball","base","baseball","basin","basket","basketball","bat","bath","battle","bead","bear","bed","bedroom","beds","bee","beef","beginner","behavior","belief","believe","bell","bells","berry","bike","bikes","bird","birds","birth","birthday","bit","bite","blade","blood","blow","board","boat","bomb","bone","book","books","boot","border","bottle","boundary","box","brake","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","cabbage","cable","cactus","cake","cakes","calculator","calendar","camera","camp","can","cannon","canvas","cap","caption","car","card","care","carpenter","carriage","cars","cart","cast","cat","cats","cattle","cause","cave","celery","cellar","cemetery","cent","chalk","chance","change","channel","cheese","cherries","cherry","chess","chicken","chickens","chin","church","circle","clam","cloth","clover","club","coach","coal","coast","coat","cobweb","coil","collar","color","committee","company","comparison","competition","condition","connection","control","cook","copper","corn","cough","country","cover","cow","cows","crack","cracker","crate","crayon","cream","creator","creature","credit","crib","crime","crook","crow","crowd","crown","cub","cup","current","curtain","curve","cushion","dad","daughter","day","death","debt","decision","deer","degree","design","desire","desk","destruction","detail","development","digestion","dime","dinner","dinosaurs","direction","dirt","discovery","discussion","distance","distribution","division","dock","doctor","dog","dogs","doll","dolls","donkey","door","downtown","drain","drawer","dress","drink","driving","drop","duck","ducks","dust","ear","earth","earthquake","edge","education","effect","egg","eggnog","eggs","elbow","end","engine","error","event","example","exchange","existence","expansion","experience","expert","eye","eyes","face","fact","fairies","fall","fang","farm","fear","feeling","field","finger","fire","fireman","fish","flag","flame","flavor","flesh","flight","flock","floor","flower","flowers","fly","fog","fold","food","foot","force","fork","form","fowl","frame","friction","friend","friends","frog","frogs","front","fruit","fuel","furniture","gate","geese","ghost","giants","giraffe","glass","glove","gold","government","governor","grade","grain","grandfather","grandmother","grape","grass","grip","ground","group","growth","guide","guitar","gun","hair","haircut","hall","hammer","hand","hands","harbor","harmony","hat","head","health","heat","hill","history","hobbies","hole","holiday","home","honey","hook","hope","horn","horse","horses","hose","hospital","hot","hour","house","houses","humor","hydrant","ice","icicle","idea","impulse","income","increase","industry","ink","insect","instrument","insurance","interest","invention","iron","island","jail","jam","jar","jeans","jelly","jellyfish","jewel","join","judge","juice","jump","kettle","key","kick","kiss","kittens","kitty","knee","knife","knot","knowledge","laborer","lace","ladybug","lake","lamp","land","language","laugh","leather","leg","legs","letter","letters","lettuce","level","library","limit","line","linen","lip","liquid","loaf","lock","locket","look","loss","love","low","lumber","lunch","lunchroom","machine","magic","maid","mailbox","man","marble","mark","market","mask","mass","match","meal","measure","meat","meeting","memory","men","metal","mice","middle","milk","mind","mine","minister","mint","minute","mist","mitten","mom","money","month","moon","morning","mother","motion","mountain","mouth","move","muscle","name","nation","neck","need","needle","nerve","nest","night","noise","north","nose","note","notebook","number","nut","oatmeal","observation","ocean","offer","office","oil","orange","oranges","order","oven","page","pail","pan","pancake","paper","parcel","part","partner","party","passenger","payment","peace","pear","pen","pencil","person","pest","pet","pets","pickle","picture","pie","pies","pig","pigs","pin","pipe","pizzas","place","plane","planes","plant","plantation","plants","plastic","plate","play","playground","pleasure","plot","plough","pocket","point","poison","pollution","popcorn","porter","position","pot","potato","powder","power","price","produce","profit","property","prose","protest","pull","pump","punishment","purpose","push","quarter","quartz","queen","question","quicksand","quiet","quill","quilt","quince","quiver","rabbit","rabbits","rail","railway","rain","rainstorm","rake","range","rat","rate","ray","reaction","reading","reason","receipt","recess","record","regret","relation","religion","representative","request","respect","rest","reward","rhythm","rice","riddle","rifle","ring","rings","river","road","robin","rock","rod","roll","roof","room","root","rose","route","rub","rule","run","sack","sail","salt","sand","scale","scarecrow","scarf","scene","scent","school","science","scissors","screw","sea","seashore","seat","secretary","seed","selection","self","sense","servant","shade","shake","shame","shape","sheep","sheet","shelf","ship","shirt","shock","shoe","shoes","shop","show","side","sidewalk","sign","silk","silver","sink","sister","sisters","size","skate","skin","skirt","sky","slave","sleep","sleet","slip","slope","smash","smell","smile","smoke","snail","snails","snake","snakes","sneeze","snow","soap","society","sock","soda","sofa","son","song","songs","sort","sound","soup","space","spade","spark","spiders","sponge","spoon","spot","spring","spy","square","squirrel","stage","stamp","star","start","statement","station","steam","steel","stem","step","stew","stick","sticks","stitch","stocking","stomach","stone","stop","store","story","stove","stranger","straw","stream","street","stretch","string","structure","substance","sugar","suggestion","suit","summer","sun","support","surprise","sweater","swim","swing","system","table","tail","talk","tank","taste","tax","teaching","team","teeth","temper","tendency","tent","territory","test","texture","theory","thing","things","thought","thread","thrill","throat","throne","thumb","thunder","ticket","tiger","time","tin","title","toad","toe","toes","tomatoes","tongue","tooth","toothbrush","toothpaste","top","touch","town","toy","toys","trade","trail","train","trains","tramp","transport","tray","treatment","tree","trees","trick","trip","trouble","trousers","truck","trucks","tub","turkey","turn","twig","twist","umbrella","uncle","underwear","unit","use","vacation","value","van","vase","vegetable","veil","vein","verse","vessel","vest","view","visitor","voice","volcano","volleyball","voyage","walk","wall","war","wash","waste","watch","water","wave","waves","wax","way","wealth","weather","week","weight","wheel","whip","whistle","wilderness","wind","window","wine","wing","winter","wire","wish","wood","wool","word","work","worm","wound","wren","wrench","wrist","writer","writing","yak","yam","yard","yarn","year","yoke","zebra","zephyr","zinc","zipper","zoo"]}}class X{constructor(e,t){this.parameters=t,this.class_name=e}call_string(){let e=[];return e.push(this.class_name+"("),e.push(this.parameters.map((e=>e.call_string())).join(", ")),e.push(")"),e.join("")}equals(e){return e instanceof X&&this.class_name===e.class_name&&this.parameters.length===e.parameters.length}}function $(e){if(e.length<1)throw"missing )";let t=[],n=e[0];if(")"!==n&&e.length>0){let s=ee(e);if(t.push(s),n=e[0],","===n){e.shift();let n=$(e);if(0==n.length)throw"missing parameters after , <<< "+e.join("");n.forEach((e=>t.push(e)))}}if(e.length<=0)throw"missing )";return t}function ee(e){let t=function(e){let t=[];for(;e.length>0;){let n=e.shift();if(!(n>="a"&&n<="z"||n>="A"&&n<="Z")){if(t.length<=0)throw"invalid identifier before "+e.join("");return e.unshift(n),t.join("")}t.push(n)}if(t.length<=0)throw"No identifier";return t.join("")}(e);if("null"===t)return new X(null,[]);let n=e.shift();if("("!==n)throw"missing ("+e.join("");let s=$(e);if(n=e.shift(),")"!==n)throw"Missing )";return new X(t,s)}function te(e){return function(e){let t=ee(e);if(e.length>0)throw"unexpected character "+e[0];return t}(e.split(" ").join("").split(""))}function ne(e){let t=new X(e.content,[]);return e.children.forEach((e=>t.parameters.push(ne(e)))),t}v("666");let se={1:Q(2),3:Q(4),5:Q(6)};!function(){let e=new L,t={experiment_name:"TestExperiment",seed:"666",introduction_pages:(i=e).stage_string_pages_commands([i.convert_string_to_html_string("Please, just do this experiment only, when you have enough time (about 10 minutes), are concentrated enough, and motivated enough.\n\nPlease, open the browser in fullscreen mode (probably by pressing [F11]). You should have a screen with a resolution of 1920x1080 or more."),"In this experiment, you will be asked to enter the constructor call to a class <span class='sourcecode'>Target</span>. A valid constructor call requires in the underlying language the correct number of parameters as well.<br><br>The languages does <b>not</b> have a keyword such as <span class='sourcecode'>new</span>. Instead, you call a constructor like a function call, where the class name is the function name.<br/><br/> For example, if there is a class with the name <span class='sourcecode'>MyClass</span> whose constructor does not have any parameters, you call the constructor via <span class='sourcecode'>MyClass()</span>.<br/><br/>All available classes are shown to you in a table (each cell has one class). The class <span class='sourcecode'>Target</span> is the one whose parameter needs to be called. It is always in the first cell in the last row.<br><br>The code in the experiment is either statically typed or dynamically typed which will be explained on the next page and none of classes whose objects are passed to the constructor required any parameters.<br><br>Please note that the classes you will see in each code snippet will be different. I.e. in a first task a class named A is different than a class named A in the second task.",'Sometimes the classes are statically typed with a type name in front of each parameter (such as in languages like Java). For example, the following could be shown to you:<table style="border: 1px solid black;"><tbody><tr style="vertical-align:top"><td style="border: 1px solid black;">class A {<br><br>&nbsp;&nbsp;A() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;enterData() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class C {<br><br>&nbsp;&nbsp;C() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;addEvents() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class E {<br><br>&nbsp;&nbsp;E(J teeth,&nbsp;J fall) {<br>&nbsp;&nbsp;&nbsp;&nbsp;fall.queueResults();<br>&nbsp;&nbsp;&nbsp;&nbsp;teeth.queueResults();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;manipulateQueue() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class G {<br><br>&nbsp;&nbsp;G() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;filterEvents() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class H {<br><br>&nbsp;&nbsp;H(G building) {<br>&nbsp;&nbsp;&nbsp;&nbsp;building.filterEvents();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;initializeData() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n<tr style="vertical-align:top"><td style="border: 1px solid black;">class I {<br><br>&nbsp;&nbsp;I() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;computeResult() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class J {<br><br>&nbsp;&nbsp;J() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;queueResults() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class L {<br><br>&nbsp;&nbsp;L(E insect,&nbsp;J knot) {<br>&nbsp;&nbsp;&nbsp;&nbsp;knot.queueResults();<br>&nbsp;&nbsp;&nbsp;&nbsp;insect.manipulateQueue();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;writeOutput() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class N {<br><br>&nbsp;&nbsp;N() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;monitorSystem() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class O {<br><br>&nbsp;&nbsp;O(R road) {<br>&nbsp;&nbsp;&nbsp;&nbsp;road.createTasks();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;trackUserActivity() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n<tr style="vertical-align:top"><td colspan="2" style="border: 1px solid black;">class Target {<br><br>&nbsp;&nbsp;Target(A substance,&nbsp;C scene) {<br>&nbsp;&nbsp;&nbsp;&nbsp;scene.addEvents();<br>&nbsp;&nbsp;&nbsp;&nbsp;substance.enterData();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;getUserInfo() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class R {<br><br>&nbsp;&nbsp;R(H driving,&nbsp;N door) {<br>&nbsp;&nbsp;&nbsp;&nbsp;driving.initializeData();<br>&nbsp;&nbsp;&nbsp;&nbsp;door.monitorSystem();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;createTasks() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class S {<br><br>&nbsp;&nbsp;S(A rake) {<br>&nbsp;&nbsp;&nbsp;&nbsp;rake.enterData();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;doComputation() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class T {<br><br>&nbsp;&nbsp;T() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;setupConnections() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n</tbody></table><br>The correct constructor call in that case is: <span class=\'sourcecode\'>Target(A(), C())</span>: the first parameter must be an instance of <span class=\'sourcecode\'>A</span>, the second one an instance of <span class=\'sourcecode\'>C</span>.','Sometimes the classes are dynamically typed (such as in languages like JavaScript). For example, the following could be shown to you:<span class=\'sourcecode\'><table style="border: 1px solid black;"><tbody><tr style="vertical-align:top"><td style="border: 1px solid black;">class A {<br><br>&nbsp;&nbsp;A() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;enterData() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class C {<br><br>&nbsp;&nbsp;C() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;addEvents() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class E {<br><br>&nbsp;&nbsp;E(teeth,&nbsp;fall) {<br>&nbsp;&nbsp;&nbsp;&nbsp;fall.queueResults();<br>&nbsp;&nbsp;&nbsp;&nbsp;teeth.queueResults();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;manipulateQueue() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class G {<br><br>&nbsp;&nbsp;G() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;filterEvents() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class H {<br><br>&nbsp;&nbsp;H(building) {<br>&nbsp;&nbsp;&nbsp;&nbsp;building.filterEvents();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;initializeData() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n<tr style="vertical-align:top"><td style="border: 1px solid black;">class I {<br><br>&nbsp;&nbsp;I() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;computeResult() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class J {<br><br>&nbsp;&nbsp;J() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;queueResults() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class L {<br><br>&nbsp;&nbsp;L(insect,&nbsp;knot) {<br>&nbsp;&nbsp;&nbsp;&nbsp;knot.queueResults();<br>&nbsp;&nbsp;&nbsp;&nbsp;insect.manipulateQueue();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;writeOutput() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class N {<br><br>&nbsp;&nbsp;N() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;monitorSystem() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class O {<br><br>&nbsp;&nbsp;O(road) {<br>&nbsp;&nbsp;&nbsp;&nbsp;road.createTasks();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;trackUserActivity() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n<tr style="vertical-align:top"><td colspan="2" style="border: 1px solid black;">class Target {<br><br>&nbsp;&nbsp;Target(substance,&nbsp; scene) {<br>&nbsp;&nbsp;&nbsp;&nbsp;scene.addEvents();<br>&nbsp;&nbsp;&nbsp;&nbsp;substance.enterData();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;getUserInfo() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class R {<br><br>&nbsp;&nbsp;R(driving,&nbsp;door) {<br>&nbsp;&nbsp;&nbsp;&nbsp;driving.initializeData();<br>&nbsp;&nbsp;&nbsp;&nbsp;door.monitorSystem();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;createTasks() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class S {<br><br>&nbsp;&nbsp;S(rake) {<br>&nbsp;&nbsp;&nbsp;&nbsp;rake.enterData();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;doComputation() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class T {<br><br>&nbsp;&nbsp;T() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;setupConnections() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n</tbody></table></span><br>The correct constructor call is again: <span class=\'sourcecode\'>Target(A(), C())</span>: <ol><li>the first parameter must be an instance of <span class=\'sourcecode\'>A</span>, because the message <span class=\'sourcecode\'>enterData()</span> is sent to the first parameter (and it is just implemented in <span class=\'sourcecode\'>A</span>).</li><li>The second parameter must be an instance of <span class=\'sourcecode\'>C</span> because the message <span class=\'sourcecode\'>addEvents()</span> is sent to the second parameter (and it is just implemented in <span class=\'sourcecode\'>C</span>).</li></ol>']),pre_run_training_instructions:i.string_page_command(i.convert_string_to_html_string("You entered the training phase that consists of just two examples. Again, please enter the constructor call. You will go to the next task once you entered the correct call.")),pre_run_experiment_instructions:i.string_page_command(i.convert_string_to_html_string("You entered the experiment phase. Now, it should take probably 5-7 minutes until the end of the experiment.")),post_questionnaire:[d("Age","What's your age??",["younger than 18","between 18 and (excluding) 25","between 25 and (excluding) 30","between 30 and (excluding) 35","between 35 and (excluding) 40","40 or older"]),d("Status","What is your current working status?",["Undergraduate student (BSc not yet finished)","Graduate student (at least BSc finished)","PhD student","Professional software developer","Teacher","Other"]),d("Studies","In case you study, what's your subject?",["I do not study","Computer science","computer science related (such as information systems, aka WiInf)","something else in natural sciences","something else"]),d("LOCExperience","What describes your programming background best?",["I never program","I rarely program","I write some LOC from time to time","I frequently write code","I write code almost every day"]),d("YearsOfExperience","How many years of experience do you have in software industry?",["none","less than or equal 1 year","more than 1 year, but less than or equal 3 years","more than 3 years, but less than or equal 5 year","more than 5 years"]),d("impression","What statement describes                        best your impression \n of the experiment?",["I do not think that there was a difference between static and dynamic types","Dynamic types made it slightly easier for me","Dynamic types made it much easier for me","Static types made it slightly easier for me","Static types made it much easier for me"]),d("preference","What kinds of language do you prefer?",["Slightly rather dynamically typed languages","Slightly statically typed languages","Definitively dynamically typed languages","Definitively statically typed languages","I don't think typing matters much"]),d("possibleEffect","Do you think participating in the experiment changed your perspective on type systems?",["Rather no","Rather yes","Definitively no","Definitively es","I don't know"])],finish_pages:[i.string_page_command("<p>Almost done. Next, the experiment data will be downloaded (after pressing [Enter]).<br><br>Please, send the downloaded file to the experimenter: <a href='mailto:stefan.hanenberg@uni-due.de'>stefan.hanenberg@uni-due.de</a></p><p>By sending that mail, you agree that your (anonymized) data will be used for scientific analyses where your data (together with others in an anonymized way) will be published.<br><br>I.e., you agree with the information sheet, see <a href='https://github.com/shanenbe/Experiments/blob/main/2024_TypeSystems_ConstructorCall_Flat/Agreement.pdf' target='_blank'>here</a>. Note, that it it no longer necessary to send a signed version of the agreement to the experimenter.<br><br>After sending your email, you can close this window.</p><p>Many thanks for your participation.<br>-Stefan Hanenberg</p>")],layout:[{variable:"Notation",treatments:["types","no_types"]},{variable:"Number_of_parameters",treatments:["1","3","5"]}],repetitions:2,measurement:(a=_,e=>new g(a(e))),training_configuration:{fixed_treatments:[["types","5"],["no_types","5"]],can_be_cancelled:!1,can_be_repeated:!1},task_configuration:e=>{let t=S(se[e.treatment_value("Number_of_parameters")]).clone(),n=function(e,t){let n=E(["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]),s=E((new Z).words),r=E(["addEvents","acceptDefaults","analyzeResults","askInput","bindResources","cancelInitialization","calculateSum","clearCache","cloneNumbers","computeResult","connectDatabase","createTasks","doComputation","dropFiles","executeTask","dumpDatabase","enterData","eraseTmp","fetchData","finishSetup","filterEvents","forwardProfile","formatOutput","generateNumber","getUserInfo","handleError","initializeData","invalidateConnections","logErrors","mergeRequests","monitorSystem","manipulateQueue","parseData","printLogs","processData","queueResults","runComputation","rerunSetup","setupConnections","scaleBandwith","streamEvents","validateInput","writeOutput","trackUserActivity","zipHistory"]);function i(){return Math.random(),n.length,n.shift()}function a(){return Math.random(),s.length,s.shift()}function o(){return r.shift()}let p=new V([]);e.postorder((t=>{t.content=t===e?"Target":i();let n=t.children.map((e=>e.content)),s=t.children.map((e=>a())),r=new K(t.content,s,n,o());p.class_definitions.push(r)}));for(let e=p.number_of_classes();e<t;e++){let e=x(3),t=[],n=[];for(let s=0;s<e;s++)t.push(a()),n.push(S(p.class_definitions).class_name);let s=new K(i(),t,n,o());p.class_definitions.push(s)}return p.sort_class_definitions(),p}(t,14),s=n.html_table_string(5,"types"===e.treatment_value("Notation")),r="";e.do_print_task=()=>{i.clear_stage(),i.print_html_on_stage("<div class='sourcecode'>"+s+"</div>")},e.expected_answer=ne(t).call_string(),e.accepts_answer_function=s=>{try{let t=te(s);try{"types"===e.treatment_value("Notation")?n.type_check(t):n.execute(t)}catch(e){return r=e,!1}}catch(e){return r=e,!1}return 0!=(te(s).class_name===ne(t).class_name)||(r="invalid target class",!1)},e.do_print_error_message=e=>{i.clear_error(),i.print_html_on_error(r)},e.do_print_after_task_information=()=>{i.clear_stage(),i.clear_error(),i.print_string_on_stage(i.convert_string_to_html_string("Correct.\n\nIn case, you feel not concentrated enough, make a short break.\n\nPress [Enter] to go on. "))}}},n=t.measurement(e),s=function(e){let t=B.from_layout(e.layout),n=new T(t,e.repetitions),s=new H(e.experiment_name,!1,n,t,e.repetitions,e.measurement,e.task_configuration),r=new M(e.training_configuration);return s.create_code_all_experiment_automatas({seed:e.seed,introduction_texts:e.introduction_pages,post_questionnaire:e.post_questionnaire,pre_run_training_output:e.pre_run_training_output,training_configuration:r,pre_run_experiment_output:e.pre_run_experiment_output,finish_texts:e.finish_pages,measurement:e.measurement,finish_function:e.finish_function})}({experiment_name:t.experiment_name,seed:t.seed,introduction_pages:t.introduction_pages,post_questionnaire:t.post_questionnaire,pre_run_training_output:t.pre_run_training_instructions,training_configuration:t.training_configuration,pre_run_experiment_output:t.pre_run_experiment_instructions,finish_pages:t.finish_pages,layout:t.layout,repetitions:t.repetitions,task_configuration:t.task_configuration,measurement:n,finish_function:e=>{document.removeEventListener("keydown",r),function(e,t){const n=new Blob(t,{type:"application/ssc"}),s=window.document.createElement("a");s.href=window.URL.createObjectURL(n),s.download="experimentdata.csv",document.body.appendChild(s),s.click(),document.body.removeChild(s)}(0,e.generate_csv_data())}}),r=e=>{let t=(r="","Alt"==(n=e).key&&n.ctrlKey?"Alt+Ctrl":"Control"==n.key&&n.altKey?"Ctrl+Alt":(r+=n.altKey?"+Alt":"",r+=n.ctrlKey?"+Control":"","Alt"==n.key?"Alt":""+n.key+r));var n,r;s.input(t)};var i,a;document.addEventListener("keydown",r,!1),s.set_active()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LGdCQUFrQjJELElBRWRuTixTQUFTa1Ysb0JBQW9CLFVBQVdDLEd6QmxFN0MsU0FBMkJDLEVBQVVDLEdBQ3hDLE1BQU1DLEVBQU8sSUFBSUMsS0FBS0YsRUFBTSxDQUFFRyxLQUFNLG9CQUM5QkMsRUFBT0MsT0FBTzFWLFNBQVNtTSxjQUFjLEtBQzNDc0osRUFBS0UsS0FBT0QsT0FBT0UsSUFBSUMsZ0JBQWdCUCxHQUN2Q0csRUFBS0ssU3lCK0RxQixxQnpCOUQxQjlWLFNBQVM2TSxLQUFLTixZQUFZa0osR0FDMUJBLEVBQUtNLFFBQ0wvVixTQUFTNk0sS0FBS2IsWUFBWXlKLEVBQzlCLEN5QjJEWU8sQ0FBa0IsRUFBc0I3SSxFQUFJbEcsb0JBQW9CLElBR3BFa08sRUFBaUJsZCxJQUNqQixJQUFJZ2UsR3pCbEdKQyxFQUFVLEdBQ0csUUFGWUMsRXlCbUdTbGUsR3pCakc1QmQsS0FDRmdmLEVBQU1DLFFBQ0MsV0FDRSxXQUFiRCxFQUFNaGYsS0FDRmdmLEVBQU1FLE9BQ0MsWUFDZkgsR0FBcUJDLEVBQU1FLE9BQVMsT0FBUyxHQUM3Q0gsR0FBcUJDLEVBQU1DLFFBQVUsV0FBYSxHQUNqQyxPQUFiRCxFQUFNaGYsSUFDQyxNQUVKLEdBQUtnZixFQUFNaGYsSUFBTStlLElBYnJCLElBQTBCQyxFQUN6QkQsRXlCbUdBbkIsRUFBb0JuWixNQUFNcWEsRUFBVyxFVTFHTCxJQUFDeEMsRTNCUlY3WCxFaUJxSDNCb0UsU0FBU3NXLGlCQUFpQixVQUFXbkIsR0FBZSxHQUNwREosRUFBb0IvWSxZQUN4QixDVTBFQXVhLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL3V0aWxzL1V0aWxzLmpzIiwid2VicGFjazovL0V4cGVyaW1lbnRhdGlvbi8uL21vZHVsZXNfaGFyZF9pbXBvcnQvc2VlZHJhbmRvbS9zZWVkcmFuZG9tLmpzIiwid2VicGFjazovL0V4cGVyaW1lbnRhdGlvbi8uL21vZHVsZXMvQXV0b21hdGEvQXV0b21hdGFfRm9yd2FyZGVyLmpzIiwid2VicGFjazovL0V4cGVyaW1lbnRhdGlvbi8uL21vZHVsZXMvQXV0b21hdGEvQXV0b21hdGEuanMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vbW9kdWxlcy9BdXRvbWF0YV9Gb3J3YXJkZXJzL0F1dG9tYXRhX1dpdGhfT3V0cHV0X0ZvcndhcmRlci5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL0F1dG9tYXRhL0F1dG9tYXRhX0NvbmZpZ3VyYXRvci5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL0F1dG9tYXRhL1RyYW5zaXRpb25zLmpzIiwid2VicGFjazovL0V4cGVyaW1lbnRhdGlvbi8uL21vZHVsZXMvQXV0b21hdGFfRm9yd2FyZGVycy9RdWVzdGlvbm5haXJlX0ZvcndhcmRlci5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9FeHBlcmltZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vbW9kdWxlcy9FeHBlcmltZW50YXRpb24vVGFzay5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi90cmVhdG1lbnRzL1RyZWF0bWVudHNfQ29tYmluYXRvci5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9FeHBlcmltZW50X0RlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vbW9kdWxlcy9BdXRvbWF0YV9Gb3J3YXJkZXJzL0Jvb2tfRm9yd2FyZGVyLmpzIiwid2VicGFjazovL0V4cGVyaW1lbnRhdGlvbi8uL21vZHVsZXMvQm9va3MvU2VxdWVudGlhbF9Gb3J3YXJkZXJfRm9yd2FyZGVyLmpzIiwid2VicGFjazovL0V4cGVyaW1lbnRhdGlvbi8uL21vZHVsZXMvQXV0b21hdGFfRm9yd2FyZGVycy9FeHBlcmltZW50YXRpb25fRm9yd2FyZGVyLmpzIiwid2VicGFjazovL0V4cGVyaW1lbnRhdGlvbi8uL21vZHVsZXMvQXV0b21hdGFfRm9yd2FyZGVycy9UcmFpbmluZ19FeGVjdXRpb25fRm9yd2FyZGVyLmpzIiwid2VicGFjazovL0V4cGVyaW1lbnRhdGlvbi8uL21vZHVsZXMvQXV0b21hdGFfRm9yd2FyZGVycy9FeHBlcmltZW50X0ZvcndhcmRlci5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9Db2RlX0V4cGVyaW1lbnRfRGVmaW5pdGlvbi5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi90cmVhdG1lbnRzL1RyZWF0bWVudC5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL3V0aWxzL2xvb3BzL2xvb3AuanMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vbW9kdWxlcy9FeHBlcmltZW50YXRpb24vdHJlYXRtZW50cy9UcmVhdG1lbnRfQ29tYmluYXRpb24uanMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vbW9kdWxlcy9FeHBlcmltZW50YXRpb24vVHJhaW5pbmdfQ29uZmlndXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi90cmVhdG1lbnRzL0luZGVwZW5kZW50X1ZhcmlhYmxlLmpzIiwid2VicGFjazovL0V4cGVyaW1lbnRhdGlvbi8uL21vZHVsZXMvdXRpbHMvYXJyYXlzL2FsbF9hcnJheV9jb21iaW5hdGlvbnMuanMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vbW9kdWxlcy9FeHBlcmltZW50YXRpb24vdHJlYXRtZW50cy9JbmRlcGVuZGVudF9WYXJpYWJsZXMuanMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vbW9kdWxlcy9FeHBlcmltZW50YXRpb24vQnJvd3Nlcl9PdXRwdXRfV3JpdGVyLmpzIiwid2VicGFjazovL0V4cGVyaW1lbnRhdGlvbi8uL21vZHVsZXMvbnVtZXJpYy9pbnRlZ2VyX3BhcnRpdGlvbi5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL3V0aWxzL1Rlc3RpbmcuanMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vbW9kdWxlcy9ncmFwaHNfbl90cmVlcy9UcmVlLmpzIiwid2VicGFjazovL0V4cGVyaW1lbnRhdGlvbi8uL19fX0JVSUxEX0NVUlJFTlRfRVhQRVJJTUVOVC90eXBlc2NyaXB0L2NvZGUvQ2xhc3NfRGVmaW5pdGlvbi5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9fX19CVUlMRF9DVVJSRU5UX0VYUEVSSU1FTlQvdHlwZXNjcmlwdC9jb2RlL0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vbW9kdWxlcy9Xb3Jkcy9Ob3Vucy5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9fX19CVUlMRF9DVVJSRU5UX0VYUEVSSU1FTlQvdHlwZXNjcmlwdC9jb2RlL0NvbnN0cnVjdG9yX0NhbGwuanMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vX19fQlVJTERfQ1VSUkVOVF9FWFBFUklNRU5UL3R5cGVzY3JpcHQvY29kZS9QYXJzZXIuanMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vX19fQlVJTERfQ1VSUkVOVF9FWFBFUklNRU5UL3R5cGVzY3JpcHQvY29kZS9jb252ZXJ0X3RyZWVfdG9fY29uc3RydWN0b3JfY2FsbC5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9fX19CVUlMRF9DVVJSRU5UX0VYUEVSSU1FTlQvdHlwZXNjcmlwdC9leHBlcmltZW50X2NvbmZpZ3VyYXRpb24udHMiLCJ3ZWJwYWNrOi8vRXhwZXJpbWVudGF0aW9uLy4vX19fQlVJTERfQ1VSUkVOVF9FWFBFUklNRU5UL3R5cGVzY3JpcHQvY29kZS9nZW5lcmF0ZV9jbGFzc2VzX2Zyb21fdHJlZS5qcyIsIndlYnBhY2s6Ly9FeHBlcmltZW50YXRpb24vLi9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9mdW5jdGlvbnMvY3JlYXRlX2NvZGVfZXhwZXJpbWVudF9leGVjdXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZG9fdGVzdHMgfSBmcm9tIFwiLi9VdGlsc19UZXN0LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHsgfVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zKGNvbGxlY3Rpb24sIGVsZW1lbnQpIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbi5pbmRleE9mKGVsZW1lbnQpICE9IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbl9wcm9kdWN0KGFycjEsIGFycjIsIGYpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycjEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGkgPCBhcnIyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBmKGFycjFbaV0sIGFycjJbal0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGd1YXJhbnRlZV90ZXN0KGYpIHtcbiAgICBsZXQgcmVzdWx0ID0gZigpO1xuICAgIGlmICghcmVzdWx0KVxuICAgICAgICB0aHJvdyBcIlNvbWV0aGluZyBpcyB3cm9uZyBoZXJlXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ3VhcmFudGVlX3RydWUodHJ1ZUZhbHNlKSB7XG4gICAgaWYgKCF0cnVlRmFsc2UpXG4gICAgICAgIHRocm93IFwiU29tZXRoaW5nIGlzIHdyb25nIGhlcmVcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0X3N0cmluZ190b19odG1sX3N0cmluZyhzKSB7XG4gICAgcmV0dXJuIHNcbiAgICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAgICAgLnJlcGxhY2UoLycvZywgJyYjMzk7JylcbiAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCBcIjxici8+XCIpXG4gICAgICAgIC5yZXBsYWNlKC8gL2csICcmbmJzcDsnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBrZXlfZXZlbnRfc3RyaW5nKGV2ZW50KSB7XG4gICAgdmFyIHBvc3RmaXggPSBcIlwiO1xuICAgIGlmIChldmVudC5rZXkgPT0gXCJBbHRcIilcbiAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkpXG4gICAgICAgICAgICByZXR1cm4gXCJBbHQrQ3RybFwiO1xuICAgIGlmIChldmVudC5rZXkgPT0gXCJDb250cm9sXCIpXG4gICAgICAgIGlmIChldmVudC5hbHRLZXkpXG4gICAgICAgICAgICByZXR1cm4gXCJDdHJsK0FsdFwiO1xuICAgIHBvc3RmaXggPSBwb3N0Zml4ICsgKGV2ZW50LmFsdEtleSA/IFwiK0FsdFwiIDogXCJcIik7XG4gICAgcG9zdGZpeCA9IHBvc3RmaXggKyAoZXZlbnQuY3RybEtleSA/IFwiK0NvbnRyb2xcIiA6IFwiXCIpO1xuICAgIGlmIChldmVudC5rZXkgPT0gXCJBbHRcIilcbiAgICAgICAgcmV0dXJuIFwiQWx0XCI7XG4gICAgLy8gaWYoZXZlbnQua2V5PT1cIkNvbnRyb2xcIikgcmV0dXJuIHBvc3RmaXg7XG4gICAgcmV0dXJuIFwiXCIgKyBldmVudC5rZXkgKyBwb3N0Zml4O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5X3RvX3NlcXVlbmNlX29mX3NpemVfKHNlcXVlbmNlKSB7XG4gICAgdmFyIHJldCA9IFtdO1xuICAgIHZhciBjb3VudGVyID0gMDtcbiAgICBmb3IgKHZhciBlbGVtZW50IG9mIHNlcXVlbmNlKSB7XG4gICAgICAgIHJldC5wdXNoKGNvdW50ZXIpO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY3N2X2VuY29kaW5nKGFfc3RyaW5nKSB7XG4gICAgbGV0IGFkZF9lc2NhcGVzID0gYV9zdHJpbmcuc3BsaXQoXCJcXFwiXCIpLmpvaW4oXCJcXFwiXFxcIlwiKTtcbiAgICByZXR1cm4gXCJcXFwiXCIgKyBhZGRfZXNjYXBlcyArIFwiXFxcIlwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVfZmlsZV9pbl9odG1sKGZpbGVuYW1lLCBkYXRhKSB7XG4gICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKGRhdGEsIHsgdHlwZTogJ2FwcGxpY2F0aW9uL3NzYycgfSk7XG4gICAgY29uc3QgZWxlbSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgZWxlbS5ocmVmID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgZWxlbS5kb3dubG9hZCA9IGZpbGVuYW1lO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbSk7XG4gICAgZWxlbS5jbGljaygpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkX3VwbG9hZF9wdXNoX2J1dHRvbih1cmwsIGJ1dHRvbl90ZXN0LCBkYXRhKSB7XG4gICAgY29uc3QgZWxlbSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgZWxlbS5zZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIiwgdXJsKTtcbiAgICBlbGVtLnNldEF0dHJpYnV0ZShcIm1ldGhvZFwiLCBcInBvc3RcIik7XG4gICAgY29uc3QgaSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGkuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcImRhdGFcIik7XG4gICAgaS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiaGlkZGVuXCIpO1xuICAgIGkuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgZGF0YSk7XG4gICAgZWxlbS5hcHBlbmRDaGlsZChpKTtcbiAgICBjb25zdCBqID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgai5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBidXR0b25fdGVzdCk7XG4gICAgai5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwic3VibWl0XCIpO1xuICAgIGVsZW0uYXBwZW5kQ2hpbGQoaik7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1cGxvYWRfZXhwZXJpbWVudF90b19zZXJ2ZXIoZXhwZXJpbWVudCkge1xuICAgIGxldCBjc3YgPSBleHBlcmltZW50LmdlbmVyYXRlX2Nzdl9kYXRhKCk7XG4gICAgbGV0IGN1cnJlbnRVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAvLyBjb25zdCByZXNwb25zZSA9IGZldGNoKCdodHRwOi8vMTI3LjAuMC4xOjgwODgnLCB7XG4gICAgLy8gICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIC8vICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7ZXhwZXJpbWVudF9uYW1lIDogXCJkdW1teTJcIiwgZXhwZXJpbWVudF9kYXRhOiBkYXRhfSksXG4gICAgLy8gICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnfSB9KVxuICAgIGNvbnNvbGUubG9nKGN1cnJlbnRVcmwpO1xufVxuZG9fdGVzdHMoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVV0aWxzLmpzLm1hcCIsIi8qXG5Db3B5cmlnaHQgMjAxOSBEYXZpZCBCYXUuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG5cIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbkNMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG5UT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbiovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBwb29sLCBtYXRoKSB7XG4vL1xuLy8gVGhlIGZvbGxvd2luZyBjb25zdGFudHMgYXJlIHJlbGF0ZWQgdG8gSUVFRSA3NTQgbGltaXRzLlxuLy9cblxudmFyIHdpZHRoID0gMjU2LCAgICAgICAgLy8gZWFjaCBSQzQgb3V0cHV0IGlzIDAgPD0geCA8IDI1NlxuICAgIGNodW5rcyA9IDYsICAgICAgICAgLy8gYXQgbGVhc3Qgc2l4IFJDNCBvdXRwdXRzIGZvciBlYWNoIGRvdWJsZVxuICAgIGRpZ2l0cyA9IDUyLCAgICAgICAgLy8gdGhlcmUgYXJlIDUyIHNpZ25pZmljYW50IGRpZ2l0cyBpbiBhIGRvdWJsZVxuICAgIHJuZ25hbWUgPSAncmFuZG9tJywgLy8gcm5nbmFtZTogbmFtZSBmb3IgTWF0aC5yYW5kb20gYW5kIE1hdGguc2VlZHJhbmRvbVxuICAgIHN0YXJ0ZGVub20gPSBtYXRoLnBvdyh3aWR0aCwgY2h1bmtzKSxcbiAgICBzaWduaWZpY2FuY2UgPSBtYXRoLnBvdygyLCBkaWdpdHMpLFxuICAgIG92ZXJmbG93ID0gc2lnbmlmaWNhbmNlICogMixcbiAgICBtYXNrID0gd2lkdGggLSAxLFxuICAgIG5vZGVjcnlwdG8gICAgICAgICAgLy8gbm9kZS5qcyBjcnlwdG8gbW9kdWxlLCBpbml0aWFsaXplZCBhdCB0aGUgYm90dG9tLlxuXG4vL1xuLy8gc2VlZHJhbmRvbSgpXG4vLyBUaGlzIGlzIHRoZSBzZWVkcmFuZG9tIGZ1bmN0aW9uIGRlc2NyaWJlZCBhYm92ZS5cbi8vXG5mdW5jdGlvbiBzZWVkcmFuZG9tKHNlZWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBrZXkgPSBbXTtcbiAgb3B0aW9ucyA9IChvcHRpb25zID09IHRydWUpID8geyBlbnRyb3B5OiB0cnVlIH0gOiAob3B0aW9ucyB8fCB7fSk7XG5cbiAgLy8gRmxhdHRlbiB0aGUgc2VlZCBzdHJpbmcgb3IgYnVpbGQgb25lIGZyb20gbG9jYWwgZW50cm9weSBpZiBuZWVkZWQuXG4gIHZhciBzaG9ydHNlZWQgPSBtaXhrZXkoZmxhdHRlbihcbiAgICBvcHRpb25zLmVudHJvcHkgPyBbc2VlZCwgdG9zdHJpbmcocG9vbCldIDpcbiAgICAoc2VlZCA9PSBudWxsKSA/IGF1dG9zZWVkKCkgOiBzZWVkLCAzKSwga2V5KTtcblxuICAvLyBVc2UgdGhlIHNlZWQgdG8gaW5pdGlhbGl6ZSBhbiBBUkM0IGdlbmVyYXRvci5cbiAgdmFyIGFyYzQgPSBuZXcgQVJDNChrZXkpO1xuXG4gIC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJhbmRvbSBkb3VibGUgaW4gWzAsIDEpIHRoYXQgY29udGFpbnNcbiAgLy8gcmFuZG9tbmVzcyBpbiBldmVyeSBiaXQgb2YgdGhlIG1hbnRpc3NhIG9mIHRoZSBJRUVFIDc1NCB2YWx1ZS5cbiAgdmFyIHBybmcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbiA9IGFyYzQuZyhjaHVua3MpLCAgICAgICAgICAgICAvLyBTdGFydCB3aXRoIGEgbnVtZXJhdG9yIG4gPCAyIF4gNDhcbiAgICAgICAgZCA9IHN0YXJ0ZGVub20sICAgICAgICAgICAgICAgICAvLyAgIGFuZCBkZW5vbWluYXRvciBkID0gMiBeIDQ4LlxuICAgICAgICB4ID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgYW5kIG5vICdleHRyYSBsYXN0IGJ5dGUnLlxuICAgIHdoaWxlIChuIDwgc2lnbmlmaWNhbmNlKSB7ICAgICAgICAgIC8vIEZpbGwgdXAgYWxsIHNpZ25pZmljYW50IGRpZ2l0cyBieVxuICAgICAgbiA9IChuICsgeCkgKiB3aWR0aDsgICAgICAgICAgICAgIC8vICAgc2hpZnRpbmcgbnVtZXJhdG9yIGFuZFxuICAgICAgZCAqPSB3aWR0aDsgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZGVub21pbmF0b3IgYW5kIGdlbmVyYXRpbmcgYVxuICAgICAgeCA9IGFyYzQuZygxKTsgICAgICAgICAgICAgICAgICAgIC8vICAgbmV3IGxlYXN0LXNpZ25pZmljYW50LWJ5dGUuXG4gICAgfVxuICAgIHdoaWxlIChuID49IG92ZXJmbG93KSB7ICAgICAgICAgICAgIC8vIFRvIGF2b2lkIHJvdW5kaW5nIHVwLCBiZWZvcmUgYWRkaW5nXG4gICAgICBuIC89IDI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBsYXN0IGJ5dGUsIHNoaWZ0IGV2ZXJ5dGhpbmdcbiAgICAgIGQgLz0gMjsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHJpZ2h0IHVzaW5nIGludGVnZXIgbWF0aCB1bnRpbFxuICAgICAgeCA+Pj49IDE7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgd2UgaGF2ZSBleGFjdGx5IHRoZSBkZXNpcmVkIGJpdHMuXG4gICAgfVxuICAgIHJldHVybiAobiArIHgpIC8gZDsgICAgICAgICAgICAgICAgIC8vIEZvcm0gdGhlIG51bWJlciB3aXRoaW4gWzAsIDEpLlxuICB9O1xuXG4gIHBybmcuaW50MzIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGFyYzQuZyg0KSB8IDA7IH1cbiAgcHJuZy5xdWljayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJjNC5nKDQpIC8gMHgxMDAwMDAwMDA7IH1cbiAgcHJuZy5kb3VibGUgPSBwcm5nO1xuXG4gIC8vIE1peCB0aGUgcmFuZG9tbmVzcyBpbnRvIGFjY3VtdWxhdGVkIGVudHJvcHkuXG4gIG1peGtleSh0b3N0cmluZyhhcmM0LlMpLCBwb29sKTtcblxuICAvLyBDYWxsaW5nIGNvbnZlbnRpb246IHdoYXQgdG8gcmV0dXJuIGFzIGEgZnVuY3Rpb24gb2YgcHJuZywgc2VlZCwgaXNfbWF0aC5cbiAgcmV0dXJuIChvcHRpb25zLnBhc3MgfHwgY2FsbGJhY2sgfHxcbiAgICAgIGZ1bmN0aW9uKHBybmcsIHNlZWQsIGlzX21hdGhfY2FsbCwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgLy8gTG9hZCB0aGUgYXJjNCBzdGF0ZSBmcm9tIHRoZSBnaXZlbiBzdGF0ZSBpZiBpdCBoYXMgYW4gUyBhcnJheS5cbiAgICAgICAgICBpZiAoc3RhdGUuUykgeyBjb3B5KHN0YXRlLCBhcmM0KTsgfVxuICAgICAgICAgIC8vIE9ubHkgcHJvdmlkZSB0aGUgLnN0YXRlIG1ldGhvZCBpZiByZXF1ZXN0ZWQgdmlhIG9wdGlvbnMuc3RhdGUuXG4gICAgICAgICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weShhcmM0LCB7fSk7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGNhbGxlZCBhcyBhIG1ldGhvZCBvZiBNYXRoIChNYXRoLnNlZWRyYW5kb20oKSksIG11dGF0ZVxuICAgICAgICAvLyBNYXRoLnJhbmRvbSBiZWNhdXNlIHRoYXQgaXMgaG93IHNlZWRyYW5kb20uanMgaGFzIHdvcmtlZCBzaW5jZSB2MS4wLlxuICAgICAgICBpZiAoaXNfbWF0aF9jYWxsKSB7XG4gICAgICAgICAgbWF0aFtybmduYW1lXSA9IHBybmc7XG4gICAgICAgICAgcmV0dXJuIHNlZWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdGhlcndpc2UsIGl0IGlzIGEgbmV3ZXIgY2FsbGluZyBjb252ZW50aW9uLCBzbyByZXR1cm4gdGhlXG4gICAgICAgIC8vIHBybmcgZGlyZWN0bHkuXG4gICAgICAgIGVsc2UgcmV0dXJuIHBybmc7XG4gICAgICB9KShcbiAgcHJuZyxcbiAgc2hvcnRzZWVkLFxuICAnZ2xvYmFsJyBpbiBvcHRpb25zID8gb3B0aW9ucy5nbG9iYWwgOiAodGhpcyA9PSBtYXRoKSxcbiAgb3B0aW9ucy5zdGF0ZSk7XG59XG5cbi8vXG4vLyBBUkM0XG4vL1xuLy8gQW4gQVJDNCBpbXBsZW1lbnRhdGlvbi4gIFRoZSBjb25zdHJ1Y3RvciB0YWtlcyBhIGtleSBpbiB0aGUgZm9ybSBvZlxuLy8gYW4gYXJyYXkgb2YgYXQgbW9zdCAod2lkdGgpIGludGVnZXJzIHRoYXQgc2hvdWxkIGJlIDAgPD0geCA8ICh3aWR0aCkuXG4vL1xuLy8gVGhlIGcoY291bnQpIG1ldGhvZCByZXR1cm5zIGEgcHNldWRvcmFuZG9tIGludGVnZXIgdGhhdCBjb25jYXRlbmF0ZXNcbi8vIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBmcm9tIEFSQzQuICBJdHMgcmV0dXJuIHZhbHVlIGlzIGEgbnVtYmVyIHhcbi8vIHRoYXQgaXMgaW4gdGhlIHJhbmdlIDAgPD0geCA8ICh3aWR0aCBeIGNvdW50KS5cbi8vXG5mdW5jdGlvbiBBUkM0KGtleSkge1xuICB2YXIgdCwga2V5bGVuID0ga2V5Lmxlbmd0aCxcbiAgICAgIG1lID0gdGhpcywgaSA9IDAsIGogPSBtZS5pID0gbWUuaiA9IDAsIHMgPSBtZS5TID0gW107XG5cbiAgLy8gVGhlIGVtcHR5IGtleSBbXSBpcyB0cmVhdGVkIGFzIFswXS5cbiAgaWYgKCFrZXlsZW4pIHsga2V5ID0gW2tleWxlbisrXTsgfVxuXG4gIC8vIFNldCB1cCBTIHVzaW5nIHRoZSBzdGFuZGFyZCBrZXkgc2NoZWR1bGluZyBhbGdvcml0aG0uXG4gIHdoaWxlIChpIDwgd2lkdGgpIHtcbiAgICBzW2ldID0gaSsrO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCB3aWR0aDsgaSsrKSB7XG4gICAgc1tpXSA9IHNbaiA9IG1hc2sgJiAoaiArIGtleVtpICUga2V5bGVuXSArICh0ID0gc1tpXSkpXTtcbiAgICBzW2pdID0gdDtcbiAgfVxuXG4gIC8vIFRoZSBcImdcIiBtZXRob2QgcmV0dXJucyB0aGUgbmV4dCAoY291bnQpIG91dHB1dHMgYXMgb25lIG51bWJlci5cbiAgKG1lLmcgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIC8vIFVzaW5nIGluc3RhbmNlIG1lbWJlcnMgaW5zdGVhZCBvZiBjbG9zdXJlIHN0YXRlIG5lYXJseSBkb3VibGVzIHNwZWVkLlxuICAgIHZhciB0LCByID0gMCxcbiAgICAgICAgaSA9IG1lLmksIGogPSBtZS5qLCBzID0gbWUuUztcbiAgICB3aGlsZSAoY291bnQtLSkge1xuICAgICAgdCA9IHNbaSA9IG1hc2sgJiAoaSArIDEpXTtcbiAgICAgIHIgPSByICogd2lkdGggKyBzW21hc2sgJiAoKHNbaV0gPSBzW2ogPSBtYXNrICYgKGogKyB0KV0pICsgKHNbal0gPSB0KSldO1xuICAgIH1cbiAgICBtZS5pID0gaTsgbWUuaiA9IGo7XG4gICAgcmV0dXJuIHI7XG4gICAgLy8gRm9yIHJvYnVzdCB1bnByZWRpY3RhYmlsaXR5LCB0aGUgZnVuY3Rpb24gY2FsbCBiZWxvdyBhdXRvbWF0aWNhbGx5XG4gICAgLy8gZGlzY2FyZHMgYW4gaW5pdGlhbCBiYXRjaCBvZiB2YWx1ZXMuICBUaGlzIGlzIGNhbGxlZCBSQzQtZHJvcFsyNTZdLlxuICAgIC8vIFNlZSBodHRwOi8vZ29vZ2xlLmNvbS9zZWFyY2g/cT1yc2ErZmx1aHJlcityZXNwb25zZSZidG5JXG4gIH0pKHdpZHRoKTtcbn1cblxuLy9cbi8vIGNvcHkoKVxuLy8gQ29waWVzIGludGVybmFsIHN0YXRlIG9mIEFSQzQgdG8gb3IgZnJvbSBhIHBsYWluIG9iamVjdC5cbi8vXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC5pID0gZi5pO1xuICB0LmogPSBmLmo7XG4gIHQuUyA9IGYuUy5zbGljZSgpO1xuICByZXR1cm4gdDtcbn07XG5cbi8vXG4vLyBmbGF0dGVuKClcbi8vIENvbnZlcnRzIGFuIG9iamVjdCB0cmVlIHRvIG5lc3RlZCBhcnJheXMgb2Ygc3RyaW5ncy5cbi8vXG5mdW5jdGlvbiBmbGF0dGVuKG9iaiwgZGVwdGgpIHtcbiAgdmFyIHJlc3VsdCA9IFtdLCB0eXAgPSAodHlwZW9mIG9iaiksIHByb3A7XG4gIGlmIChkZXB0aCAmJiB0eXAgPT0gJ29iamVjdCcpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhvYmopO1xuICAgIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHByb3ApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICBmbGF0dGVuKFxuICAgICAgICAgICAgICAgIG9ialtcbiAgICAgICAgICAgICAgICAgICAgcHJvcFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgZGVwdGggLSAxKVxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbiAgcmV0dXJuIChyZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogdHlwID09ICdzdHJpbmcnID8gb2JqIDogb2JqICsgJ1xcMCcpO1xufVxuXG4vL1xuLy8gbWl4a2V5KClcbi8vIE1peGVzIGEgc3RyaW5nIHNlZWQgaW50byBhIGtleSB0aGF0IGlzIGFuIGFycmF5IG9mIGludGVnZXJzLCBhbmRcbi8vIHJldHVybnMgYSBzaG9ydGVuZWQgc3RyaW5nIHNlZWQgdGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoZSByZXN1bHQga2V5LlxuLy9cbmZ1bmN0aW9uIG1peGtleShzZWVkLCBrZXkpIHtcbiAgdmFyIHN0cmluZ3NlZWQgPSBzZWVkICsgJycsIHNtZWFyLCBqID0gMDtcbiAgd2hpbGUgKGogPCBzdHJpbmdzZWVkLmxlbmd0aCkge1xuICAgIGtleVttYXNrICYgal0gPVxuICAgICAgbWFzayAmICgoc21lYXIgXj0ga2V5W21hc2sgJiBqXSAqIDE5KSArIHN0cmluZ3NlZWQuY2hhckNvZGVBdChqKyspKTtcbiAgfVxuICByZXR1cm4gdG9zdHJpbmcoa2V5KTtcbn1cblxuLy9cbi8vIGF1dG9zZWVkKClcbi8vIFJldHVybnMgYW4gb2JqZWN0IGZvciBhdXRvc2VlZGluZywgdXNpbmcgd2luZG93LmNyeXB0byBhbmQgTm9kZSBjcnlwdG9cbi8vIG1vZHVsZSBpZiBhdmFpbGFibGUuXG4vL1xuZnVuY3Rpb24gYXV0b3NlZWQoKSB7XG4gIHRyeSB7XG5cbiAgICBub2RlY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gICAgdmFyIG91dCA9IGNyeXB0by5yYW5kb21CeXRlXG4gICAgaWYgKG5vZGVjcnlwdG8gJiYgKG91dCA9IG5vZGVjcnlwdG8ucmFuZG9tQnl0ZXMpKSB7XG4gICAgICAvLyBUaGUgdXNlIG9mICdvdXQnIHRvIHJlbWVtYmVyIHJhbmRvbUJ5dGVzIG1ha2VzIHRpZ2h0IG1pbmlmaWVkIGNvZGUuXG4gICAgICBvdXQgPSBvdXQod2lkdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgPSBuZXcgVWludDhBcnJheSh3aWR0aCk7XG4gICAgICAoZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG8pLmdldFJhbmRvbVZhbHVlcyhvdXQpO1xuICAgIH1cbiAgICByZXR1cm4gdG9zdHJpbmcob3V0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciBicm93c2VyID0gZ2xvYmFsLm5hdmlnYXRvcixcbiAgICAgICAgcGx1Z2lucyA9IGJyb3dzZXIgJiYgYnJvd3Nlci5wbHVnaW5zO1xuICAgIHJldHVybiBbK25ldyBEYXRlLCBnbG9iYWwsIHBsdWdpbnMsIGdsb2JhbC5zY3JlZW4sIHRvc3RyaW5nKHBvb2wpXTtcbiAgfVxufVxuXG4vL1xuLy8gdG9zdHJpbmcoKVxuLy8gQ29udmVydHMgYW4gYXJyYXkgb2YgY2hhcmNvZGVzIHRvIGEgc3RyaW5nXG4vL1xuZnVuY3Rpb24gdG9zdHJpbmcoYSkge1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSgwLCBhKTtcbn1cblxuLy9cbi8vIFdoZW4gc2VlZHJhbmRvbS5qcyBpcyBsb2FkZWQsIHdlIGltbWVkaWF0ZWx5IG1peCBhIGZldyBiaXRzXG4vLyBmcm9tIHRoZSBidWlsdC1pbiBSTkcgaW50byB0aGUgZW50cm9weSBwb29sLiAgQmVjYXVzZSB3ZSBkb1xuLy8gbm90IHdhbnQgdG8gaW50ZXJmZXJlIHdpdGggZGV0ZXJtaW5pc3RpYyBQUk5HIHN0YXRlIGxhdGVyLFxuLy8gc2VlZHJhbmRvbSB3aWxsIG5vdCBjYWxsIG1hdGgucmFuZG9tIG9uIGl0cyBvd24gYWdhaW4gYWZ0ZXJcbi8vIGluaXRpYWxpemF0aW9uLlxuLy9cbm1peGtleShtYXRoLnJhbmRvbSgpLCBwb29sKTtcblxuLy9cbi8vIE5vZGVqcyBhbmQgQU1EIHN1cHBvcnQ6IGV4cG9ydCB0aGUgaW1wbGVtZW50YXRpb24gYXMgYSBtb2R1bGUgdXNpbmdcbi8vIGVpdGhlciBjb252ZW50aW9uLlxuLy9cbmlmICgodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBzZWVkcmFuZG9tO1xuICAvLyBXaGVuIGluIG5vZGUuanMsIHRyeSB1c2luZyBjcnlwdG8gcGFja2FnZSBmb3IgYXV0b3NlZWRpbmcuXG4gIHRyeSB7XG4gICAgbm9kZWNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuICB9IGNhdGNoIChleCkge31cbn0gZWxzZSBpZiAoKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBzZWVkcmFuZG9tOyB9KTtcbn0gZWxzZSB7XG4gIC8vIFdoZW4gaW5jbHVkZWQgYXMgYSBwbGFpbiBzY3JpcHQsIHNldCB1cCBNYXRoLnNlZWRyYW5kb20gZ2xvYmFsLlxuICBtYXRoWydzZWVkJyArIHJuZ25hbWVdID0gc2VlZHJhbmRvbTtcbn1cblxuICAvLyBtb2R1bGUuZXhwb3J0cyA9IHNlZWRyYW5kb207XG5cbi8vIEVuZCBhbm9ueW1vdXMgc2NvcGUsIGFuZCBwYXNzIGluaXRpYWwgdmFsdWVzLlxufSkoXG4gIC8vIGdsb2JhbDogYHNlbGZgIGluIGJyb3dzZXJzIChpbmNsdWRpbmcgc3RyaWN0IG1vZGUgYW5kIHdlYiB3b3JrZXJzKSxcbiAgLy8gb3RoZXJ3aXNlIGB0aGlzYCBpbiBOb2RlIGFuZCBvdGhlciBlbnZpcm9ubWVudHNcbiAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgPyBzZWxmIDogdGhpcyxcbiAgW10sICAgICAvLyBwb29sOiBlbnRyb3B5IHBvb2wgc3RhcnRzIGVtcHR5XG4gIE1hdGggICAgLy8gbWF0aDogcGFja2FnZSBjb250YWluaW5nIHJhbmRvbSwgcG93LCBhbmQgc2VlZHJhbmRvbVxuKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZHVtbXkoKXtcbiAgLy9cbiAgLy8gZm9yKGxldCBpID0gMDsgaSA8IDEwOyBpKyspXG4gIC8vIGxldCBjID0gY3J5cHRvO1xuICAvLyBjb25zb2xlLmxvZyhcImRvIHRoaW5nc1wiKTtcbn0iLCJleHBvcnQgY2xhc3MgQXV0b21hdGFfRm9yd2FyZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihmb3J3YXJkZXJfbmFtZSkge1xuICAgICAgICB0aGlzLnNldF9hY3RpdmVfZnVuY3Rpb24gPSAoKSA9PiB7IH07XG4gICAgICAgIHRoaXMuZm9yd2FyZGVyX25hbWUgPSBmb3J3YXJkZXJfbmFtZTtcbiAgICB9XG4gICAgaW5wdXQocykge1xuICAgICAgICB0aGlzLmF1dG9tYXRhLmlucHV0KHMpO1xuICAgIH1cbiAgICBhZGRfYWN0aXZhdGlvbl9mdW5jdGlvbih0b19hZGQpIHtcbiAgICAgICAgLy8gbGV0IG9sZF9hY3RpdmF0aW9uX2Z1bmN0aW9uID0gdGhpcy5zZXRfYWN0aXZlX2Z1bmN0aW9uO1xuICAgICAgICAvLyB0aGlzLnNldF9hY3RpdmVfZnVuY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgIC8vICAgICBvbGRfYWN0aXZhdGlvbl9mdW5jdGlvbigpO1xuICAgICAgICAvLyAgICAgdG9fYWRkKCk7XG4gICAgICAgIC8vIH1cbiAgICB9XG4gICAgc2V0X2FjdGl2ZSgpIHsgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0b21hdGFfRm9yd2FyZGVyLmpzLm1hcCIsImltcG9ydCB7IGNvbnRhaW5zIH0gZnJvbSBcIi4uL3V0aWxzL1V0aWxzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHsgfVxuZXhwb3J0IGNsYXNzIEF1dG9tYXRhIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X3N0YXRlID0gLTE7XG4gICAgICAgIHRoaXMudHJhbnNpdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGFydF9zdGF0ZSA9IGNvbmZpZy5zdGFydDtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSBjb25maWcuc3RhdGVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb25zLnB1c2goW10pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IHQgb2YgY29uZmlnLnRyYW5zaXRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb25zW3QuZnJvbV0ucHVzaCh0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluaXRfZnVuY3Rpb24gPSBjb25maWcuaW5pdF9mdW5jdGlvbjtcbiAgICAgICAgdGhpcy5lbmRfc3RhdGVzID0gY29uZmlnLmVuZF9zdGF0ZXM7XG4gICAgfVxuICAgIGlucHV0KGlucHV0KSB7XG4gICAgICAgIGxldCBtYXRjaGluZ190cmFuc2l0aW9uID0gdGhpcy5maXJzdF9tYXRjaChpbnB1dCk7XG4gICAgICAgIGxldCBzdGF0ZV9iZWZvcmUgPSB0aGlzLmN1cnJlbnRfc3RhdGU7XG4gICAgICAgIGlmIChtYXRjaGluZ190cmFuc2l0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9zdGF0ZSA9IG1hdGNoaW5nX3RyYW5zaXRpb24ubmV4dF9zdGF0ZTsgLy8gZ28gdG8gbmV4dCBzdGF0ZVxuICAgICAgICAgICAgbWF0Y2hpbmdfdHJhbnNpdGlvbi5hY3Rpb24oc3RhdGVfYmVmb3JlLCBpbnB1dCwgdGhpcy5jdXJyZW50X3N0YXRlKTsgLy8gZ28gdG8gbmV4dCBzdGF0ZVxuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRfc3RhdGUgPSB0aGlzLnN0YXJ0X3N0YXRlO1xuICAgIH1cbiAgICBmaXJzdF9tYXRjaChpbnB1dCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudHJhbnNpdGlvbnNbdGhpcy5jdXJyZW50X3N0YXRlXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNpdGlvbnNbdGhpcy5jdXJyZW50X3N0YXRlXVtpXS5hY2NlcHRzKGlucHV0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2l0aW9uc1t0aGlzLmN1cnJlbnRfc3RhdGVdW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRfc3RhdGUgPSB0aGlzLnN0YXJ0X3N0YXRlO1xuICAgICAgICB0aGlzLmluaXRfZnVuY3Rpb24oKTtcbiAgICB9XG4gICAgYWRkX2ZpbmlzaF9hY3Rpb24oYWN0aW9uKSB7XG4gICAgICAgIGZvciAobGV0IHRyYW5zaXRpb25zIG9mIHRoaXMudHJhbnNpdGlvbnMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHRyYW5zaXRpb24gb2YgdHJhbnNpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc190cmFuc2l0aW9uX3RvX2VuZCh0cmFuc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZm9ybWVyX2FjdGlvbiA9IHRyYW5zaXRpb24uYWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmFjdGlvbiA9IChmcm9tLCBpbnB1dCwgbmV4dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWVyX2FjdGlvbihmcm9tLCBpbnB1dCwgbmV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNfdHJhbnNpdGlvbl90b19lbmQodHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gY29udGFpbnModGhpcy5lbmRfc3RhdGVzLCB0cmFuc2l0aW9uLm5leHRfc3RhdGUpO1xuICAgIH1cbiAgICBhZGRfYWN0aW9uX3RvX3RyYW5zaXRpb25zKGlzX3RhcmdldF90cmFuc2l0aW9uLCBhY3Rpb24pIHtcbiAgICAgICAgZm9yIChsZXQgdHJhbnNpdGlvbnMgb2YgdGhpcy50cmFuc2l0aW9ucykge1xuICAgICAgICAgICAgZm9yIChsZXQgdHJhbnNpdGlvbiBvZiB0cmFuc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChpc190YXJnZXRfdHJhbnNpdGlvbih0cmFuc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZm9ybWVyX2FjdGlvbiA9IHRyYW5zaXRpb24uYWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmFjdGlvbiA9IChmcm9tLCBpbnB1dCwgbmV4dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWVyX2FjdGlvbihmcm9tLCBpbnB1dCwgbmV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdXRvbWF0YS5qcy5tYXAiLCJpbXBvcnQgeyBBdXRvbWF0YV9Gb3J3YXJkZXIgfSBmcm9tIFwiLi4vQXV0b21hdGEvQXV0b21hdGFfRm9yd2FyZGVyLmpzXCI7XG5pbXBvcnQgeyBBdXRvbWF0YSB9IGZyb20gXCIuLi9BdXRvbWF0YS9BdXRvbWF0YS5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7IH1cbi8qXG4gICAgSSBkb24ndCBkbyBhbnl0aGluZyAtIEkgYW0ganVzdCBhIHN1cGVyY2xhc3NcbiAqL1xuZXhwb3J0IGNsYXNzIEF1dG9tYXRhX1dpdGhfT3V0cHV0X0ZvcndhcmRlciBleHRlbmRzIEF1dG9tYXRhX0ZvcndhcmRlciB7XG4gICAgY29uc3RydWN0b3IoZm9yd2FyZGVyX25hbWUsIG1lYXN1cmVtZW50LCBwcmVfcnVuX2luc3RydWN0aW9ucywgcG9zdF9ydW5faW5zdHJ1Y3Rpb25zKSB7XG4gICAgICAgIHN1cGVyKGZvcndhcmRlcl9uYW1lKTtcbiAgICAgICAgdGhpcy5wcmVfcnVuX2luc3RydWN0aW9ucyA9IHByZV9ydW5faW5zdHJ1Y3Rpb25zO1xuICAgICAgICB0aGlzLnBvc3RfcnVuX2luc3RydWN0aW9ucyA9IHBvc3RfcnVuX2luc3RydWN0aW9ucztcbiAgICAgICAgdGhpcy5tZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50O1xuICAgICAgICB0aGlzLmF1dG9tYXRhID0gdGhpcy5jcmVhdGVfYXV0b21hdGEoKTsgLy9uZXcgQXV0b21hdGEodGhpcy5hdXRvbWF0YV9jb25maWd1cmF0b3IoKSk7XG4gICAgICAgIHRoaXMuYXV0b21hdGEuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICBzZXRfYWN0aXZlKCkge1xuICAgICAgICB0aGlzLnNob3dfaW50cm8oKTtcbiAgICB9XG4gICAgY3JlYXRlX2F1dG9tYXRhKCkge1xuICAgICAgICByZXR1cm4gbmV3IEF1dG9tYXRhKHRoaXMuYXV0b21hdGFfY29uZmlndXJhdG9yKCkpO1xuICAgIH1cbiAgICBvdXRwdXRfd3JpdGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZWFzdXJlbWVudC5vdXRwdXRfd3JpdGVyKCk7XG4gICAgfVxuICAgIHNob3dfaW50cm8oKSB7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLmNsZWFyX2FsbCgpO1xuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIoKS5wcmludF9zdHJpbmdfdG9fc3RhdGUodGhpcy5mb3J3YXJkZXJfbmFtZSk7XG4gICAgICAgIHRoaXMucHJlX3J1bl9pbnN0cnVjdGlvbnMoKTtcbiAgICB9XG4gICAgZW1wdHlfc2NyZWVuX2FuZF9zaG93X2luc3RydWN0aW9ucyhjb21tYW5kKSB7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLmNsZWFyX3N0YXRlKCk7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLmNsZWFyX3N0YWdlKCk7XG4gICAgICAgIGlmIChjb21tYW5kID09IG51bGwgfHwgY29tbWFuZCA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNvbWV0aGluZyBpcyBzdHJhbmdlXCIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjb21tYW5kKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyLmpzLm1hcCIsImltcG9ydCB7IEF1dG9tYXRhIH0gZnJvbSBcIi4vQXV0b21hdGEuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkgeyB9XG5leHBvcnQgY2xhc3MgQXV0b21hdGFfQ29uZmlndXJhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihzdGF0ZXMsIHN0YXJ0LCBpbml0X2Z1bmN0aW9uLCB0cmFuc2l0aW9ucywgZW5kX3N0YXRlcykge1xuICAgICAgICB0aGlzLnN0YXRlcyA9IHN0YXRlcztcbiAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aGlzLmluaXRfZnVuY3Rpb24gPSBpbml0X2Z1bmN0aW9uO1xuICAgICAgICB0aGlzLnRyYW5zaXRpb25zID0gdHJhbnNpdGlvbnM7XG4gICAgICAgIHRoaXMuZW5kX3N0YXRlcyA9IGVuZF9zdGF0ZXM7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9hdXRvbWF0YShzdGF0ZXMsIHN0YXJ0LCBpbml0X2Z1bmN0aW9uLCB0cmFuc2l0aW9ucywgZW5kX3N0YXRlcykge1xuICAgIHJldHVybiBuZXcgQXV0b21hdGEobmV3IEF1dG9tYXRhX0NvbmZpZ3VyYXRvcihzdGF0ZXMsIHN0YXJ0LCBpbml0X2Z1bmN0aW9uLCB0cmFuc2l0aW9ucywgZW5kX3N0YXRlcykpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0b21hdGFfQ29uZmlndXJhdG9yLmpzLm1hcCIsImltcG9ydCB7IGNvbnRhaW5zIH0gZnJvbSBcIi4uL3V0aWxzL1V0aWxzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHsgfVxuY2xhc3MgVHJhbnNpdGlvbl9BY2NlcHRvciB7XG59XG5jbGFzcyBUcmFuc2l0aW9uX1N0cmluZ3NfQWNjZXB0b3IgZXh0ZW5kcyBUcmFuc2l0aW9uX0FjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihzdHJpbmdzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYWNjZXB0ZWRfc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgfVxuICAgIGFjY2VwdHMoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zKHRoaXMuYWNjZXB0ZWRfc3RyaW5ncywgaW5wdXQpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUcmFuc2l0aW9uX0FjY2VwdG9yX0Z1bmN0aW9uIGV4dGVuZHMgVHJhbnNpdGlvbl9BY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IoYWNjZXB0b3JfZnVuY3Rpb24pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hY2NlcHRvcl9mdW5jdGlvbiA9IGFjY2VwdG9yX2Z1bmN0aW9uO1xuICAgIH1cbiAgICBhY2NlcHRzKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjY2VwdG9yX2Z1bmN0aW9uKGlucHV0KTtcbiAgICB9XG59XG5jbGFzcyBUcmFuc2l0aW9uX1N0cmluZ3NfQWNjZXB0c19BTEwgZXh0ZW5kcyBUcmFuc2l0aW9uX0FjY2VwdG9yIHtcbiAgICBhY2NlcHRzKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBrZXlzKHN0cmluZ3MpIHtcbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb25fU3RyaW5nc19BY2NlcHRvcihzdHJpbmdzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpZl9mdW5jKGYpIHtcbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb25fQWNjZXB0b3JfRnVuY3Rpb24oZik7XG59XG5leHBvcnQgZnVuY3Rpb24gZWFjaF9jaGFyKGNoYXJsaXN0KSB7XG4gICAgdmFyIGNoYXJzID0gW107XG4gICAgZm9yIChsZXQgYSBvZiBjaGFybGlzdCkge1xuICAgICAgICBjaGFycy5wdXNoKGEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb25fU3RyaW5nc19BY2NlcHRvcihjaGFycyk7XG59XG5leHBvcnQgY2xhc3MgVHJhbnNpdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZnJvbSwgYWNjZXB0b3IsIG5leHRfc3RhdGUsIGFjdGlvbikge1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLmFjY2VwdG9yID0gYWNjZXB0b3I7XG4gICAgICAgIHRoaXMubmV4dF9zdGF0ZSA9IG5leHRfc3RhdGU7XG4gICAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uO1xuICAgIH1cbiAgICA7XG4gICAgaXNfdmFsaWRfaW5wdXQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXB0b3IuYWNjZXB0cyhpbnB1dCk7XG4gICAgfVxuICAgIGFjY2VwdHMoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXB0b3IuYWNjZXB0cyhpbnB1dCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIFNpbXBsZV9UcmFuc2l0aW9uKGZyb20sIGFjY2VwdF9pbnB1dF9mdW5jdGlvbiwgbmV4dF9zdGF0ZSwgYWN0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGZyb20sIG5ldyBUcmFuc2l0aW9uX0FjY2VwdG9yX0Z1bmN0aW9uKGFjY2VwdF9pbnB1dF9mdW5jdGlvbiksIG5leHRfc3RhdGUsIChzLCBpLCBuKSA9PiBhY3Rpb24oaSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFjY2VwdF9hbGwoKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uX1N0cmluZ3NfQWNjZXB0c19BTEwoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkb19ub3RoaW5nKGF0LCBpbnB1dCwgbmV4dCkgeyB9XG5leHBvcnQgZnVuY3Rpb24gcGFzcyhmKSB7XG4gICAgcmV0dXJuIChhdCwgaW5wdXQsIG5leHQpID0+IGYoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tKGZyb20pIHtcbiAgICAvLyBmcm9tKDApLmtleShcIkFycm93UmlnaHRcIikuY2hlY2soKCk9PmN1cnJlbnRfcGFnZTx0ZXh0cy5sZW5ndGgtMSkpLm5leHRfc3RhdGUoMCkuYWN0aW9uKCgpPT57Y3VycmVudF9wYWdlKys7IHByaW50X3BhZ2UodGV4dHNbY3VycmVudF9wYWdlXSk7fSlcbiAgICByZXR1cm4ge1xuICAgICAgICB0bzogKHRvKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG9uOiAoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZjogKGNoZWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG86IChhY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTaW1wbGVfVHJhbnNpdGlvbihmcm9tLCAoaW5wdXQpID0+IHsgcmV0dXJuIGlucHV0ID09IGtleSAmJiBjaGVjayhpbnB1dCk7IH0sIHRvLCBhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkbzogKGFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTaW1wbGVfVHJhbnNpdGlvbihmcm9tLCAoaW5wdXQpID0+IHsgcmV0dXJuIGlucHV0ID09IGtleTsgfSwgdG8sIGFjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbl9hbnk6IChrZXlzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZjogKGNoZWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG86IChhY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTaW1wbGVfVHJhbnNpdGlvbihmcm9tLCAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbnMoa2V5cywgaW5wdXQpICYmIGNoZWNrKGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRvLCBhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkbzogKGFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTaW1wbGVfVHJhbnNpdGlvbihmcm9tLCAoaW5wdXQpID0+IHsgcmV0dXJuIGNvbnRhaW5zKGtleXMsIGlucHV0KTsgfSwgdG8sIGFjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNpdGlvbnMuanMubWFwIiwiaW1wb3J0IHsgQXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyIH0gZnJvbSBcIi4vQXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyLmpzXCI7XG5pbXBvcnQgeyBBdXRvbWF0YV9Db25maWd1cmF0b3IgfSBmcm9tIFwiLi4vQXV0b21hdGEvQXV0b21hdGFfQ29uZmlndXJhdG9yLmpzXCI7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSBcIi4uL0F1dG9tYXRhL1RyYW5zaXRpb25zLmpzXCI7XG5sZXQgU0hPV19JTlRSTyA9IDA7XG5sZXQgU0hPV19RVUVTVElPTiA9IDE7XG5sZXQgQU5TV0VSRURfSU5DT01QTEVURSA9IDI7XG5sZXQgQU5TV0VSRVNfQ09NUExFVEUgPSAzO1xubGV0IEVWRVJZVEhJTkdfRE9ORSA9IDQ7XG5leHBvcnQgY2xhc3MgUXVlc3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKHZhcmlhYmxlX25hbWUsIHF1ZXN0aW9uX3RleHQpIHtcbiAgICAgICAgdGhpcy5hbnN3ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnZhcmlhYmxlX25hbWUgPSB2YXJpYWJsZV9uYW1lO1xuICAgICAgICB0aGlzLnF1ZXN0aW9uX3RleHQgPSBxdWVzdGlvbl90ZXh0O1xuICAgIH1cbiAgICBzdG9yZV9hbnN3ZXIoKSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy52YXJpYWJsZV9uYW1lKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmFuc3dlciA9IGVsZW1lbnQudmFsdWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFsdGVybmF0aXZlcyBleHRlbmRzIFF1ZXN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih2YXJpYWJsZV9uYW1lLCBxdWVzdGlvbl90ZXh0LCBhbHRlcm5hdGl2ZXMpIHtcbiAgICAgICAgc3VwZXIodmFyaWFibGVfbmFtZSwgcXVlc3Rpb25fdGV4dCk7XG4gICAgICAgIHRoaXMuYWx0ZXJuYXRpdmVzID0gYWx0ZXJuYXRpdmVzO1xuICAgIH1cbiAgICBpbnB1dF9odG1sKCkge1xuICAgICAgICBsZXQgaHRtbF9zdHJpbmcgPSBcIjxzZWxlY3QgaWQ9XFxcIlwiICsgdGhpcy52YXJpYWJsZV9uYW1lICsgXCJcXFwiPlwiO1xuICAgICAgICBodG1sX3N0cmluZyArPSBcIjxvcHRpb24gZGlzYWJsZWQgc2VsZWN0ZWQgdmFsdWU+IC0tIHNlbGVjdCBhbiBvcHRpb24gLS0gPC9vcHRpb24+XCI7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIHRoaXMuYWx0ZXJuYXRpdmVzLmZvckVhY2goKGEpID0+IGh0bWxfc3RyaW5nICs9IFwiPG9wdGlvbiB2YWx1ZT1cIiArIGluZGV4KysgKyBcIj5cIiArIGEgKyBcIjwvb3B0aW9uPlwiKTtcbiAgICAgICAgaHRtbF9zdHJpbmcgKz0gKFwiPC9zZWxlY3Q+XCIpO1xuICAgICAgICByZXR1cm4gaHRtbF9zdHJpbmc7XG4gICAgfVxuICAgIHN0b3JlX2Fuc3dlcigpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnZhcmlhYmxlX25hbWUpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuYW5zd2VyID0gdGhpcy5hbHRlcm5hdGl2ZXNbZWxlbWVudC52YWx1ZV07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEluZm9ybWF0aW9uIGV4dGVuZHMgUXVlc3Rpb24ge1xuICAgIGh0bWxfc3RyaW5nKCkge1xuICAgICAgICBsZXQgaHRtbF9zdHJpbmcgPSBcIjxwPldlIGhhdmUgb25lIHF1ZXN0aW9uIHRvIHlvdS48L3A+XCI7XG4gICAgICAgIHJldHVybiBodG1sX3N0cmluZztcbiAgICB9XG4gICAgaW5wdXRfaHRtbCgpIHtcbiAgICAgICAgbGV0IGh0bWxfc3RyaW5nID0gXCI8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgaWQ9XFxcIlwiICsgdGhpcy52YXJpYWJsZV9uYW1lICsgXCJcXFwiPlwiO1xuICAgICAgICByZXR1cm4gaHRtbF9zdHJpbmc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHF1ZXN0aW9uX3RleHQpIHtcbiAgICAgICAgc3VwZXIobnVsbCwgcXVlc3Rpb25fdGV4dCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZyZWV0ZXh0IGV4dGVuZHMgUXVlc3Rpb24ge1xuICAgIGh0bWxfc3RyaW5nKCkge1xuICAgIH1cbiAgICBpbnB1dF9odG1sKCkge1xuICAgICAgICBsZXQgaHRtbF9zdHJpbmcgPSBcIjxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBpZD1cXFwiXCIgKyB0aGlzLnZhcmlhYmxlX25hbWUgKyBcIlxcXCI+XCI7XG4gICAgICAgIHJldHVybiBodG1sX3N0cmluZztcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUXVlc3Rpb25uYWlyZV9Gb3J3YXJkZXIgZXh0ZW5kcyBBdXRvbWF0YV9XaXRoX091dHB1dF9Gb3J3YXJkZXIge1xuICAgIGNvbnN0cnVjdG9yKHF1ZXN0aW9ucywgbWVhc3VyZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoXCJRdWVzdGlvbm5haXJlXCIsIG1lYXN1cmVtZW50LCAoKSA9PiBtZWFzdXJlbWVudC5vdXRwdXRfd3JpdGVyKCkucHJpbnRfaHRtbF9vbl9zdGFnZShcIlBsZWFzZSwgYW5zd2VyIHRoZSBmb2xsb3dpbmcgcXVlc3Rpb25zLjxicj5cIiksICgpID0+IG1lYXN1cmVtZW50Lm91dHB1dF93cml0ZXIoKS5wcmludF9odG1sX29uX3N0YWdlKFwiVGhhbmsgeW91IGZvciBhbnN3ZXJpbmcgdGhlIHF1ZXN0aW9ucy5cIikpO1xuICAgICAgICB0aGlzLmN1cnJlbnRfcXVlc3Rpb25fbnVtYmVyID0gLTE7XG4gICAgICAgIHRoaXMucXVlc3Rpb25zID0gcXVlc3Rpb25zO1xuICAgIH1cbiAgICBhdXRvbWF0YV9jb25maWd1cmF0b3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXV0b21hdGFfQ29uZmlndXJhdG9yKFtTSE9XX0lOVFJPLCBTSE9XX1FVRVNUSU9OLCBBTlNXRVJFRF9JTkNPTVBMRVRFLCBBTlNXRVJFU19DT01QTEVURSwgRVZFUllUSElOR19ET05FXSwgU0hPV19JTlRSTywgKCkgPT4geyB9LCB0aGlzLnRyYW5zaXRpb25zKCksIFtFVkVSWVRISU5HX0RPTkVdKTtcbiAgICB9XG4gICAgdHJhbnNpdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBmcm9tKFNIT1dfSU5UUk8pLnRvKEVWRVJZVEhJTkdfRE9ORSlcbiAgICAgICAgICAgICAgICAub24oXCJET05FXCIpXG4gICAgICAgICAgICAgICAgLmlmKChpKSA9PiB0cnVlKVxuICAgICAgICAgICAgICAgIC5kbygoaSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkX3Jlc3VsdF90b19xdWVzdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZHVtbXlcIik7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgc2hvd19pbnRybygpIHtcbiAgICAgICAgc3VwZXIuc2hvd19pbnRybygpO1xuICAgICAgICBsZXQgaHRtbF9zdHJpbmcgPSB0aGlzLmNyZWF0ZV9xdWVzdGlvbm5haXJlX2h0bWxfc3RyaW5nKCk7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLnByaW50X2h0bWxfb25fc3RhZ2UoaHRtbF9zdHJpbmcpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkRPTkVcIikub25jbGljayA9ICgpID0+IHRoaXMuaW5wdXQoXCJET05FXCIpO1xuICAgICAgICA7XG4gICAgfVxuICAgIHNob3dfb3V0cm8oKSB7XG4gICAgfVxuICAgIGNyZWF0ZV9xdWVzdGlvbm5haXJlX2h0bWxfc3RyaW5nKCkge1xuICAgICAgICBsZXQgaHRtbF9zdHJpbmcgPSBcIjxmaWVsZHNldD48bGVnZW5kPlF1ZXN0aW9ubmFpcmU8L2xlZ2VuZD48ZGl2IGRpc3BsYXk6IGlubGluZS1ibG9jazs+PHRhYmxlPlwiO1xuICAgICAgICB0aGlzLnF1ZXN0aW9ucy5mb3JFYWNoKChxKSA9PiBodG1sX3N0cmluZyArPSBcIjx0cj48dGQ+XCIgKyBxLnF1ZXN0aW9uX3RleHQgKyBcIjwvdGQ+XCIgK1xuICAgICAgICAgICAgXCI8dGQ+XCIgKyBxLmlucHV0X2h0bWwoKSArIFwiPC90ZD48L3RyPlwiKTtcbiAgICAgICAgaHRtbF9zdHJpbmcgKz0gXCI8L3RhYmxlPjwvZGl2PjwvZmllbGRzZXQ+PGJyPjxidXR0b24gaWQ9J0RPTkUnPk9rIC0gYWxsIHF1ZXN0aW9ucyBhbnN3ZXJlZDwvYnV0dG9uPlwiO1xuICAgICAgICByZXR1cm4gaHRtbF9zdHJpbmc7XG4gICAgfVxuICAgIGFkZF9yZXN1bHRfdG9fcXVlc3Rpb24oKSB7XG4gICAgICAgIGZvciAobGV0IHF1ZXN0aW9uIG9mIHRoaXMucXVlc3Rpb25zKSB7XG4gICAgICAgICAgICBxdWVzdGlvbi5zdG9yZV9hbnN3ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVF1ZXN0aW9ubmFpcmVfRm9yd2FyZGVyLmpzLm1hcCIsImltcG9ydCBkdW1teSBmcm9tIFwiLi4vLi4vbW9kdWxlc19oYXJkX2ltcG9ydC9zZWVkcmFuZG9tL3NlZWRyYW5kb20uanNcIjtcbmltcG9ydCB7IGNvbnZlcnRfc3RyaW5nX3RvX2h0bWxfc3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxzL1V0aWxzLmpzXCI7XG5pbXBvcnQgeyBBbHRlcm5hdGl2ZXMsIEZyZWV0ZXh0LCBJbmZvcm1hdGlvbiB9IGZyb20gXCIuLi9BdXRvbWF0YV9Gb3J3YXJkZXJzL1F1ZXN0aW9ubmFpcmVfRm9yd2FyZGVyLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHsgfVxuZXhwb3J0IHZhciBWQVJJQUJMRV9UWVBFO1xuKGZ1bmN0aW9uIChWQVJJQUJMRV9UWVBFKSB7XG4gICAgVkFSSUFCTEVfVFlQRVtWQVJJQUJMRV9UWVBFW1wiU1RSSU5HXCJdID0gMV0gPSBcIlNUUklOR1wiO1xuICAgIFZBUklBQkxFX1RZUEVbVkFSSUFCTEVfVFlQRVtcIk5VTUJFUlwiXSA9IDJdID0gXCJOVU1CRVJcIjtcbn0pKFZBUklBQkxFX1RZUEUgfHwgKFZBUklBQkxFX1RZUEUgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIFJlYWN0aW9uX1RpbWUoaW5wdXQpIHtcbiAgICByZXR1cm4gKHdyaXRlcikgPT4gbmV3IFJlYWN0aW9uX1RpbWVfTWVhc3VyZW1lbnQoaW5wdXQod3JpdGVyKSk7XG59XG47XG5leHBvcnQgZnVuY3Rpb24gUmVhY3Rpb25fVGltZV9XaXRoX1BlbmFsdHkoaW5wdXQsIHBlbmFsdHlfc2Vjb25kcykge1xuICAgIHJldHVybiAod3JpdGVyKSA9PiBuZXcgUmVhY3Rpb25fVGltZV9QZW5hbHR5X01lYXN1cmVtZW50KGlucHV0KHdyaXRlciksIHBlbmFsdHlfc2Vjb25kcyk7XG59XG47XG5leHBvcnQgZnVuY3Rpb24gVGltZV90b19maW5pc2goaW5wdXQpIHtcbiAgICByZXR1cm4gKHdyaXRlcikgPT4gbmV3IFRpbWVfVG9fRmluaXNoX01lYXN1cmVtZW50KGlucHV0KHdyaXRlcikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVfdG9fZmluaXNoX3dpdGhfUGVuYWx0eShpbnB1dCwgcGVuYWx0eV9zZWNvbmRzKSB7XG4gICAgcmV0dXJuICh3cml0ZXIpID0+IG5ldyBUaW1lX1RvX0ZpbmlzaF9XaXRoX1RpbWVfUGVuYWx0eV9NZWFzdXJlbWVudChpbnB1dCh3cml0ZXIpLCBwZW5hbHR5X3NlY29uZHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGtleXMoa2V5X2xpc3QpIHtcbiAgICByZXR1cm4gKHdyaXRlcikgPT4gbmV3IEtleV9QcmVzc2luZyhrZXlfbGlzdCwgd3JpdGVyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0X2lucHV0X2V4cGVyaW1lbnQob3V0cHV0X3dyaXRlcikge1xuICAgIHJldHVybiBuZXcgRnJlZV9UZXh0X1VzZXJfSW5wdXRfRXhwZXJpbWVudChvdXRwdXRfd3JpdGVyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0X2lucHV0X2V4cGVyaW1lbnRfd2l0aF9wcmVfcG9zdF9sYWJlbChwcmUsIHBvc3QpIHtcbiAgICByZXR1cm4gKG91dHB1dF93cml0ZXIpID0+IG5ldyBGcmVlX1RleHRfVXNlcl9JbnB1dF9FeHBlcmltZW50X1dpdGhfUHJlUG9zdChvdXRwdXRfd3JpdGVyLCBwcmUsIHBvc3QpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGluZm9ybWF0aW9uKHF1ZXN0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBJbmZvcm1hdGlvbihxdWVzdGlvbik7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJlZV90ZXh0KHZhcl9uYW1lLCBxdWVzdGlvbikge1xuICAgIHJldHVybiBuZXcgRnJlZXRleHQodmFyX25hbWUsIHF1ZXN0aW9uKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhbHRlcm5hdGl2ZXModmFyX25hbWUsIHF1ZXN0aW9uLCBhbHRlcm5hdGl2ZXMpIHtcbiAgICByZXR1cm4gbmV3IEFsdGVybmF0aXZlcyh2YXJfbmFtZSwgcXVlc3Rpb24sIGFsdGVybmF0aXZlcyk7XG59XG5leHBvcnQgY2xhc3MgRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyIHtcbiAgICBjb252ZXJ0X3N0cmluZ190b19odG1sX3N0cmluZyhzKSB7XG4gICAgICAgIHJldHVybiBjb252ZXJ0X3N0cmluZ190b19odG1sX3N0cmluZyhzKTtcbiAgICB9XG4gICAgc3RyaW5nX3BhZ2VfY29tbWFuZChzKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB0aGlzLnByaW50X3N0cmluZ19vbl9zdGFnZShzKTtcbiAgICB9XG4gICAgc3RhZ2Vfc3RyaW5nX3BhZ2VzX2NvbW1hbmRzKHBhZ2VzKSB7XG4gICAgICAgIGxldCByZXQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgYSBvZiBwYWdlcykge1xuICAgICAgICAgICAgcmV0LnB1c2godGhpcy5zdHJpbmdfcGFnZV9jb21tYW5kKGEpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBnZXRfZ2l2ZW5fYW5zd2VyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgcHJpbnRfb25faW5wdXRfcmVzcG9uc2UoZ2l2ZW5fYW5zd2VyKSB7IH1cbiAgICBzZXRfZm9jdXNfb25faW5wdXQoKSB7IH1cbiAgICBjbGVhcl9hbGwoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJfc3RhdGUoKTtcbiAgICAgICAgdGhpcy5jbGVhcl9zdGFnZSgpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNZWFzdXJlbWVudF9UeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dF90eXBlKSB7XG4gICAgICAgIHRoaXMuaW5wdXRfdHlwZSA9IGlucHV0X3R5cGU7XG4gICAgfVxuICAgIGFjY2VwdGVkX3Jlc3BvbnNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRfdHlwZS5hY2NlcHRlZF9yZXNwb25zZXMoKTtcbiAgICB9XG4gICAgZ2l2ZW5fYW5zd2VyKGkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRfdHlwZS5naXZlbl9hbnN3ZXIoaSk7XG4gICAgfVxuICAgIHN0YXJ0X21lYXN1cmVtZW50KHRhc2spIHtcbiAgICAgICAgdGhpcy5zdGFydF90aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkudmFsdWVPZigpO1xuICAgICAgICB0YXNrLnByaW50X3Rhc2soKTtcbiAgICB9XG4gICAgc3RvcF9tZWFzdXJlbWVudChpbnB1dCwgdGFzaykge1xuICAgICAgICBsZXQgZW5kX3RpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKS52YWx1ZU9mKCk7XG4gICAgICAgIHRhc2suZ2l2ZW5fYW5zd2VyID0gdGhpcy5pbnB1dF90eXBlLmdldF9naXZlbl9hbnN3ZXIoaW5wdXQpO1xuICAgICAgICB0YXNrLnJlcXVpcmVkX21pbGxpc2Vjb25kcyA9IGVuZF90aW1lIC0gdGhpcy5zdGFydF90aW1lO1xuICAgICAgICB0YXNrLmRvX3ByaW50X2FmdGVyX3Rhc2tfaW5mb3JtYXRpb24oKTtcbiAgICB9XG4gICAgaW5jb3JyZWN0X3Jlc3BvbnNlKGksIHRhc2spIHtcbiAgICAgICAgbGV0IGVuZF90aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkudmFsdWVPZigpO1xuICAgICAgICBsZXQgZ2l2ZW5fYW5zd2VyID0gdGFzay5leHBlcmltZW50X2RlZmluaXRpb24ubWVhc3VyZW1lbnQuZ2V0X2dpdmVuX2Fuc3dlcihpKTtcbiAgICAgICAgdGFzay5pbnZhbGlkX2Fuc3dlcnMucHVzaChbZ2l2ZW5fYW5zd2VyLCBlbmRfdGltZSAtIHRoaXMuc3RhcnRfdGltZV0pO1xuICAgICAgICB0YXNrLmRvX3ByaW50X2Vycm9yX21lc3NhZ2UodGhpcy5pbnB1dF90eXBlLmdldF9naXZlbl9hbnN3ZXIoaSkpO1xuICAgIH1cbiAgICBvdXRwdXRfd3JpdGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnB1dF90eXBlLm91dHB1dF93cml0ZXI7XG4gICAgfVxuICAgIGdldF9naXZlbl9hbnN3ZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRfdHlwZS5nZXRfZ2l2ZW5fYW5zd2VyKGlucHV0KTtcbiAgICB9XG4gICAgZGVtYW5kc19wZW5hbHR5KCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHBlbmFsdHlfaXNfb3ZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlYWN0aW9uX1RpbWVfTWVhc3VyZW1lbnQgZXh0ZW5kcyBNZWFzdXJlbWVudF9UeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dF90eXBlKSB7XG4gICAgICAgIHN1cGVyKGlucHV0X3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSZWFjdGlvbl9UaW1lX1BlbmFsdHlfTWVhc3VyZW1lbnQgZXh0ZW5kcyBNZWFzdXJlbWVudF9UeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dF90eXBlLCBwZW5hbHR5X3NlY29uZHMpIHtcbiAgICAgICAgc3VwZXIoaW5wdXRfdHlwZSk7XG4gICAgICAgIHRoaXMucGVuYWx0eV9zdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGVuYWx0eV9zdGFydF9wb2ludCA9IG51bGw7XG4gICAgICAgIHRoaXMucGVuYWx0eV9taWxpc2Vjb25kcyA9IHBlbmFsdHlfc2Vjb25kcyAqIDEwMDA7XG4gICAgfVxuICAgIGRlbWFuZHNfcGVuYWx0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGluY29ycmVjdF9yZXNwb25zZShpLCB0YXNrKSB7XG4gICAgICAgIHN1cGVyLmluY29ycmVjdF9yZXNwb25zZShpLCB0YXNrKTtcbiAgICAgICAgdGhpcy5wZW5hbHR5X3N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnBlbmFsdHlfc3RhcnRfcG9pbnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKS52YWx1ZU9mKCk7XG4gICAgICAgIHRhc2suZG9fcHJpbnRfZXJyb3JfbWVzc2FnZSh0aGlzLmlucHV0X3R5cGUuZ2V0X2dpdmVuX2Fuc3dlcihpKSk7XG4gICAgfVxuICAgIGRlbGV0ZV9wZW5hbHR5KCkge1xuICAgICAgICB0aGlzLnBlbmFsdHlfc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBlbmFsdHlfc3RhcnRfcG9pbnQgPSBudWxsO1xuICAgIH1cbiAgICBwZW5hbHR5X2lzX292ZXIoKSB7XG4gICAgICAgIGxldCBkaWZmID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpLnZhbHVlT2YoKSkgLSB0aGlzLnN0YXJ0X3RpbWU7XG4gICAgICAgIHJldHVybiAhdGhpcy5wZW5hbHR5X3N0YXJ0ZWQgfHwgZGlmZiA+PSB0aGlzLnBlbmFsdHlfbWlsaXNlY29uZHM7XG4gICAgfVxuICAgIHN0YXJ0X21lYXN1cmVtZW50KHRhc2spIHtcbiAgICAgICAgc3VwZXIuc3RhcnRfbWVhc3VyZW1lbnQodGFzayk7XG4gICAgICAgIHRoaXMuZGVsZXRlX3BlbmFsdHkoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGltZV9Ub19GaW5pc2hfTWVhc3VyZW1lbnQgZXh0ZW5kcyBNZWFzdXJlbWVudF9UeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dF90eXBlKSB7XG4gICAgICAgIHN1cGVyKGlucHV0X3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUaW1lX1RvX0ZpbmlzaF9XaXRoX1RpbWVfUGVuYWx0eV9NZWFzdXJlbWVudCBleHRlbmRzIFRpbWVfVG9fRmluaXNoX01lYXN1cmVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dF90eXBlLCBwZW5hbHR5X3NlY29uZHMpIHtcbiAgICAgICAgc3VwZXIoaW5wdXRfdHlwZSk7XG4gICAgICAgIHRoaXMucGVuYWx0eV9zdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGVuYWx0eV9zdGFydF9wb2ludCA9IG51bGw7XG4gICAgICAgIHRoaXMucGVuYWx0eV9taWxpc2Vjb25kcyA9IHBlbmFsdHlfc2Vjb25kcyAqIDEwMDA7XG4gICAgfVxuICAgIGRlbWFuZHNfcGVuYWx0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGluY29ycmVjdF9yZXNwb25zZShpLCB0YXNrKSB7XG4gICAgICAgIHN1cGVyLmluY29ycmVjdF9yZXNwb25zZShpLCB0YXNrKTtcbiAgICAgICAgdGhpcy5wZW5hbHR5X3N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnBlbmFsdHlfc3RhcnRfcG9pbnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKS52YWx1ZU9mKCk7XG4gICAgICAgIHRhc2suZG9fcHJpbnRfZXJyb3JfbWVzc2FnZSh0aGlzLmlucHV0X3R5cGUuZ2V0X2dpdmVuX2Fuc3dlcihpKSk7XG4gICAgfVxuICAgIGRlbGV0ZV9wZW5hbHR5KCkge1xuICAgICAgICB0aGlzLnBlbmFsdHlfc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBlbmFsdHlfc3RhcnRfcG9pbnQgPSBudWxsO1xuICAgIH1cbiAgICBwZW5hbHR5X2lzX292ZXIoKSB7XG4gICAgICAgIGxldCBkaWZmID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpLnZhbHVlT2YoKSkgLSB0aGlzLnN0YXJ0X3RpbWU7XG4gICAgICAgIHJldHVybiAhdGhpcy5wZW5hbHR5X3N0YXJ0ZWQgfHwgZGlmZiA+PSB0aGlzLnBlbmFsdHlfbWlsaXNlY29uZHM7XG4gICAgfVxuICAgIHN0YXJ0X21lYXN1cmVtZW50KHRhc2spIHtcbiAgICAgICAgc3VwZXIuc3RhcnRfbWVhc3VyZW1lbnQodGFzayk7XG4gICAgICAgIHRoaXMuZGVsZXRlX3BlbmFsdHkoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRXhwZXJpbWVudF9JbnB1dF9UeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihvdXRwdXRfd3JpdGVyKSB7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlciA9IG91dHB1dF93cml0ZXI7XG4gICAgfVxuICAgIHByaW50X2lucHV0X3JlcXVlc3QoKSB7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlci5hc2tfZm9yX2lucHV0KCk7XG4gICAgfVxuICAgIGdldF9naXZlbl9hbnN3ZXIoaW5wdXRfc3RyaW5nKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMub3V0cHV0X3dyaXRlci5nZXRfZ2l2ZW5fYW5zd2VyKGlucHV0X3N0cmluZyk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgS2V5X1ByZXNzaW5nIGV4dGVuZHMgRXhwZXJpbWVudF9JbnB1dF9UeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihhY2NlcHRlZF9rZXlzLCBvdXRwdXRfd3JpdGVyKSB7XG4gICAgICAgIHN1cGVyKG91dHB1dF93cml0ZXIpO1xuICAgICAgICB0aGlzLmFjY2VwdGVkX2tleXMgPSBhY2NlcHRlZF9rZXlzO1xuICAgIH1cbiAgICBhY2NlcHRlZF9yZXNwb25zZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjY2VwdGVkX2tleXM7XG4gICAgfVxuICAgIGdpdmVuX2Fuc3dlcihrZXlfcHJlc3NlZCkge1xuICAgICAgICByZXR1cm4ga2V5X3ByZXNzZWQ7XG4gICAgfVxuICAgIHByaW50X2lucHV0X3JlcXVlc3QoKSB7XG4gICAgICAgIC8vIEkgYW0gYSBrZXkuLi4ubm8gbmVlZCBmb3IgaW5wdXQgZmllbGRzXG4gICAgfVxuICAgIGdldF9naXZlbl9hbnN3ZXIoaW5wdXRfc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBpbnB1dF9zdHJpbmc7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZyZWVfVGV4dF9Vc2VyX0lucHV0X0V4cGVyaW1lbnQgZXh0ZW5kcyBFeHBlcmltZW50X0lucHV0X1R5cGUge1xuICAgIGNvbnN0cnVjdG9yKG91dHB1dF93cml0ZXIpIHtcbiAgICAgICAgc3VwZXIob3V0cHV0X3dyaXRlcik7XG4gICAgfVxuICAgIGFjY2VwdGVkX3Jlc3BvbnNlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcIkVudGVyXCJdO1xuICAgIH1cbiAgICBnaXZlbl9hbnN3ZXIoa2V5X3ByZXNzZWQpIHsgfVxuICAgIHByaW50X2lucHV0X3JlcXVlc3QoKSB7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlci5hc2tfZm9yX2lucHV0KCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZyZWVfVGV4dF9Vc2VyX0lucHV0X0V4cGVyaW1lbnRfV2l0aF9QcmVQb3N0IGV4dGVuZHMgRXhwZXJpbWVudF9JbnB1dF9UeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihvdXRwdXRfd3JpdGVyLCBwcmUsIHBvc3QpIHtcbiAgICAgICAgc3VwZXIob3V0cHV0X3dyaXRlcik7XG4gICAgfVxuICAgIGFjY2VwdGVkX3Jlc3BvbnNlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcIkVudGVyXCJdO1xuICAgIH1cbiAgICBnaXZlbl9hbnN3ZXIoa2V5X3ByZXNzZWQpIHsgfVxuICAgIHByaW50X2lucHV0X3JlcXVlc3QoKSB7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlci5hc2tfZm9yX2lucHV0KCk7XG4gICAgfVxufVxuY2xhc3MgX1JhbmRvbSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgTWF0aC5zZWVkcmFuZG9tKCcxMjM0NTY3ODkwJyk7XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBuZXdfcmFuZG9tX2ludGVnZXIodXBwZXJfbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgudHJ1bmModXBwZXJfbGltaXQgKiBNYXRoLnJhbmRvbSgpKTtcbiAgICB9XG4gICAgc2V0X3NlZWQoc2VlZCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIE1hdGguc2VlZHJhbmRvbShzZWVkKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgUmFuZG9tID0gbmV3IF9SYW5kb20oKTtcbmV4cG9ydCBmdW5jdGlvbiBTRVRfU0VFRChzZWVkKSB7XG4gICAgUmFuZG9tLnNldF9zZWVkKHNlZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbV9pbnRlZ2VyX3VwX3RvX2V4Y2x1ZGluZyh1cHBlcl9saW1pdCkge1xuICAgIHJldHVybiBSYW5kb20ubmV3X3JhbmRvbV9pbnRlZ2VyKHVwcGVyX2xpbWl0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkb19yYW5kb21fYXJyYXlfc29ydChhcnJheSkge1xuICAgIGxldCBjb3B5ID0gWy4uLmFycmF5XTtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgd2hpbGUgKGNvcHkubGVuZ3RoID4gMCkge1xuICAgICAgICByZXN1bHQucHVzaChjb3B5LnNwbGljZShyYW5kb21faW50ZWdlcl91cF90b19leGNsdWRpbmcoY29weS5sZW5ndGgpLCAxKVswXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tX2FycmF5X2VsZW1lbnQoYXJyYXkpIHtcbiAgICByZXR1cm4gYXJyYXlbcmFuZG9tX2ludGVnZXJfdXBfdG9fZXhjbHVkaW5nKGFycmF5Lmxlbmd0aCldO1xufVxuLy8gVGhpcyBpbnZvY2F0aW9uIGp1c3QgbWFrZXMgc3VyZSB0aGF0IFJBTkRPTSBpcyBsb2FkZWRcbmR1bW15KCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeHBlcmltZW50YXRpb24uanMubWFwIiwiZXhwb3J0IGNsYXNzIFRhc2sge1xuICAgIGNvbnN0cnVjdG9yKHRjLCBleHBlcmltZW50X2RlZmluaXRpb24sIHRleHQpIHtcbiAgICAgICAgdGhpcy5leHBlY3RlZF9hbnN3ZXIgPSBcIlwiO1xuICAgICAgICB0aGlzLmdpdmVuX2Fuc3dlciA9IFwiXCI7XG4gICAgICAgIHRoaXMucmVxdWlyZWRfbWlsbGlzZWNvbmRzID0gbnVsbDtcbiAgICAgICAgdGhpcy50YXNrX251bWJlcl9pbl9leGVjdXRpb24gPSAtMTtcbiAgICAgICAgdGhpcy5pbnZhbGlkX2Fuc3dlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5pc190cmFpbmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRvX3ByaW50X3Rhc2sgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kb19wcmludF9lcnJvcl9tZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWNjZXB0c19hbnN3ZXJfZnVuY3Rpb24gPSAoYW5zd2VyKSA9PiB0cnVlO1xuICAgICAgICB0aGlzLmRvX3ByaW50X2FmdGVyX3Rhc2tfaW5mb3JtYXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50cmVhdG1lbnRfY29tYmluYXRpb24gPSB0YztcbiAgICAgICAgdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24gPSBleHBlcmltZW50X2RlZmluaXRpb247XG4gICAgICAgIC8vIHRoaXMuY29kZV9zdHJpbmcodGV4dCk7XG4gICAgfVxuICAgIGFjY2VwdHNfYW5zd2VyKGlucHV0KSB7XG4gICAgICAgIGxldCBhbnN3ZXIgPSB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi5tZWFzdXJlbWVudC5nZXRfZ2l2ZW5fYW5zd2VyKGlucHV0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXB0c19hbnN3ZXJfZnVuY3Rpb24oYW5zd2VyKTtcbiAgICB9XG4gICAgbmV4dF90YXNrKCkge1xuICAgICAgICBpZiAodGhpcy50YXNrX251bWJlcl9pbl9leGVjdXRpb24gPCB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi50YXNrcy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24udGFza3NbdGhpcy50YXNrX251bWJlcl9pbl9leGVjdXRpb25dO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaHRtbF9zdHJpbmdfd2l0aF9jbWQoaHRtbF9zdHJpbmcsIGNtZCkge1xuICAgICAgICAvLyB0aGlzLndyaXRlX2FjdGlvbiA9ICh3cml0ZXI6IEF1dG9tYXRhX0lPKSA9PiB7XG4gICAgICAgIC8vICAgICB3cml0ZXIud3JpdGUoQVVUT01BVEFfT1VUUFVUX1dSSVRFUl9BQ1RJT04uT1ZFUldSSVRFLCBBVVRPTUFUQV9PVVRQVVRfV1JJVEVSX1RBR1MuU1RBR0UsIGh0bWxfbGluZShodG1sX3N0cmluZykpO1xuICAgICAgICAvLyAgICAgY21kKCk7XG4gICAgICAgIC8vIH1cbiAgICB9XG4gICAgaHRtbF9ub2RlX3dpdGhfY21kKGVsZW1lbnQsIGNtZCkge1xuICAgICAgICAvLyB0aGlzLndyaXRlX2FjdGlvbiA9ICh3cml0ZXI6IEF1dG9tYXRhX0lPKSA9PiB7XG4gICAgICAgIC8vICAgICB3cml0ZXIud3JpdGUoQVVUT01BVEFfT1VUUFVUX1dSSVRFUl9BQ1RJT04uT1ZFUldSSVRFLCBBVVRPTUFUQV9PVVRQVVRfV1JJVEVSX1RBR1MuU1RBR0UsIGh0bWxfbm9kZShlbGVtZW50KSk7XG4gICAgICAgIC8vICAgICBjbWQoKTtcbiAgICAgICAgLy8gfVxuICAgIH1cbiAgICBhZnRlcl90YXNrX3N0cmluZ19jb25zdHJ1Y3RvcihhX3N0cmluZ19jb25zdHJ1Y3Rvcikge1xuICAgICAgICAvLyB0aGlzLmFmdGVyX3Rhc2tfd3JpdGVfYWN0aW9uID0gKCkgPT4gKHdyaXRlcjogQXV0b21hdGFfSU8pID0+d3JpdGVyLndyaXRlKEFVVE9NQVRBX09VVFBVVF9XUklURVJfQUNUSU9OLkFQUEVORCwgQVVUT01BVEFfT1VUUFVUX1dSSVRFUl9UQUdTLlNUQUdFLCB0ZXh0X2xpbmUoYV9zdHJpbmdfY29uc3RydWN0b3IoKSkpO1xuICAgIH1cbiAgICBwcmludF90YXNrKCkge1xuICAgICAgICB0aGlzLmRvX3ByaW50X3Rhc2soKTtcbiAgICAgICAgdGhpcy5wcmludF9pbnB1dF9yZXF1ZXN0KCk7XG4gICAgfVxuICAgIHByaW50X2lucHV0X3JlcXVlc3QoKSB7XG4gICAgICAgIHRoaXMuZXhwZXJpbWVudF9kZWZpbml0aW9uLm1lYXN1cmVtZW50LmlucHV0X3R5cGUucHJpbnRfaW5wdXRfcmVxdWVzdCgpO1xuICAgIH1cbiAgICB0cmVhdG1lbnRfdmFsdWUodHJlYXRtZW50X25hbWUpIHtcbiAgICAgICAgZm9yIChsZXQgdHJlYXRtZW50IG9mIHRoaXMudHJlYXRtZW50X2NvbWJpbmF0aW9uLnRyZWF0bWVudF9jb21iaW5hdGlvbilcbiAgICAgICAgICAgIGlmICh0cmVhdG1lbnQudmFyaWFibGUubmFtZSA9PT0gdHJlYXRtZW50X25hbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyZWF0bWVudC52YWx1ZTtcbiAgICAgICAgdGhyb3cgXCJVbmtub3duIHRyZWF0bWVudDogXCIgKyB0cmVhdG1lbnRfbmFtZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UYXNrLmpzLm1hcCIsImltcG9ydCB7IFRhc2sgfSBmcm9tIFwiLi4vVGFzay5qc1wiO1xuaW1wb3J0IHsgZG9fcmFuZG9tX2FycmF5X3NvcnQgfSBmcm9tIFwiLi4vRXhwZXJpbWVudGF0aW9uLmpzXCI7XG4vKipcbiAqIEFsbCBleHBlcmltZW50IGRlZmluaXRpb25zIGNvbnRhaW4gdGhlIHRyZWF0bWVudCBjb21iaW5hdGlvbnMgKGluY2x1ZGluZyByZXBldGl0aW9ucylcbiAqL1xuZXhwb3J0IGNsYXNzIFRyZWF0bWVudHNfQ29tYmluYXRvciB7XG4gICAgY29uc3RydWN0b3IodmFyaWFibGVzLCByZXBldGl0aW9ucykge1xuICAgICAgICB0aGlzLnZhcmlhYmxlcyA9IHZhcmlhYmxlcztcbiAgICAgICAgdGhpcy5yZXBldGl0aW9ucyA9IHJlcGV0aXRpb25zO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmVhdG1lbnRzX0NvbWJpbmF0b3IodGhpcy52YXJpYWJsZXMsIHRoaXMucmVwZXRpdGlvbnMpO1xuICAgIH1cbiAgICBjcmVhdGVfdHJlYXRtZW50X2NvbWJpbmF0aW9ucygpIHtcbiAgICAgICAgbGV0IHRyZWF0bWVudF9jb21iaW5hdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCB0aGlzLnJlcGV0aXRpb25zOyByKyspIHtcbiAgICAgICAgICAgIHRyZWF0bWVudF9jb21iaW5hdGlvbnMgPSB0cmVhdG1lbnRfY29tYmluYXRpb25zLmNvbmNhdCh0aGlzLnZhcmlhYmxlcy5jcmVhdGVfdHJlYXRtZW50X2NvbWJpbmF0aW9ucygpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJlYXRtZW50X2NvbWJpbmF0aW9ucztcbiAgICB9XG4gICAgY3JlYXRlX3Rhc2tzKGV4cGVyaW1lbnRfZGVmaW5pdGlvbikge1xuICAgICAgICBsZXQgdGFza3MgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgdHJlYXRtZW50X2NvbWJpbmF0aW9uIG9mIHRoaXMuY3JlYXRlX3RyZWF0bWVudF9jb21iaW5hdGlvbnMoKSkge1xuICAgICAgICAgICAgbGV0IHRhc2sgPSBuZXcgVGFzayh0cmVhdG1lbnRfY29tYmluYXRpb24uY2xvbmUoKSwgZXhwZXJpbWVudF9kZWZpbml0aW9uLCBcIlwiKTtcbiAgICAgICAgICAgIGV4cGVyaW1lbnRfZGVmaW5pdGlvbi5leHBlcmltZW50X2RlZmluaXRpb25fdGFza19jcmVhdG9yKHRhc2spO1xuICAgICAgICAgICAgdGFzay5pc190cmFpbmluZyA9IGV4cGVyaW1lbnRfZGVmaW5pdGlvbi5pc190cmFpbmluZztcbiAgICAgICAgICAgIHRhc2tzLnB1c2godGFzayk7XG4gICAgICAgIH1cbiAgICAgICAgZG9fcmFuZG9tX2FycmF5X3NvcnQodGFza3MpO1xuICAgICAgICByZXR1cm4gdGFza3M7XG4gICAgfVxuICAgIGdldF92YXJpYWJsZV9uYW1lZCh2YXJfbmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YXJpYWJsZXMuZ2V0X3ZhcmlhYmxlX25hbWVkKHZhcl9uYW1lKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmVhdG1lbnRzX0NvbWJpbmF0b3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7IH1cbmV4cG9ydCBjbGFzcyBFeHBlcmltZW50X0RlZmluaXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGV4cGVyaW1lbnRfbmFtZSwgaXNfdHJhaW5pbmcsIHRyZWF0bWVudHNfY29tYmluYXRvciwgdmFyaWFibGVzLCByZXBldGl0aW9ucywgbWVhc3VyZW1lbnQsIHRhc2tfY3JlYXRvcikge1xuICAgICAgICB0aGlzLnF1ZXN0aW9ubmFpcmVzID0gW107XG4gICAgICAgIHRoaXMudGFza3MgPSBbXTtcbiAgICAgICAgdGhpcy5leHBlcmltZW50X25hbWUgPSBleHBlcmltZW50X25hbWU7XG4gICAgICAgIHRoaXMuaXNfdHJhaW5pbmcgPSBpc190cmFpbmluZztcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHsgZXhwZXJpbWVudF9uYW1lOiBleHBlcmltZW50X25hbWUsIHZhcmlhYmxlczogdmFyaWFibGVzLCByZXBldGl0aW9uczogcmVwZXRpdGlvbnMsIHRhc2tfY3JlYXRvcjogdGFza19jcmVhdG9yIH07XG4gICAgICAgIHRoaXMudHJlYXRtZW50c19jb21iaW5hdG9yID0gdHJlYXRtZW50c19jb21iaW5hdG9yO1xuICAgICAgICB0aGlzLnZhcmlhYmxlcyA9IHZhcmlhYmxlcztcbiAgICAgICAgdGhpcy5tZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50O1xuICAgICAgICB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbl90YXNrX2NyZWF0b3IgPSB0YXNrX2NyZWF0b3I7XG4gICAgfVxuICAgIGluaXRfZXhwZXJpbWVudChpc190cmFpbmluZykge1xuICAgICAgICB0aGlzLnRhc2tzID0gdGhpcy50cmVhdG1lbnRzX2NvbWJpbmF0b3IuY3JlYXRlX3Rhc2tzKHRoaXMpO1xuICAgIH1cbiAgICBhbGxfaW5kZXBlbmRlbnRfdmFyaWFibGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YXJpYWJsZXMuaW5kZXBlbmRlbnRfdmFyaWFibGVzO1xuICAgIH1cbiAgICBnZW5lcmF0ZV9jc3ZfZGF0YSgpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICAvLyBsZXQgcXVlc3Rpb25uYWlyZV92YXJpYWJsZXMgPSB0aGlzLnF1ZXN0aW9ubmFpcmVfcmVzcG9uc2VzID0gY2ZnLnF1ZXN0aW9ubmFpcmUuZmlsdGVyKChlOiBJbnB1dF9PYmplY3QpPT4gIShlIGluc3RhbmNlb2YgSW5mb3JtYXRpb24pKS5tYXAoKGU6IElucHV0X09iamVjdCk9PmUudmFyaWFibGUpO1xuICAgICAgICBmb3IgKGxldCBxdWVzdGlvbm5haXJlIG9mIHRoaXMucXVlc3Rpb25uYWlyZXMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHF1ZXN0aW9uIG9mIHF1ZXN0aW9ubmFpcmUucXVlc3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goXCJcXFwiXCIgKyBxdWVzdGlvbi52YXJpYWJsZV9uYW1lICsgXCJcXFwiXCIgKyBcIjtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YXJpYWJsZXMucHJpbnRfdG9fYXJyYXkocmVzdWx0KTtcbiAgICAgICAgcmVzdWx0LnB1c2goXCJudW1iZXJfb2ZfZ2l2ZW5fYW5zd2VycztleHBlY3RlZF9hbnN3ZXI7Z2l2ZW5fYW5zd2VyO2lzX2NvcnJlY3Q7dGltZV9pbl9taWxsaXNlY29uZHM7XFxuXCIpO1xuICAgICAgICBmb3IgKGxldCB0YXNrIG9mIHRoaXMudGFza3MpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHF1ZXN0aW9ubmFpcmUgb2YgdGhpcy5xdWVzdGlvbm5haXJlcykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHF1ZXN0aW9uIG9mIHF1ZXN0aW9ubmFpcmUucXVlc3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFwiXFxcIlwiICsgcXVlc3Rpb24uYW5zd2VyICsgXCJcXFwiXCIgKyBcIjtcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgdHJlYXRtZW50X2NvbWJpbmF0aW9uIG9mIHRhc2sudHJlYXRtZW50X2NvbWJpbmF0aW9uLnRyZWF0bWVudF9jb21iaW5hdGlvbikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRyZWF0bWVudF9jb21iaW5hdGlvbi52YWx1ZSArIFwiO1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCh0YXNrLmludmFsaWRfYW5zd2Vycy5sZW5ndGggKyAxKSArIFwiO1wiKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRhc2suZXhwZWN0ZWRfYW5zd2VyICsgXCI7XCIpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godGFzay5naXZlbl9hbnN3ZXIgKyBcIjtcIik7XG4gICAgICAgICAgICByZXN1bHQucHVzaChcIlwiICsgKHRhc2suZ2l2ZW5fYW5zd2VyID09IHRhc2suZXhwZWN0ZWRfYW5zd2VyKSArIFwiO1wiKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRhc2sucmVxdWlyZWRfbWlsbGlzZWNvbmRzICsgXCI7XCIpO1xuICAgICAgICAgICAgdGFzay5pbnZhbGlkX2Fuc3dlcnMuZm9yRWFjaCgoYSkgPT4gcmVzdWx0LnB1c2goYVswXSArIFwiO1wiICsgYVsxXSArIFwiO1wiKSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaChcIlxcblwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV4cGVyaW1lbnRfRGVmaW5pdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBmcm9tIH0gZnJvbSBcIi4uL0F1dG9tYXRhL1RyYW5zaXRpb25zLmpzXCI7XG5pbXBvcnQgeyBBdXRvbWF0YV9Db25maWd1cmF0b3IgfSBmcm9tIFwiLi4vQXV0b21hdGEvQXV0b21hdGFfQ29uZmlndXJhdG9yLmpzXCI7XG5pbXBvcnQgeyBBdXRvbWF0YV9XaXRoX091dHB1dF9Gb3J3YXJkZXIgfSBmcm9tIFwiLi9BdXRvbWF0YV9XaXRoX091dHB1dF9Gb3J3YXJkZXIuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkgeyB9XG5sZXQgU0hPV19QQUdFID0gMDtcbmxldCBGSU5JU0hFRF9CT09LID0gMTtcbmxldCBFVkVSWVRISU5HX0RPTkUgPSAxO1xuZXhwb3J0IGNsYXNzIEJvb2tfRm9yd2FyZGVyIGV4dGVuZHMgQXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihib29rX25hbWUsIHRleHQsIG1lYXN1cmVtZW50KSB7XG4gICAgICAgIHN1cGVyKGJvb2tfbmFtZSwgbWVhc3VyZW1lbnQsIHRleHRbMF0sIHRleHRbdGV4dC5sZW5ndGggLSAxXSk7XG4gICAgICAgIHRoaXMuY3VycmVudF9wYWdlX251bWJlciA9IC0xO1xuICAgICAgICB0aGlzLnBhZ2VzID0gdGV4dDtcbiAgICAgICAgdGhpcy5jcmVhdGVfYXV0b21hdGEoKTtcbiAgICB9XG4gICAgc2V0X3BhZ2VfaW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X3BhZ2VfbnVtYmVyID0gaW5kZXg7XG4gICAgICAgIHRoaXMuZW1wdHlfc2NyZWVuX2FuZF9zaG93X2luc3RydWN0aW9ucyh0aGlzLnBhZ2VzW3RoaXMuY3VycmVudF9wYWdlX251bWJlcl0pO1xuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIoKS5wcmludF9zdHJpbmdfdG9fc3RhdGUodGhpcy5mb3J3YXJkZXJfbmFtZSk7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLnByaW50X3N0cmluZ190b19wYWdlX251bWJlcihcIlBhZ2UgXCIgKyAodGhpcy5jdXJyZW50X3BhZ2VfbnVtYmVyICsgMSkgKyBcIiAvIFwiICsgdGhpcy5wYWdlcy5sZW5ndGgpO1xuICAgICAgICBsZXQgbmF2aWdhdGlvbl9zdHJpbmcgPSBcIjxocj5cIjtcbiAgICAgICAgaWYgKGluZGV4ID4gMClcbiAgICAgICAgICAgIG5hdmlnYXRpb25fc3RyaW5nICs9IFwiWyYjODU5Ml0gPSBwcmV2aW91cyBwYWdlXCI7XG4gICAgICAgIGlmIChpbmRleCA8IHRoaXMucGFnZXMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgIG5hdmlnYXRpb25fc3RyaW5nICs9IChuYXZpZ2F0aW9uX3N0cmluZyAhPSBcIjxocj5cIiA/IFwiPGJyPlwiIDogXCJcIikgKyBcIlsmIzg1OTRdID0gbmV4dCBwYWdlXCI7XG4gICAgICAgIGlmIChpbmRleCA9PSB0aGlzLnBhZ2VzLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICBuYXZpZ2F0aW9uX3N0cmluZyArPSAobmF2aWdhdGlvbl9zdHJpbmcgIT0gXCI8aHI+XCIgPyBcIjxicj5cIiA6IFwiXCIpICsgXCJbRW50ZXJdID0gRmluaXNoXCI7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLnByaW50X2h0bWxfb25fc3RhZ2UobmF2aWdhdGlvbl9zdHJpbmcpO1xuICAgIH1cbiAgICBzZXRfYWN0aXZlKCkge1xuICAgICAgICBzdXBlci5zZXRfYWN0aXZlKCk7XG4gICAgfVxuICAgIHNob3dfaW50cm8oKSB7XG4gICAgICAgIHRoaXMuc2V0X3BhZ2VfaW5kZXgoMCk7XG4gICAgfVxuICAgIHNob3dfb3V0cm8oKSB7IH1cbiAgICBhdXRvbWF0YV9jb25maWd1cmF0b3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXV0b21hdGFfQ29uZmlndXJhdG9yKFtTSE9XX1BBR0UsIEVWRVJZVEhJTkdfRE9ORV0sIFNIT1dfUEFHRSwgKCkgPT4geyB9LCB0aGlzLnRyYW5zaXRpb25zKCksIFtFVkVSWVRISU5HX0RPTkVdKTtcbiAgICB9XG4gICAgdHJhbnNpdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBmcm9tKFNIT1dfUEFHRSkudG8oU0hPV19QQUdFKVxuICAgICAgICAgICAgICAgIC5vbihcIkFycm93UmlnaHRcIilcbiAgICAgICAgICAgICAgICAuaWYoKGkpID0+IHRoaXMuY3VycmVudF9wYWdlX251bWJlciA8IHRoaXMucGFnZXMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICAuZG8oKGkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9wYWdlX2luZGV4KCsrdGhpcy5jdXJyZW50X3BhZ2VfbnVtYmVyKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJvbShTSE9XX1BBR0UpLnRvKFNIT1dfUEFHRSlcbiAgICAgICAgICAgICAgICAub24oXCJBcnJvd0xlZnRcIilcbiAgICAgICAgICAgICAgICAuaWYoKGkpID0+IHRoaXMuY3VycmVudF9wYWdlX251bWJlciA+IDApXG4gICAgICAgICAgICAgICAgLmRvKChpKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfcGFnZV9pbmRleCgtLXRoaXMuY3VycmVudF9wYWdlX251bWJlcik7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyb20oU0hPV19QQUdFKS50byhFVkVSWVRISU5HX0RPTkUpXG4gICAgICAgICAgICAgICAgLm9uKFwiRW50ZXJcIilcbiAgICAgICAgICAgICAgICAuaWYoKGkpID0+IHRoaXMuY3VycmVudF9wYWdlX251bWJlciA+PSB0aGlzLnBhZ2VzLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgLmRvKChpKSA9PiB7IH0pXG4gICAgICAgIF07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Qm9va19Gb3J3YXJkZXIuanMubWFwIiwiaW1wb3J0IHsgQXV0b21hdGFfRm9yd2FyZGVyIH0gZnJvbSBcIi4uL0F1dG9tYXRhL0F1dG9tYXRhX0ZvcndhcmRlci5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlX2F1dG9tYXRhIH0gZnJvbSBcIi4uL0F1dG9tYXRhL0F1dG9tYXRhX0NvbmZpZ3VyYXRvci5qc1wiO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gXCIuLi9BdXRvbWF0YS9UcmFuc2l0aW9ucy5qc1wiO1xuZXhwb3J0IGNsYXNzIFNlcXVlbnRpYWxfRm9yd2FyZGVyX0ZvcndhcmRlciBleHRlbmRzIEF1dG9tYXRhX0ZvcndhcmRlciB7XG4gICAgY29uc3RydWN0b3IoZm9yd2FyZGVycykge1xuICAgICAgICBzdXBlcihcIkRlZmF1bHQgU2VxdWVudGlhbCBGb3J3YXJkZXIgRm9yd2FkZXJcIik7XG4gICAgICAgIHRoaXMuY3VycmVudF9mb3J3YXJkZXJfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmZvcndhcmRlcnMgPSBmb3J3YXJkZXJzO1xuICAgICAgICBmb3IgKGxldCBmb3J3YXJkZXIgb2YgZm9yd2FyZGVycykge1xuICAgICAgICAgICAgZm9yd2FyZGVyLmF1dG9tYXRhLmFkZF9maW5pc2hfYWN0aW9uKCgpID0+IHRoaXMuYXV0b21hdGEuaW5wdXQoXCJzd2l0Y2ggdG8gbmV4dCBzdGF0ZVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdXRvbWF0YSA9IGNyZWF0ZV9hdXRvbWF0YShbMCwgMV0sIDAsICgpID0+IHsgfSwgW1xuICAgICAgICAgICAgZnJvbSgwKS50bygwKVxuICAgICAgICAgICAgICAgIC5vbihcInN3aXRjaCB0byBuZXh0IHN0YXRlXCIpXG4gICAgICAgICAgICAgICAgLmlmKCgpID0+IHRoaXMuY3VycmVudF9mb3J3YXJkZXJfaW5kZXggPCB0aGlzLmZvcndhcmRlcnMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICAuZG8oKCkgPT4geyB0aGlzLmN1cnJlbnRfZm9yd2FyZGVyX2luZGV4Kys7IHRoaXMuY3VycmVudF9mb3J3YXJkZXIoKS5zZXRfYWN0aXZlKCk7IH0pLFxuICAgICAgICAgICAgZnJvbSgwKS50bygxKVxuICAgICAgICAgICAgICAgIC5vbihcInN3aXRjaCB0byBuZXh0IHN0YXRlXCIpXG4gICAgICAgICAgICAgICAgLmlmKCgpID0+IHRoaXMuY3VycmVudF9mb3J3YXJkZXJfaW5kZXggPT0gdGhpcy5mb3J3YXJkZXJzLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgLmRvKCgpID0+IHsgfSlcbiAgICAgICAgXSwgWzFdKTtcbiAgICAgICAgdGhpcy5hdXRvbWF0YS5pbml0aWFsaXplKCk7XG4gICAgICAgIC8vIHRoaXMuc2V0X2FjdGl2ZSgpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImFjdGl2ZSBmb3J3YXJkOiBcIiArIHRoaXMuY3VycmVudF9mb3J3YXJkZXIoKS5mb3J3YXJkZXJfbmFtZSk7XG4gICAgfVxuICAgIGlucHV0KGlucHV0KSB7XG4gICAgICAgIHRoaXMuZm9yd2FyZGVyc1t0aGlzLmN1cnJlbnRfZm9yd2FyZGVyX2luZGV4XS5pbnB1dChpbnB1dCk7XG4gICAgfVxuICAgIGlucHV0X3NlcXVlbmNlKGlucHV0X3NlcXVlbmNlKSB7XG4gICAgICAgIGZvciAobGV0IHMgb2YgaW5wdXRfc2VxdWVuY2UpXG4gICAgICAgICAgICB0aGlzLmlucHV0KHMpO1xuICAgIH1cbiAgICBjdXJyZW50X2ZvcndhcmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yd2FyZGVyc1t0aGlzLmN1cnJlbnRfZm9yd2FyZGVyX2luZGV4XTtcbiAgICB9XG4gICAgc2V0X2FjdGl2ZSgpIHtcbiAgICAgICAgc3VwZXIuc2V0X2FjdGl2ZSgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRfZm9yd2FyZGVyKCkuc2V0X2FjdGl2ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlcXVlbnRpYWxfRm9yd2FyZGVyX0ZvcndhcmRlci5qcy5tYXAiLCJpbXBvcnQgeyBBdXRvbWF0YV9Db25maWd1cmF0b3IgfSBmcm9tIFwiLi4vQXV0b21hdGEvQXV0b21hdGFfQ29uZmlndXJhdG9yLmpzXCI7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSBcIi4uL0F1dG9tYXRhL1RyYW5zaXRpb25zLmpzXCI7XG5pbXBvcnQgeyBBdXRvbWF0YV9XaXRoX091dHB1dF9Gb3J3YXJkZXIgfSBmcm9tIFwiLi9BdXRvbWF0YV9XaXRoX091dHB1dF9Gb3J3YXJkZXIuanNcIjtcbmxldCBTSE9XX0lOVFJPID0gMDtcbmxldCBTSE9XX1RBU0sgPSAxO1xubGV0IFNIT1dfUEVOQUxUWSA9IDI7XG5sZXQgVEFTS19GSU5JU0hFRCA9IDM7XG5sZXQgU0hPV19PVVRSTyA9IDQ7XG5sZXQgRVZFUllUSElOR19ET05FID0gNTtcbmV4cG9ydCBjbGFzcyBFeHBlcmltZW50YXRpb25fRm9yd2FyZGVyIGV4dGVuZHMgQXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyIHtcbiAgICBzaG93X2ludHJvKCkge1xuICAgICAgICB0aGlzLmVtcHR5X3NjcmVlbl9hbmRfc2hvd19pbnN0cnVjdGlvbnModGhpcy5wcmVfcnVuX2luc3RydWN0aW9ucyk7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLnByaW50X2V4cGVyaW1lbnRfbmFtZSh0aGlzLmZvcndhcmRlcl9uYW1lKTtcbiAgICB9XG4gICAgc2hvd19vdXRybygpIHtcbiAgICAgICAgdGhpcy5lbXB0eV9zY3JlZW5fYW5kX3Nob3dfaW5zdHJ1Y3Rpb25zKHRoaXMucG9zdF9ydW5faW5zdHJ1Y3Rpb25zKTtcbiAgICB9XG4gICAgYXV0b21hdGFfY29uZmlndXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gbmV3IEF1dG9tYXRhX0NvbmZpZ3VyYXRvcihbU0hPV19JTlRSTywgU0hPV19UQVNLLCBUQVNLX0ZJTklTSEVELCBTSE9XX09VVFJPLCBFVkVSWVRISU5HX0RPTkVdLCBTSE9XX0lOVFJPLCAoKSA9PiB7IH0sIHRoaXMudHJhbnNpdGlvbnMoKSwgW0VWRVJZVEhJTkdfRE9ORV0pO1xuICAgIH1cbiAgICBjdXJyZW50X3Rhc2soKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi50YXNrc1t0aGlzLmN1cnJlbnRfcGFnZV9pbmRleF07XG4gICAgfVxuICAgIDtcbiAgICBjb25zdHJ1Y3RvcihleHBlcmltZW50X2F1dG9tYXRhX25hbWUsIHByZV9ydW5faW5zdHJ1Y3Rpb25zLCBwb3N0X3J1bl9pbnN0cnVjdGlvbnMsIGV4cGVyaW1lbnRfZGVmaW5pdGlvbiwgbWVhc3VyZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoZXhwZXJpbWVudF9hdXRvbWF0YV9uYW1lLCBtZWFzdXJlbWVudCwgcHJlX3J1bl9pbnN0cnVjdGlvbnMsIHBvc3RfcnVuX2luc3RydWN0aW9ucyk7XG4gICAgICAgIHRoaXMuY3VycmVudF9wYWdlX2luZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuZXhwZXJpbWVudF9kZWZpbml0aW9uID0gZXhwZXJpbWVudF9kZWZpbml0aW9uO1xuICAgIH1cbiAgICBhdXRvbWF0YV9jb25maWd1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IEF1dG9tYXRhX0NvbmZpZ3VyYXRvcihbU0hPV19JTlRSTywgU0hPV19UQVNLLCBUQVNLX0ZJTklTSEVELCBTSE9XX09VVFJPLCBFVkVSWVRISU5HX0RPTkVdLCBTSE9XX0lOVFJPLCAoKSA9PiB7IH0sIHRoaXMudHJhbnNpdGlvbnMoKSwgW0VWRVJZVEhJTkdfRE9ORV0pO1xuICAgIH1cbiAgICB0cmFuc2l0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGZyb20oU0hPV19JTlRSTykudG8oU0hPV19UQVNLKVxuICAgICAgICAgICAgICAgIC5vbihcIkVudGVyXCIpXG4gICAgICAgICAgICAgICAgLmRvKChpKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJEdW1teSBFeHA6IEVudGVyIE9uIEV4cFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9leHBlcmltZW50X2luZGV4KDApO1xuICAgICAgICAgICAgICAgIHRoaXMubWVhc3VyZW1lbnQuc3RhcnRfbWVhc3VyZW1lbnQodGhpcy5jdXJyZW50X3Rhc2soKSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyb20oU0hPV19JTlRSTykudG8oU0hPV19PVVRSTykgLy8gU3RhdGU9MzogRXhwZXJpbWVudCBkb25lIC0ganVzdCB0aGUgbWVzc2FnZSBhZnRlcndhcmRzIHNob3duXG4gICAgICAgICAgICAgICAgLm9uKFwiRGVsZXRlXCIpXG4gICAgICAgICAgICAgICAgLmRvKChpKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJEdW1teSBFeHA6IERlbGV0ZSBPbiBFeHBcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93X291dHJvKCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyb20oU0hPV19UQVNLKS50byhTSE9XX09VVFJPKVxuICAgICAgICAgICAgICAgIC5vbihcIj8rQ29udHJvbFwiKVxuICAgICAgICAgICAgICAgIC5pZigoaSkgPT4gdHJ1ZSlcbiAgICAgICAgICAgICAgICAuZG8oKGkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lYXN1cmVtZW50LnN0b3BfbWVhc3VyZW1lbnQoaSwgdGhpcy5jdXJyZW50X3Rhc2soKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93X291dHJvKCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC8vIFNUQVRFIDE9VGFzayBpcyBzaG93biwgMj1JbnB1dCBjb3JyZWN0XG4gICAgICAgICAgICBmcm9tKFNIT1dfVEFTSykudG8oVEFTS19GSU5JU0hFRClcbiAgICAgICAgICAgICAgICAub25fYW55KHRoaXMubWVhc3VyZW1lbnQuYWNjZXB0ZWRfcmVzcG9uc2VzKCkpXG4gICAgICAgICAgICAgICAgLmlmKChpKSA9PiB0aGlzLmN1cnJlbnRfdGFzaygpLmFjY2VwdHNfYW5zd2VyKGkpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X3BhZ2VfaW5kZXggPCB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi50YXNrcy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICAgIC5kbygoaSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubWVhc3VyZW1lbnQuc3RvcF9tZWFzdXJlbWVudChpLCB0aGlzLmN1cnJlbnRfdGFzaygpKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgLy8gVGFzayBTaG93biAtIEluY29ycmVjdCBpbnB1dCA9PiBSZW1haW4gaW4gVGFza1xuICAgICAgICAgICAgZnJvbShTSE9XX1RBU0spLnRvKFNIT1dfVEFTSylcbiAgICAgICAgICAgICAgICAub25fYW55KHRoaXMubWVhc3VyZW1lbnQuYWNjZXB0ZWRfcmVzcG9uc2VzKCkpXG4gICAgICAgICAgICAgICAgLmlmKChpKSA9PiAhdGhpcy5jdXJyZW50X3Rhc2soKS5hY2NlcHRzX2Fuc3dlcihpKSAmJiAhdGhpcy5tZWFzdXJlbWVudC5kZW1hbmRzX3BlbmFsdHkoKSlcbiAgICAgICAgICAgICAgICAuZG8oKGkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lYXN1cmVtZW50LmluY29ycmVjdF9yZXNwb25zZShpLCB0aGlzLmN1cnJlbnRfdGFzaygpKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJvbShTSE9XX1RBU0spLnRvKFNIT1dfUEVOQUxUWSlcbiAgICAgICAgICAgICAgICAub25fYW55KHRoaXMubWVhc3VyZW1lbnQuYWNjZXB0ZWRfcmVzcG9uc2VzKCkpXG4gICAgICAgICAgICAgICAgLmlmKChpKSA9PiAhdGhpcy5jdXJyZW50X3Rhc2soKS5hY2NlcHRzX2Fuc3dlcihpKSAmJiB0aGlzLm1lYXN1cmVtZW50LmRlbWFuZHNfcGVuYWx0eSgpKVxuICAgICAgICAgICAgICAgIC5kbygoaSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubWVhc3VyZW1lbnQuaW5jb3JyZWN0X3Jlc3BvbnNlKGksIHRoaXMuY3VycmVudF90YXNrKCkpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcm9tKFNIT1dfUEVOQUxUWSkudG8oU0hPV19UQVNLKVxuICAgICAgICAgICAgICAgIC5vbihcIkVudGVyXCIpXG4gICAgICAgICAgICAgICAgLmlmKChpKSA9PiB0aGlzLm1lYXN1cmVtZW50LnBlbmFsdHlfaXNfb3ZlcigpKVxuICAgICAgICAgICAgICAgIC5kbygoaSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubWVhc3VyZW1lbnQuc3RhcnRfbWVhc3VyZW1lbnQodGhpcy5jdXJyZW50X3Rhc2soKSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC8vIEJldHdlZW4gVGFza3MgdG8gbmV4dCB0YXNrXG4gICAgICAgICAgICBmcm9tKFRBU0tfRklOSVNIRUQpLnRvKFNIT1dfVEFTSylcbiAgICAgICAgICAgICAgICAub24oXCJFbnRlclwiKVxuICAgICAgICAgICAgICAgIC5pZigoaSkgPT4gdGhpcy5jdXJyZW50X3BhZ2VfaW5kZXggPCB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi50YXNrcy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICAgIC5kbygoaSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jX2N1cnJlbnRfZXhwZXJpbWVudCgpO1xuICAgICAgICAgICAgICAgIHRoaXMubWVhc3VyZW1lbnQuc3RhcnRfbWVhc3VyZW1lbnQodGhpcy5jdXJyZW50X3Rhc2soKSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyb20oU0hPV19UQVNLKS50byhTSE9XX09VVFJPKSAvLyBTdGF0ZT0zOiBFeHBlcmltZW50IGRvbmUgLSBqdXN0IHRoZSBtZXNzYWdlIGFmdGVyd2FyZHMgc2hvd25cbiAgICAgICAgICAgICAgICAub25fYW55KHRoaXMubWVhc3VyZW1lbnQuYWNjZXB0ZWRfcmVzcG9uc2VzKCkpXG4gICAgICAgICAgICAgICAgLmlmKChpKSA9PiB0aGlzLmN1cnJlbnRfdGFzaygpLmFjY2VwdHNfYW5zd2VyKGkpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X3BhZ2VfaW5kZXggPT0gdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24udGFza3MubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICAuZG8oKGkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lYXN1cmVtZW50LnN0b3BfbWVhc3VyZW1lbnQoaSwgdGhpcy5jdXJyZW50X3Rhc2soKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93X291dHJvKCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyb20oU0hPV19PVVRSTykudG8oRVZFUllUSElOR19ET05FKVxuICAgICAgICAgICAgICAgIC5vbihcIkVudGVyXCIpXG4gICAgICAgICAgICAgICAgLmRvKChpKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGEgPSAxO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXTtcbiAgICB9XG4gICAgc2V0X2V4cGVyaW1lbnRfaW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X3BhZ2VfaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5vdXRwdXRfd3JpdGVyKCkucHJpbnRfc3RyaW5nX3RvX3BhZ2VfbnVtYmVyKFwiVGFzayBcIiArICh0aGlzLmN1cnJlbnRfcGFnZV9pbmRleCArIDEpICsgXCIgLyBcIiArIHRoaXMuZXhwZXJpbWVudF9kZWZpbml0aW9uLnRhc2tzLmxlbmd0aCk7XG4gICAgfVxuICAgIGluY19jdXJyZW50X2V4cGVyaW1lbnQoKSB7XG4gICAgICAgIHRoaXMuc2V0X2V4cGVyaW1lbnRfaW5kZXgoKyt0aGlzLmN1cnJlbnRfcGFnZV9pbmRleCk7XG4gICAgfVxuICAgIGluaXRfZXhwZXJpbWVudCgpIHtcbiAgICAgICAgdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24uaW5pdF9leHBlcmltZW50KGZhbHNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeHBlcmltZW50YXRpb25fRm9yd2FyZGVyLmpzLm1hcCIsImltcG9ydCB7IEF1dG9tYXRhX0NvbmZpZ3VyYXRvciB9IGZyb20gXCIuLi9BdXRvbWF0YS9BdXRvbWF0YV9Db25maWd1cmF0b3IuanNcIjtcbmltcG9ydCB7IGZyb20gfSBmcm9tIFwiLi4vQXV0b21hdGEvVHJhbnNpdGlvbnMuanNcIjtcbmltcG9ydCB7IEV4cGVyaW1lbnRhdGlvbl9Gb3J3YXJkZXIgfSBmcm9tIFwiLi9FeHBlcmltZW50YXRpb25fRm9yd2FyZGVyLmpzXCI7XG5sZXQgU0hPV19JTlRSTyA9IDA7XG5sZXQgU0hPV19UQVNLID0gMTtcbmxldCBTSE9XX1BFTkFMVFkgPSAyO1xubGV0IFRBU0tfRklOSVNIRUQgPSAzO1xubGV0IFNIT1dfT1VUUk8gPSA0O1xubGV0IEVWRVJZVEhJTkdfRE9ORSA9IDU7XG5sZXQgRVNDQVBFRCA9IDY7XG5leHBvcnQgY2xhc3MgVHJhaW5pbmdfRXhlY3V0aW9uX0ZvcndhcmRlciBleHRlbmRzIEV4cGVyaW1lbnRhdGlvbl9Gb3J3YXJkZXIge1xuICAgIGNvbnN0cnVjdG9yKHByZV9ydW5faW5zdHJ1Y3Rpb25zLCB0cmFpbmluZ19jb25maWd1cmF0aW9uLCBleHBlcmltZW50X2RlZmluaXRpb24sIG1lYXN1cmVtZW50KSB7XG4gICAgICAgIHN1cGVyKFwiVHJhaW5pbmdcIiwgKCkgPT4ge1xuICAgICAgICAgICAgcHJlX3J1bl9pbnN0cnVjdGlvbnMoKTtcbiAgICAgICAgICAgIG1lYXN1cmVtZW50Lm91dHB1dF93cml0ZXIoKS5wcmludF9odG1sX29uX3N0YWdlKFwiPGhyPlwiICtcbiAgICAgICAgICAgICAgICBcIlByZXNzIFtFbnRlcl0gdG8gc3RhcnQgdHJhaW5pbmcuXCIpO1xuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICBtZWFzdXJlbWVudC5vdXRwdXRfd3JpdGVyKCkucHJpbnRfaHRtbF9vbl9zdGFnZShcIllvdSBmaW5pc2hlZCB0aGUgdHJhaW5pbmcgcGhhc2UuPGhyPlwiICtcbiAgICAgICAgICAgICAgICAodHJhaW5pbmdfY29uZmlndXJhdGlvbi5jYW5fYmVfcmVwZWF0ZWQgPyBcIlBsZWFzZSwgcHJlc3MgW0VudGVyXSB0byBydW4gYWdhaW4gYSB0cmFpbmluZyBzZXNzaW9uLjxicj5cIiA6IFwiXCIpICtcbiAgICAgICAgICAgICAgICBcIlBsZWFzZSwgcHJlc3MgW0VdIChjYXBpdGFsIEUsIGkuZS4sIFtzaGlmdF0gKyBbZV0pIHRvIGVudGVyIHRoZSBleHBlcmltZW50IHBoYXNlLlwiKTtcbiAgICAgICAgfSwgZXhwZXJpbWVudF9kZWZpbml0aW9uLCBtZWFzdXJlbWVudCk7XG4gICAgICAgIHRoaXMudHJhaW5pbmdfY29uZmlndXJhdGlvbiA9IHRyYWluaW5nX2NvbmZpZ3VyYXRpb247XG4gICAgfVxuICAgIHByaW50X2NhbmNlbF90ZXh0KCkge1xuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIoKS5jbGVhcl9zdGFnZSgpO1xuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIoKS5wcmludF9zdHJpbmdfdG9fcGFnZV9udW1iZXIoXCJDYW5jZWxsZWRcIik7XG4gICAgICAgIGxldCBuYXZpZ2F0aW9uX3N0cmluZyA9IFwiWW91IGNhbmNlbGxlZCB0aGlzIHRyYWluaW5nIHNlc3Npb24uPGhyPlwiICtcbiAgICAgICAgICAgIFwiUHJlc3MgW0VudGVyXSBpZiB5b3Ugd2FudCB0byBzdGFydCBhbm90aGVyIHRyYWluaW5nIHNlc3Npb24uPGJyPlwiICtcbiAgICAgICAgICAgIFwiUHJlc3MgW0VdIChjYXBpdGFsIEUhKSBpZiB5b3Ugd2FudCB0byBzdGFydCB3aXRoIHRoZSBleHBlcmltZW50LlwiO1xuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIoKS5wcmludF9odG1sX29uX3N0YWdlKG5hdmlnYXRpb25fc3RyaW5nKTtcbiAgICB9XG4gICAgYXV0b21hdGFfY29uZmlndXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gbmV3IEF1dG9tYXRhX0NvbmZpZ3VyYXRvcihbU0hPV19JTlRSTywgU0hPV19UQVNLLCBTSE9XX1BFTkFMVFksIFRBU0tfRklOSVNIRUQsIFNIT1dfT1VUUk8sIEVWRVJZVEhJTkdfRE9ORSwgRVNDQVBFRF0sIFNIT1dfSU5UUk8sICgpID0+IHsgfSwgdGhpcy50cmFuc2l0aW9ucygpLCBbRVZFUllUSElOR19ET05FXSk7XG4gICAgfVxuICAgIHRyYW5zaXRpb25zKCkge1xuICAgICAgICBsZXQgZXhwZXJpbWVudF90cmFuc2l0aW9ucyA9IHN1cGVyLnRyYW5zaXRpb25zKCk7XG4gICAgICAgIGxldCB0aGlzX3RyYW5zaXRpb25zID0gW1xuICAgICAgICAgICAgZnJvbShTSE9XX0lOVFJPKS50byhFU0NBUEVEKVxuICAgICAgICAgICAgICAgIC5vbihcIkVzY2FwZVwiKVxuICAgICAgICAgICAgICAgIC5pZigoKSA9PiB0aGlzLnRyYWluaW5nX2NvbmZpZ3VyYXRpb24uY2FuX2JlX2NhbmNlbGxlZClcbiAgICAgICAgICAgICAgICAuZG8oKGkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaW50X2NhbmNlbF90ZXh0KCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyb20oU0hPV19UQVNLKS50byhFU0NBUEVEKVxuICAgICAgICAgICAgICAgIC5vbihcIkVzY2FwZVwiKVxuICAgICAgICAgICAgICAgIC5pZigoKSA9PiB0aGlzLnRyYWluaW5nX2NvbmZpZ3VyYXRpb24uY2FuX2JlX2NhbmNlbGxlZClcbiAgICAgICAgICAgICAgICAuZG8oKGkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaW50X2NhbmNlbF90ZXh0KCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyb20oVEFTS19GSU5JU0hFRCkudG8oRVNDQVBFRClcbiAgICAgICAgICAgICAgICAub24oXCJFc2NhcGVcIilcbiAgICAgICAgICAgICAgICAuaWYoKCkgPT4gdGhpcy5jdXJyZW50X3BhZ2VfaW5kZXggPCB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi50YXNrcy5sZW5ndGggLSAxICYmIHRoaXMudHJhaW5pbmdfY29uZmlndXJhdGlvbi5jYW5fYmVfY2FuY2VsbGVkKVxuICAgICAgICAgICAgICAgIC5kbygoaSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpbnRfY2FuY2VsX3RleHQoKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJvbShFU0NBUEVEKS50byhFVkVSWVRISU5HX0RPTkUpXG4gICAgICAgICAgICAgICAgLm9uKFwiRVwiKS5kbygoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGR1bW15ID0gMTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJvbShFU0NBUEVEKS50byhTSE9XX0lOVFJPKVxuICAgICAgICAgICAgICAgIC5vbihcIkVudGVyXCIpLmRvKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi5pbml0X2V4cGVyaW1lbnQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93X2ludHJvKCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyb20oU0hPV19PVVRSTykudG8oU0hPV19JTlRSTylcbiAgICAgICAgICAgICAgICAub24oXCJFbnRlclwiKVxuICAgICAgICAgICAgICAgIC5pZigoKSA9PiB0aGlzLnRyYWluaW5nX2NvbmZpZ3VyYXRpb24uY2FuX2JlX3JlcGVhdGVkKVxuICAgICAgICAgICAgICAgIC5kbygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24uaW5pdF9leHBlcmltZW50KHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd19pbnRybygpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcm9tKFNIT1dfT1VUUk8pLnRvKEVWRVJZVEhJTkdfRE9ORSlcbiAgICAgICAgICAgICAgICAub24oXCJFXCIpXG4gICAgICAgICAgICAgICAgLmRvKChpKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGR1bW15ID0gMTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF07XG4gICAgICAgIGV4cGVyaW1lbnRfdHJhbnNpdGlvbnMuc3BsaWNlKGV4cGVyaW1lbnRfdHJhbnNpdGlvbnMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXNfdHJhbnNpdGlvbnMuZm9yRWFjaCgoZSkgPT4gZXhwZXJpbWVudF90cmFuc2l0aW9ucy5wdXNoKGUpKTtcbiAgICAgICAgcmV0dXJuIGV4cGVyaW1lbnRfdHJhbnNpdGlvbnM7XG4gICAgfVxuICAgIGlucHV0KHMpIHtcbiAgICAgICAgaWYgKCFbXCJhXCIsIFwiYlwiLCBcImNcIl0uaW5jbHVkZXMocykgJiYgdGhpcy5hdXRvbWF0YS5jdXJyZW50X3N0YXRlICE9IDApXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIuaW5wdXQocyk7XG4gICAgICAgIHN1cGVyLmlucHV0KHMpO1xuICAgIH1cbiAgICBpbml0X2V4cGVyaW1lbnQoKSB7XG4gICAgICAgIHRoaXMudHJhaW5pbmdfY29uZmlndXJhdGlvbi5pbml0X2V4cGVyaW1lbnQodGhpcy5leHBlcmltZW50X2RlZmluaXRpb24pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYWluaW5nX0V4ZWN1dGlvbl9Gb3J3YXJkZXIuanMubWFwIiwiaW1wb3J0IHsgRXhwZXJpbWVudGF0aW9uX0ZvcndhcmRlciB9IGZyb20gXCIuL0V4cGVyaW1lbnRhdGlvbl9Gb3J3YXJkZXIuanNcIjtcbmV4cG9ydCBjbGFzcyBFeHBlcmltZW50X0ZvcndhcmRlciBleHRlbmRzIEV4cGVyaW1lbnRhdGlvbl9Gb3J3YXJkZXIge1xuICAgIGNvbnN0cnVjdG9yKHByZV9ydW5faW5zdHJ1Y3Rpb25zLCBleHBlcmltZW50X2RlZmluaXRpb24sIG1lYXN1cmVtZW50KSB7XG4gICAgICAgIHN1cGVyKFwiTWFpbiBFeHBlcmltZW50XCIsICgpID0+IHtcbiAgICAgICAgICAgIHByZV9ydW5faW5zdHJ1Y3Rpb25zKCk7XG4gICAgICAgICAgICBtZWFzdXJlbWVudC5vdXRwdXRfd3JpdGVyKCkucHJpbnRfaHRtbF9vbl9zdGFnZShcIjxocj5cIiArXG4gICAgICAgICAgICAgICAgXCJQcmVzcyBbRW50ZXJdIHRvIHN0YXJ0IHRoZSBleHBlcmltZW50LlwiKTtcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgbWVhc3VyZW1lbnQub3V0cHV0X3dyaXRlcigpLnByaW50X2h0bWxfb25fc3RhZ2UoXCJZb3UgZmluaXNoZWQgdGhlIGV4cGVyaW1lbnQgcGhhc2UuPGhyPlwiICtcbiAgICAgICAgICAgICAgICBcIlBsZWFzZSwgcHJlc3MgW0VudGVyXSB0byBnbyB0byB0aGUgbmV4dCBwaGFzZS48YnI+XCIpO1xuICAgICAgICB9LCBleHBlcmltZW50X2RlZmluaXRpb24sIG1lYXN1cmVtZW50KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeHBlcmltZW50X0ZvcndhcmRlci5qcy5tYXAiLCJpbXBvcnQgeyBFeHBlcmltZW50X0RlZmluaXRpb24gfSBmcm9tIFwiLi9FeHBlcmltZW50X0RlZmluaXRpb24uanNcIjtcbmltcG9ydCB7IEJvb2tfRm9yd2FyZGVyIH0gZnJvbSBcIi4uL0F1dG9tYXRhX0ZvcndhcmRlcnMvQm9va19Gb3J3YXJkZXIuanNcIjtcbmltcG9ydCB7IFNlcXVlbnRpYWxfRm9yd2FyZGVyX0ZvcndhcmRlciB9IGZyb20gXCIuLi9Cb29rcy9TZXF1ZW50aWFsX0ZvcndhcmRlcl9Gb3J3YXJkZXIuanNcIjtcbmltcG9ydCB7IFRyYWluaW5nX0V4ZWN1dGlvbl9Gb3J3YXJkZXIgfSBmcm9tIFwiLi4vQXV0b21hdGFfRm9yd2FyZGVycy9UcmFpbmluZ19FeGVjdXRpb25fRm9yd2FyZGVyLmpzXCI7XG5pbXBvcnQgeyBTRVRfU0VFRCB9IGZyb20gXCIuL0V4cGVyaW1lbnRhdGlvbi5qc1wiO1xuaW1wb3J0IHsgRXhwZXJpbWVudF9Gb3J3YXJkZXIgfSBmcm9tIFwiLi4vQXV0b21hdGFfRm9yd2FyZGVycy9FeHBlcmltZW50X0ZvcndhcmRlci5qc1wiO1xuaW1wb3J0IHsgUXVlc3Rpb25uYWlyZV9Gb3J3YXJkZXIgfSBmcm9tIFwiLi4vQXV0b21hdGFfRm9yd2FyZGVycy9RdWVzdGlvbm5haXJlX0ZvcndhcmRlci5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7IH1cbi8vIFRPRE86IEJvdGggY2xhc3NlcyBzaG91bGQgYmUgb25lISEhXG5leHBvcnQgY2xhc3MgQ29kZV9FeHBlcmltZW50X0RlZmluaXRpb24gZXh0ZW5kcyBFeHBlcmltZW50X0RlZmluaXRpb24ge1xuICAgIGNyZWF0ZV9jb2RlX2FsbF9leHBlcmltZW50X2F1dG9tYXRhcyhjZmcpIHtcbiAgICAgICAgbGV0IG91dHB1dF93cml0ZXIgPSBjZmcubWVhc3VyZW1lbnQub3V0cHV0X3dyaXRlcigpO1xuICAgICAgICBsZXQgaW50cm9kdWN0aW9uX2Jvb2sgPSBuZXcgQm9va19Gb3J3YXJkZXIoXCJJbnRyb2R1Y3Rpb25cIiwgY2ZnLmludHJvZHVjdGlvbl90ZXh0cywgY2ZnLm1lYXN1cmVtZW50KTtcbiAgICAgICAgbGV0IGVuZGluZ19ib29rID0gbmV3IEJvb2tfRm9yd2FyZGVyKFwiRmluaXNoXCIsIGNmZy5maW5pc2hfdGV4dHMsIGNmZy5tZWFzdXJlbWVudCk7XG4gICAgICAgIGVuZGluZ19ib29rLmF1dG9tYXRhLmFkZF9maW5pc2hfYWN0aW9uKCgpID0+IGNmZy5maW5pc2hfZnVuY3Rpb24oZXhwZXJpbWVudF9leGVjdXRpb25fZm9yd2FyZGVyLmV4cGVyaW1lbnRfZGVmaW5pdGlvbikpO1xuICAgICAgICBsZXQgZXhwZXJpbWVudF9leGVjdXRpb25fZm9yd2FyZGVyID0gbmV3IEV4cGVyaW1lbnRfRm9yd2FyZGVyKGNmZy5wcmVfcnVuX2V4cGVyaW1lbnRfb3V0cHV0LCB0aGlzLCBjZmcubWVhc3VyZW1lbnQpO1xuICAgICAgICBTRVRfU0VFRChjZmcuc2VlZCk7XG4gICAgICAgIGV4cGVyaW1lbnRfZXhlY3V0aW9uX2ZvcndhcmRlci5pbml0X2V4cGVyaW1lbnQoKTtcbiAgICAgICAgbGV0IGNsb25lZF9leHBlcmltZW50X2RlZmluaXRpb24gPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIGxldCB0cmFpbmluZ19mb3J3YXJkZXIgPSBuZXcgVHJhaW5pbmdfRXhlY3V0aW9uX0ZvcndhcmRlcihjZmcucHJlX3J1bl90cmFpbmluZ19vdXRwdXQsIGNmZy50cmFpbmluZ19jb25maWd1cmF0aW9uLCBjbG9uZWRfZXhwZXJpbWVudF9kZWZpbml0aW9uLCBjZmcubWVhc3VyZW1lbnQpO1xuICAgICAgICB0cmFpbmluZ19mb3J3YXJkZXIuaW5pdF9leHBlcmltZW50KCk7XG4gICAgICAgIGxldCBwb3N0X3F1ZXN0aW9ubmFpcmUgPSBudWxsO1xuICAgICAgICBpZiAoY2ZnLnBvc3RfcXVlc3Rpb25uYWlyZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBvc3RfcXVlc3Rpb25uYWlyZSA9IG5ldyBRdWVzdGlvbm5haXJlX0ZvcndhcmRlcihjZmcucG9zdF9xdWVzdGlvbm5haXJlLCBjZmcubWVhc3VyZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmb3J3YXJkZXJzID0gW107XG4gICAgICAgIGlmIChpbnRyb2R1Y3Rpb25fYm9vayAhPSBudWxsKSB7XG4gICAgICAgICAgICBmb3J3YXJkZXJzLnB1c2goaW50cm9kdWN0aW9uX2Jvb2spO1xuICAgICAgICB9XG4gICAgICAgIGZvcndhcmRlcnMucHVzaCh0cmFpbmluZ19mb3J3YXJkZXIpO1xuICAgICAgICBmb3J3YXJkZXJzLnB1c2goZXhwZXJpbWVudF9leGVjdXRpb25fZm9yd2FyZGVyKTtcbiAgICAgICAgaWYgKHBvc3RfcXVlc3Rpb25uYWlyZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBmb3J3YXJkZXJzLnB1c2gocG9zdF9xdWVzdGlvbm5haXJlKTtcbiAgICAgICAgICAgIGV4cGVyaW1lbnRfZXhlY3V0aW9uX2ZvcndhcmRlci5leHBlcmltZW50X2RlZmluaXRpb24ucXVlc3Rpb25uYWlyZXMucHVzaChwb3N0X3F1ZXN0aW9ubmFpcmUpO1xuICAgICAgICB9XG4gICAgICAgIGZvcndhcmRlcnMucHVzaChlbmRpbmdfYm9vayk7XG4gICAgICAgIGxldCBmb3J3YXJkZXIgPSBuZXcgU2VxdWVudGlhbF9Gb3J3YXJkZXJfRm9yd2FyZGVyKGZvcndhcmRlcnMpO1xuICAgICAgICByZXR1cm4gZm9yd2FyZGVyO1xuICAgIH1cbiAgICAvLyBXSEFURVZFUiBIQVBQRU5TIE9OIEVBUlRIIC0gVEhJUyBTSE9VTEQgT05MWSBCRSBVU0VEIEZPUiBUUkFJTklORyFcbiAgICBjbG9uZSgpIHtcbiAgICAgICAgbGV0IGNsb25lID0gbmV3IENvZGVfRXhwZXJpbWVudF9EZWZpbml0aW9uKHRoaXMudGVtcGxhdGUuZXhwZXJpbWVudF9uYW1lLCB0aGlzLmlzX3RyYWluaW5nLCB0aGlzLnRyZWF0bWVudHNfY29tYmluYXRvci5jbG9uZSgpLCB0aGlzLnRlbXBsYXRlLnZhcmlhYmxlcywgdGhpcy50ZW1wbGF0ZS5yZXBldGl0aW9ucywgdGhpcy5tZWFzdXJlbWVudCwgdGhpcy50ZW1wbGF0ZS50YXNrX2NyZWF0b3IpO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29kZV9FeHBlcmltZW50X0RlZmluaXRpb24uanMubWFwIiwiZXhwb3J0IGNsYXNzIFRyZWF0bWVudCB7XG4gICAgY29uc3RydWN0b3IodmFyaWFibGUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFyaWFibGUgPSB2YXJpYWJsZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IFwiXCIgKyB2YWx1ZTtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGxldCByZXQgPSBuZXcgVHJlYXRtZW50KHRoaXMudmFyaWFibGUsIHRoaXMudmFsdWUpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyZWF0bWVudC5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gbG9vcF93aXRoX2NvdW50ZXIoYXJyYXksIGYpIHtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgZm9yIChsZXQgZSBvZiB0aGlzLmFycmF5KSB7XG4gICAgICAgIGYoZSwgY291bnRlcisrKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gbG9vcF9ib3RoKGExLCBhMiwgZikge1xuICAgIGlmIChhMS5sZW5ndGggPiBhMi5sZW5ndGgpXG4gICAgICAgIHRocm93IFwiQ2Fubm90IGxvb3AgYm90aDogZmlyc3QgYXJyYXkgaGFzIGxlbmd0aDogXCIgKyBhMS5sZW5ndGggKyBcIiwgYnV0IHNlY29uZCBoYXMgbGVuZ3RoIFwiICsgYTIubGVuZ3RoO1xuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBmb3IgKGxldCBlIG9mIGExKSB7XG4gICAgICAgIGYoZSwgYTJbY291bnRlcisrXSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdChuLCBmKSB7XG4gICAgZm9yIChsZXQgYyA9IDA7IGMgPCBuOyBjKyspIHtcbiAgICAgICAgZihjKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb29wLmpzLm1hcCIsImV4cG9ydCBjbGFzcyBUcmVhdG1lbnRfQ29tYmluYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHRyZWF0bWVudF9jb21iaW5hdGlvbikge1xuICAgICAgICB0aGlzLnRyZWF0bWVudF9jb21iaW5hdGlvbiA9IFtdO1xuICAgICAgICB0aGlzLnRyZWF0bWVudF9jb21iaW5hdGlvbiA9IHRyZWF0bWVudF9jb21iaW5hdGlvbjtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGxldCByZXQgPSBuZXcgVHJlYXRtZW50X0NvbWJpbmF0aW9uKFtdKTtcbiAgICAgICAgZm9yIChsZXQgdHJlYXRtZW50IG9mIHRoaXMudHJlYXRtZW50X2NvbWJpbmF0aW9uKSB7XG4gICAgICAgICAgICByZXQudHJlYXRtZW50X2NvbWJpbmF0aW9uLnB1c2godHJlYXRtZW50LmNsb25lKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJlYXRtZW50X0NvbWJpbmF0aW9uLmpzLm1hcCIsImltcG9ydCB7IFRyZWF0bWVudCB9IGZyb20gXCIuL3RyZWF0bWVudHMvVHJlYXRtZW50LmpzXCI7XG5pbXBvcnQgeyBsb29wX2JvdGggfSBmcm9tIFwiLi4vdXRpbHMvbG9vcHMvbG9vcC5qc1wiO1xuaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuL1Rhc2suanNcIjtcbmltcG9ydCB7IFRyZWF0bWVudF9Db21iaW5hdGlvbiB9IGZyb20gXCIuL3RyZWF0bWVudHMvVHJlYXRtZW50X0NvbWJpbmF0aW9uLmpzXCI7XG5leHBvcnQgY2xhc3MgVHJhaW5pbmdfQ29uZmlndXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IodHJhaW5pbmdfY29uZmlndXJhdGlvbikge1xuICAgICAgICB0aGlzLmNhbl9iZV9jYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNhbl9iZV9yZXBlYXRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0cmFpbmluZ19jb25maWd1cmF0aW9uID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0cmFpbmluZ19jb25maWd1cmF0aW9uLmZpeGVkX3RyZWF0bWVudHMgIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhpcy5maXhlZF90cmVhdG1lbnRzID0gdHJhaW5pbmdfY29uZmlndXJhdGlvbi5maXhlZF90cmVhdG1lbnRzO1xuICAgICAgICB0aGlzLmNhbl9iZV9jYW5jZWxsZWQgPSB0cmFpbmluZ19jb25maWd1cmF0aW9uLmNhbl9iZV9jYW5jZWxsZWQ7XG4gICAgICAgIHRoaXMuY2FuX2JlX3JlcGVhdGVkID0gdHJhaW5pbmdfY29uZmlndXJhdGlvbi5jYW5fYmVfcmVwZWF0ZWQ7XG4gICAgfVxuICAgIGluaXRfZXhwZXJpbWVudChleHBlcmltZW50X2RlZmluaXRpb24pIHtcbiAgICAgICAgZXhwZXJpbWVudF9kZWZpbml0aW9uLnRhc2tzID0gW107XG4gICAgICAgIGlmICh0aGlzLmZpeGVkX3RyZWF0bWVudHMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBhX3RyZWF0bWVudF9jb21iaW5hdGlvbiBvZiB0aGlzLmZpeGVkX3RyZWF0bWVudHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgdHJlYXRtZW50X2NvbWJpbmF0aW9uID0gbmV3IFRyZWF0bWVudF9Db21iaW5hdGlvbihbXSk7XG4gICAgICAgICAgICAgICAgbG9vcF9ib3RoKGV4cGVyaW1lbnRfZGVmaW5pdGlvbi5hbGxfaW5kZXBlbmRlbnRfdmFyaWFibGVzKCksIGFfdHJlYXRtZW50X2NvbWJpbmF0aW9uLCAodmFyaWFibGUsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyZWF0bWVudF9jb21iaW5hdGlvbi50cmVhdG1lbnRfY29tYmluYXRpb24ucHVzaChuZXcgVHJlYXRtZW50KHZhcmlhYmxlLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxldCB0YXNrID0gbmV3IFRhc2sodHJlYXRtZW50X2NvbWJpbmF0aW9uLCBleHBlcmltZW50X2RlZmluaXRpb24sIFwiXCIpO1xuICAgICAgICAgICAgICAgIHRhc2suaXNfdHJhaW5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGV4cGVyaW1lbnRfZGVmaW5pdGlvbi5leHBlcmltZW50X2RlZmluaXRpb25fdGFza19jcmVhdG9yKHRhc2spO1xuICAgICAgICAgICAgICAgIGV4cGVyaW1lbnRfZGVmaW5pdGlvbi50YXNrcy5wdXNoKHRhc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXhwZXJpbWVudF9kZWZpbml0aW9uLmluaXRfZXhwZXJpbWVudCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYWluaW5nX0NvbmZpZ3VyYXRpb24uanMubWFwIiwiaW1wb3J0IHsgVHJlYXRtZW50IH0gZnJvbSBcIi4vVHJlYXRtZW50LmpzXCI7XG5leHBvcnQgY2xhc3MgSW5kZXBlbmRlbnRfVmFyaWFibGUge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHRyZWF0bWVudHMpIHtcbiAgICAgICAgdGhpcy50cmVhdG1lbnRzID0gW107XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIGZvciAobGV0IGFTdHJpbmcgb2YgdHJlYXRtZW50cykge1xuICAgICAgICAgICAgdGhpcy50cmVhdG1lbnRzLnB1c2gobmV3IFRyZWF0bWVudCh0aGlzLCBhU3RyaW5nKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbmRlcGVuZGVudF9WYXJpYWJsZS5qcy5tYXAiLCJmdW5jdGlvbiBhbGxfYXJyYXlfY29tYmluYXRpb25zX2ludGVybmFsKGFyciwgY29tYmluYXRpb24sIGYpIHtcbiAgICBpZiAoYXJyLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGYoY29tYmluYXRpb24pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGxhc3QgPSBhcnIuc2hpZnQoKTtcbiAgICAgICAgZm9yIChsZXQgZSBvZiBsYXN0KSB7XG4gICAgICAgICAgICBjb21iaW5hdGlvbi5wdXNoKGUpO1xuICAgICAgICAgICAgYWxsX2FycmF5X2NvbWJpbmF0aW9uc19pbnRlcm5hbChhcnIsIGNvbWJpbmF0aW9uLCBmKTtcbiAgICAgICAgICAgIGNvbWJpbmF0aW9uLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGFyci51bnNoaWZ0KGxhc3QpO1xuICAgIH1cbn1cbi8qKlxuICogIEBwYXJhbSBhcnI6IEFuIGFycmF5IG9mIGFycmF5c1xuICogIGV4ZWN1dGVzIGZvciBhbGwgY29tYmluYXRpb25zIG9yIGFycmF5cyB0aGUgZnVuY3Rpb24gZlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsX2FycmF5X2NvbWJpbmF0aW9ucyhhcnIsIGYpIHtcbiAgICBhbGxfYXJyYXlfY29tYmluYXRpb25zX2ludGVybmFsKGFyciwgW10sIGYpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWxsX2FycmF5X2NvbWJpbmF0aW9ucy5qcy5tYXAiLCJpbXBvcnQgeyBJbmRlcGVuZGVudF9WYXJpYWJsZSB9IGZyb20gXCIuL0luZGVwZW5kZW50X1ZhcmlhYmxlLmpzXCI7XG5pbXBvcnQgeyBhbGxfYXJyYXlfY29tYmluYXRpb25zIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2FycmF5cy9hbGxfYXJyYXlfY29tYmluYXRpb25zLmpzXCI7XG5pbXBvcnQgeyBUcmVhdG1lbnRfQ29tYmluYXRpb24gfSBmcm9tIFwiLi9UcmVhdG1lbnRfQ29tYmluYXRpb24uanNcIjtcbmV4cG9ydCBjbGFzcyBJbmRlcGVuZGVudF9WYXJpYWJsZXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmluZGVwZW5kZW50X3ZhcmlhYmxlcyA9IFtdO1xuICAgIH1cbiAgICBwdXNoX3ZhcmlhYmxlKG4sIHRyZWF0bWVudHMpIHtcbiAgICAgICAgdGhpcy5pbmRlcGVuZGVudF92YXJpYWJsZXMucHVzaChuZXcgSW5kZXBlbmRlbnRfVmFyaWFibGUobiwgdHJlYXRtZW50cykpO1xuICAgIH1cbiAgICBwcmludF90b19hcnJheShyZXN1bHQpIHtcbiAgICAgICAgZm9yIChsZXQgdmFyaWFibGUgb2YgdGhpcy5pbmRlcGVuZGVudF92YXJpYWJsZXMpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhcmlhYmxlLm5hbWUgKyBcIjtcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlX3RyZWF0bWVudF9jb21iaW5hdGlvbnMoKSB7XG4gICAgICAgIGxldCB0cmVhdG1lbnRfY29tYmluYXRpb25zID0gW107XG4gICAgICAgIGFsbF9hcnJheV9jb21iaW5hdGlvbnModGhpcy5pbmRlcGVuZGVudF92YXJpYWJsZXMubWFwKHQgPT4gdC50cmVhdG1lbnRzKSwgKHRyZWF0bWVudHMpID0+IHtcbiAgICAgICAgICAgIHRyZWF0bWVudF9jb21iaW5hdGlvbnMucHVzaChuZXcgVHJlYXRtZW50X0NvbWJpbmF0aW9uKFsuLi50cmVhdG1lbnRzXSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRyZWF0bWVudF9jb21iaW5hdGlvbnM7XG4gICAgfVxuICAgIGdldF92YXJpYWJsZV9uYW1lZCh2YXJfbmFtZSkge1xuICAgICAgICBmb3IgKGxldCB2IG9mIHRoaXMuaW5kZXBlbmRlbnRfdmFyaWFibGVzKSB7XG4gICAgICAgICAgICBpZiAodi5uYW1lID09PSB2YXJfbmFtZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBcIlVua25vd24gaW5kZXBlbmRlbnQgdmFyaWFibGUgbmFtZWQ6IFwiICsgdmFyX25hbWU7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tX2xheW91dChsYXlvdXQpIHtcbiAgICAgICAgbGV0IHZhcmlhYmxlcyA9IG5ldyBJbmRlcGVuZGVudF9WYXJpYWJsZXMoKTtcbiAgICAgICAgZm9yIChsZXQgYVZhciBvZiBsYXlvdXQpIHtcbiAgICAgICAgICAgIHZhcmlhYmxlcy5wdXNoX3ZhcmlhYmxlKGFWYXIudmFyaWFibGUsIGFWYXIudHJlYXRtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhcmlhYmxlcztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbmRlcGVuZGVudF9WYXJpYWJsZXMuanMubWFwIiwiaW1wb3J0IHsgRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyIH0gZnJvbSBcIi4vRXhwZXJpbWVudGF0aW9uLmpzXCI7XG5pbXBvcnQgeyBrZXlfZXZlbnRfc3RyaW5nLCBzYXZlX2ZpbGVfaW5faHRtbCB9IGZyb20gXCIuLi91dGlscy9VdGlscy5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlX2NvZGVfZXhwZXJpbWVudF9leGVjdXRpb24gfSBmcm9tIFwiLi9mdW5jdGlvbnMvY3JlYXRlX2NvZGVfZXhwZXJpbWVudF9leGVjdXRpb24uanNcIjtcbmV4cG9ydCBjbGFzcyBCcm93c2VyX091dHB1dF9Xcml0ZXIgZXh0ZW5kcyBFeHBlcmltZW50X091dHB1dF9Xcml0ZXIge1xuICAgIHByaW50X2V4cGVyaW1lbnRfbmFtZShzKSB7XG4gICAgICAgIHRoaXMuZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChcIlNUQVRFXCIpLmlubmVySFRNTCA9IHM7XG4gICAgfVxuICAgIGNsZWFyX2Vycm9yKCkge1xuICAgICAgICBsZXQgZWxlbWVudF9pZCA9IFtcbiAgICAgICAgICAgIFwiU1RBR0VfRVJST1JcIlxuICAgICAgICBdO1xuICAgICAgICBmb3IgKGxldCBlIG9mIGVsZW1lbnRfaWQpIHtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKTtcbiAgICAgICAgICAgIHdoaWxlIChwYXJlbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChwYXJlbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXJfc3RhZ2UoKSB7XG4gICAgICAgIGxldCBlbGVtZW50X2lkID0gW1xuICAgICAgICAgICAgXCJTVEFHRVwiLFxuICAgICAgICAgICAgXCJTVEFHRV9NU0dcIixcbiAgICAgICAgICAgIFwiU1RBR0VfRVJST1JcIlxuICAgICAgICBdO1xuICAgICAgICBmb3IgKGxldCBlIG9mIGVsZW1lbnRfaWQpIHtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKTtcbiAgICAgICAgICAgIHdoaWxlIChwYXJlbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChwYXJlbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXJfc3RhdGUoKSB7XG4gICAgICAgIGxldCBlbGVtZW50X2lkID0gW1xuICAgICAgICAgICAgXCJTVEFURVwiLFxuICAgICAgICAgICAgXCJUQVNLXCJcbiAgICAgICAgXTtcbiAgICAgICAgZm9yIChsZXQgZSBvZiBlbGVtZW50X2lkKSB7XG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZSk7XG4gICAgICAgICAgICB3aGlsZSAocGFyZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQocGFyZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHByaW50X2Vycm9yX3N0cmluZ19vbl9zdGFnZShzKSB7XG4gICAgICAgIGxldCBlID0gdGhpcy5nZXRfaHRtbF9lbGVtZW50X2J5X2lkKFwiU1RBR0VfRVJST1JcIik7XG4gICAgICAgIGUuaW5uZXJIVE1MID0gcztcbiAgICB9XG4gICAgZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChzKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHMpO1xuICAgIH1cbiAgICBwcmludF9zdHJpbmdfdG9fc3RhdGUocykge1xuICAgICAgICB0aGlzLmdldF9odG1sX2VsZW1lbnRfYnlfaWQoXCJTVEFURVwiKS5pbm5lckhUTUwgPSBzO1xuICAgIH1cbiAgICBwcmludF9zdHJpbmdfb25fc3RhZ2Uocykge1xuICAgICAgICB0aGlzLnByaW50X2h0bWxfb25fc3RhZ2UoXCI8cD5cIiArIHMgKyBcIjwvcD5cIik7XG4gICAgfVxuICAgIGFza19mb3JfaW5wdXQoKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbGV0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgbGV0IGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIGwuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICAgICAgcC50ZXh0Q29udGVudCA9IFwiQW5zd2VyOiBcIjtcbiAgICAgICAgcC5hcHBlbmRDaGlsZChsKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBsZXQgaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgaS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICAgICAgICBpLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnaW5wdXQnKTtcbiAgICAgICAgcC5hcHBlbmRDaGlsZChpKTtcbiAgICAgICAgaS5pZCA9IFwiSU5QVVRcIjtcbiAgICAgICAgdGhpcy5nZXRfaHRtbF9lbGVtZW50X2J5X2lkKFwiU1RBR0VcIikuYXBwZW5kQ2hpbGQocCk7XG4gICAgICAgIGkuZm9jdXMoKTtcbiAgICB9XG4gICAgc2V0X2ZvY3VzX29uX2lucHV0KCkge1xuICAgICAgICBsZXQgaSA9IHRoaXMuZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChcIklOUFVUXCIpO1xuICAgICAgICBpLmZvY3VzKCk7XG4gICAgfVxuICAgIHByaW50X3N0cmluZ190b19wYWdlX251bWJlcihzKSB7XG4gICAgICAgIHRoaXMuZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChcIlRBU0tcIikuaW5uZXJIVE1MID0gcztcbiAgICB9XG4gICAgZ2V0X2dpdmVuX2Fuc3dlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChcIklOUFVUXCIpLnZhbHVlO1xuICAgIH1cbiAgICBwcmludF9vbl9pbnB1dF9yZXNwb25zZShnaXZlbl9hbnN3ZXIpIHtcbiAgICAgICAgdGhpcy5nZXRfaHRtbF9lbGVtZW50X2J5X2lkKFwiSU5QVVRcIikudmFsdWUgPSBnaXZlbl9hbnN3ZXI7XG4gICAgfVxuICAgIGNyZWF0ZV9odG1sX2VsZW1lbnRfZnJvbV9zdHJpbmcocykge1xuICAgICAgICBsZXQgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgICBsZXQgZWxlbWVudHMgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHMsIFwidGV4dC9odG1sXCIpLmJvZHk7XG4gICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICB9XG4gICAgcHJpbnRfaHRtbF9vbl9zdGFnZShzKSB7XG4gICAgICAgIC8vIGZvcihsZXQgZSBvZiB0aGlzLmNyZWF0ZV9odG1sX2VsZW1lbnRfZnJvbV9zdHJpbmcocykpIHtcbiAgICAgICAgdGhpcy5nZXRfaHRtbF9lbGVtZW50X2J5X2lkKFwiU1RBR0VcIilcbiAgICAgICAgICAgIC5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZV9odG1sX2VsZW1lbnRfZnJvbV9zdHJpbmcocykpO1xuICAgICAgICAvLyB9XG4gICAgfVxuICAgIHByaW50X2h0bWxfb25fZXJyb3Iocykge1xuICAgICAgICAvLyBmb3IobGV0IGUgb2YgdGhpcy5jcmVhdGVfaHRtbF9lbGVtZW50X2Zyb21fc3RyaW5nKHMpKSB7XG4gICAgICAgIC8vICAgICB0aGlzLmdldF9odG1sX2VsZW1lbnRfYnlfaWQoXCJTVEFHRV9FUlJPUlwiKVxuICAgICAgICAvLyAgICAgICAgIC5hcHBlbmRDaGlsZChlKTtcbiAgICAgICAgLy8gfVxuICAgICAgICB0aGlzLmdldF9odG1sX2VsZW1lbnRfYnlfaWQoXCJTVEFHRV9FUlJPUlwiKVxuICAgICAgICAgICAgLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlX2h0bWxfZWxlbWVudF9mcm9tX3N0cmluZyhzKSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIEJST1dTRVJfRVhQRVJJTUVOVChjcmVhdG9yKSB7XG4gICAgbGV0IGJyb3dzZXJfb3V0cHV0ID0gbmV3IEJyb3dzZXJfT3V0cHV0X1dyaXRlcigpO1xuICAgIGxldCBjZmcgPSBjcmVhdG9yKGJyb3dzZXJfb3V0cHV0KTtcbiAgICBsZXQgdGhpc19tZWFzdXJlbWVudCA9IGNmZy5tZWFzdXJlbWVudChicm93c2VyX291dHB1dCk7XG4gICAgbGV0IGV4cGVyaW1lbnRfYXV0b21hdGEgPSBjcmVhdGVfY29kZV9leHBlcmltZW50X2V4ZWN1dGlvbih7XG4gICAgICAgIGV4cGVyaW1lbnRfbmFtZTogY2ZnLmV4cGVyaW1lbnRfbmFtZSxcbiAgICAgICAgc2VlZDogY2ZnLnNlZWQsXG4gICAgICAgIGludHJvZHVjdGlvbl9wYWdlczogY2ZnLmludHJvZHVjdGlvbl9wYWdlcyxcbiAgICAgICAgcG9zdF9xdWVzdGlvbm5haXJlOiBjZmcucG9zdF9xdWVzdGlvbm5haXJlLFxuICAgICAgICBwcmVfcnVuX3RyYWluaW5nX291dHB1dDogY2ZnLnByZV9ydW5fdHJhaW5pbmdfaW5zdHJ1Y3Rpb25zLFxuICAgICAgICB0cmFpbmluZ19jb25maWd1cmF0aW9uOiBjZmcudHJhaW5pbmdfY29uZmlndXJhdGlvbixcbiAgICAgICAgcHJlX3J1bl9leHBlcmltZW50X291dHB1dDogY2ZnLnByZV9ydW5fZXhwZXJpbWVudF9pbnN0cnVjdGlvbnMsXG4gICAgICAgIGZpbmlzaF9wYWdlczogY2ZnLmZpbmlzaF9wYWdlcyxcbiAgICAgICAgbGF5b3V0OiBjZmcubGF5b3V0LFxuICAgICAgICByZXBldGl0aW9uczogY2ZnLnJlcGV0aXRpb25zLFxuICAgICAgICB0YXNrX2NvbmZpZ3VyYXRpb246IGNmZy50YXNrX2NvbmZpZ3VyYXRpb24sXG4gICAgICAgIG1lYXN1cmVtZW50OiB0aGlzX21lYXN1cmVtZW50LFxuICAgICAgICBmaW5pc2hfZnVuY3Rpb246IChleHApID0+IHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGtleV9mb3J3YXJkZXIpO1xuICAgICAgICAgICAgc2F2ZV9maWxlX2luX2h0bWwoXCJleHBlcmltZW50ZGF0YS5jc3ZcIiwgZXhwLmdlbmVyYXRlX2Nzdl9kYXRhKCkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbGV0IGtleV9mb3J3YXJkZXIgPSAoZSkgPT4ge1xuICAgICAgICBsZXQga2V5X3N0cmluZyA9IGtleV9ldmVudF9zdHJpbmcoZSk7XG4gICAgICAgIGV4cGVyaW1lbnRfYXV0b21hdGEuaW5wdXQoa2V5X3N0cmluZyk7XG4gICAgfTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwga2V5X2ZvcndhcmRlciwgZmFsc2UpO1xuICAgIGV4cGVyaW1lbnRfYXV0b21hdGEuc2V0X2FjdGl2ZSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnJvd3Nlcl9PdXRwdXRfV3JpdGVyLmpzLm1hcCIsIi8qXG5QYXJ0aXRpb25zIGEgZ2l2ZW4gaW50ZWdlciBpbnRvIGl0cyBwYXJ0cyAtIGluY2x1ZGluZyBhbGwgY29tYmluYXRpb25zXG5lZzogKDEpID0+ICgxKVxuICAgICgyKSA9PiAoMiksICgxLCAxKVxuICAgICgzKSA9PiAoMyksICgyLCAxKSwgKDEsIDIpLCAoMSwgMSwgMSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVnZXJfcGFydGl0aW9uX2Z1bmN0aW9uKG4pIHtcbiAgICBsZXQgcmV0ID0gW107XG4gICAgaWYgKG4gPT0gMClcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IG47IGkrKykge1xuICAgICAgICBsZXQgcGFydGl0aW9ucyA9IGludGVnZXJfcGFydGl0aW9uX2Z1bmN0aW9uKG4gLSBpKTtcbiAgICAgICAgZm9yIChsZXQgcGFydCBvZiBwYXJ0aXRpb25zKSB7XG4gICAgICAgICAgICBsZXQgcm93ID0gW2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgciBvZiBwYXJ0KSB7XG4gICAgICAgICAgICAgICAgcm93LnB1c2gocik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXQucHVzaChyb3cpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aXRpb25zLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgcmV0LnB1c2goW25dKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHRlc3RfaW50ZWdlcl9wYXJ0aXRpb25fZnVuY3Rpb24oKSB7XG4gICAgbGV0IHBhcnRpdGlvbiA9IFtdO1xuICAgIHBhcnRpdGlvbiA9IGludGVnZXJfcGFydGl0aW9uX2Z1bmN0aW9uKDUpO1xuICAgIHBhcnRpdGlvbiA9IGludGVnZXJfcGFydGl0aW9uX2Z1bmN0aW9uKDApO1xufVxudGVzdF9pbnRlZ2VyX3BhcnRpdGlvbl9mdW5jdGlvbigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZWdlcl9wYXJ0aXRpb24uanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzX3RydWUoZXhwLCBhU3RyaW5nID0gXCJcIiwgZGVidWcgPSBmYWxzZSkge1xuICAgIGlmICghZXhwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYVN0cmluZyk7XG4gICAgICAgIHRocm93IFwiV3Jvbmc6IFwiICsgYVN0cmluZztcbiAgICB9XG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiT2s6IFwiICsgYVN0cmluZyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGVzdGluZy5qcy5tYXAiLCJpbXBvcnQgeyBpbnRlZ2VyX3BhcnRpdGlvbl9mdW5jdGlvbiB9IGZyb20gXCIuLi9udW1lcmljL2ludGVnZXJfcGFydGl0aW9uLmpzXCI7XG5pbXBvcnQgeyBhbGxfYXJyYXlfY29tYmluYXRpb25zIH0gZnJvbSBcIi4uL3V0aWxzL2FycmF5cy9hbGxfYXJyYXlfY29tYmluYXRpb25zLmpzXCI7XG5pbXBvcnQgeyBpc190cnVlIH0gZnJvbSBcIi4uL3V0aWxzL1Rlc3RpbmcuanNcIjtcbmltcG9ydCB7IHJlcGVhdCB9IGZyb20gXCIuLi91dGlscy9sb29wcy9sb29wLmpzXCI7XG5leHBvcnQgY2xhc3MgVHJlZSB7XG4gICAgY29uc3RydWN0b3IoY29udGVudCwgY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGxldCBjaGlsZF9jbG9uZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgY2hpbGRfY2xvbmVzLnB1c2goY2hpbGQuY2xvbmUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBUcmVlKHRoaXMuY29udGVudCwgY2hpbGRfY2xvbmVzKTtcbiAgICB9XG4gICAgcHJlb3JkZXIoZikge1xuICAgICAgICBmKHRoaXMpO1xuICAgICAgICBmb3IgKGxldCB0IG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHQucHJlb3JkZXIoZik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcG9zdG9yZGVyKGYpIHtcbiAgICAgICAgZm9yIChsZXQgdCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICB0LnBvc3RvcmRlcihmKTtcbiAgICAgICAgfVxuICAgICAgICBmKHRoaXMpO1xuICAgIH1cbiAgICBkaXN0YW5jZV9TSDAxKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgIGlmICh0aGlzID09IHNvdXJjZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZnRfZGlzdGFuY2VfU0gwMSh0YXJnZXQpIC0gMTtcbiAgICAgICAgaWYgKHRoaXMgPT0gdGFyZ2V0KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmlnaHRfZGlzdGFuY2VfU0gwMShzb3VyY2UpIC0gMTtcbiAgICAgICAgbGV0IHNvdXJjZV9jaGlsZCA9IG51bGw7XG4gICAgICAgIGxldCB0YXJnZXRfY2hpbGQgPSBudWxsO1xuICAgICAgICBsZXQgZGlzdGFuY2UgPSAxO1xuICAgICAgICBmb3IgKGxldCBjIG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjLmNvbnRhaW5zX25vZGUoc291cmNlKSlcbiAgICAgICAgICAgICAgICBzb3VyY2VfY2hpbGQgPSBjO1xuICAgICAgICAgICAgaWYgKGMuY29udGFpbnNfbm9kZSh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRhcmdldF9jaGlsZCA9IGM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZV9jaGlsZCA9PT0gbnVsbCB8fCB0YXJnZXRfY2hpbGQgPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBcInNob3VsZCBub3QgYmVcIjtcbiAgICAgICAgaWYgKHNvdXJjZV9jaGlsZCA9PT0gdGFyZ2V0X2NoaWxkKVxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZV9jaGlsZC5kaXN0YW5jZV9TSDAxKHNvdXJjZSwgdGFyZ2V0KTtcbiAgICAgICAgbGV0IGlubmVyX25vZGVzID0gdGhpcy5jaGlsZHJlbi5zbGljZSh0aGlzLmNoaWxkcmVuLmluZGV4T2Yoc291cmNlX2NoaWxkKSArIDEsIHRoaXMuY2hpbGRyZW4uaW5kZXhPZih0YXJnZXRfY2hpbGQpIC0gMSk7XG4gICAgICAgIGZvciAobGV0IG4gb2YgaW5uZXJfbm9kZXMpIHtcbiAgICAgICAgICAgIGRpc3RhbmNlICs9IG4ubnVtYmVyX29mX25vZGVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGlzdGFuY2UgKz0gc291cmNlX2NoaWxkLnJpZ2h0X2Rpc3RhbmNlX1NIMDEoc291cmNlKTtcbiAgICAgICAgZGlzdGFuY2UgKz0gdGFyZ2V0X2NoaWxkLmxlZnRfZGlzdGFuY2VfU0gwMSh0YXJnZXQpO1xuICAgICAgICByZXR1cm4gZGlzdGFuY2U7XG4gICAgfVxuICAgIHJpZ2h0X2Rpc3RhbmNlX1NIMDEobm9kZSkge1xuICAgICAgICBsZXQgcmVsZXZhbnRfY2hpbGQgPSBudWxsO1xuICAgICAgICBsZXQgcmlnaHRfZGlzdGFuY2UgPSAxO1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcylcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBmb3IgKGxldCBjIG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjLmNvbnRhaW5zX25vZGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICByZWxldmFudF9jaGlsZCA9IGM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbGV2YW50X2NoaWxkID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgXCJzaG91bGQgbm90IGJlXCI7XG4gICAgICAgIGxldCByaWdodF90cmVlcyA9IHRoaXMuY2hpbGRyZW4uc2xpY2UodGhpcy5jaGlsZHJlbi5pbmRleE9mKHJlbGV2YW50X2NoaWxkKSArIDEpO1xuICAgICAgICBmb3IgKGxldCByIG9mIHJpZ2h0X3RyZWVzKSB7XG4gICAgICAgICAgICByaWdodF9kaXN0YW5jZSArPSByLm51bWJlcl9vZl9ub2RlcygpO1xuICAgICAgICB9XG4gICAgICAgIHJpZ2h0X2Rpc3RhbmNlICs9IHJlbGV2YW50X2NoaWxkLnJpZ2h0X2Rpc3RhbmNlX1NIMDEobm9kZSk7XG4gICAgICAgIHJldHVybiByaWdodF9kaXN0YW5jZTtcbiAgICB9XG4gICAgbGVmdF9kaXN0YW5jZV9TSDAxKG5vZGUpIHtcbiAgICAgICAgbGV0IHJlbGV2YW50X2NoaWxkID0gbnVsbDtcbiAgICAgICAgbGV0IGxlZnRfZGlzdGFuY2UgPSAxO1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcylcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBmb3IgKGxldCBjIG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjLmNvbnRhaW5zX25vZGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICByZWxldmFudF9jaGlsZCA9IGM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbGV2YW50X2NoaWxkID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgXCJzaG91bGQgbm90IGJlXCI7XG4gICAgICAgIGxldCByZWxldmFudF9jaGlsZF9pbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZihyZWxldmFudF9jaGlsZCk7XG4gICAgICAgIGxldCBsZWZ0X3RyZWVzID0gdGhpcy5jaGlsZHJlbi5zbGljZSgwLCByZWxldmFudF9jaGlsZF9pbmRleCk7XG4gICAgICAgIGZvciAobGV0IGwgb2YgbGVmdF90cmVlcykge1xuICAgICAgICAgICAgbGVmdF9kaXN0YW5jZSArPSBsLm51bWJlcl9vZl9ub2RlcygpO1xuICAgICAgICB9XG4gICAgICAgIGxlZnRfZGlzdGFuY2UgKz0gcmVsZXZhbnRfY2hpbGQubGVmdF9kaXN0YW5jZV9TSDAxKG5vZGUpO1xuICAgICAgICByZXR1cm4gbGVmdF9kaXN0YW5jZTtcbiAgICB9XG4gICAgcGF0aF9sZW5ndGhfZnJvbV90aGlzKG4pIHtcbiAgICAgICAgaWYgKHRoaXMgPT09IG4pXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gMDtcbiAgICAgICAgZm9yIChsZXQgYyBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBsZXQgZCA9IGMucGF0aF9sZW5ndGhfZnJvbV90aGlzKG4pO1xuICAgICAgICAgICAgaWYgKGQgPiAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBkICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIG51bWJlcl9vZl9ub2RlcygpIHtcbiAgICAgICAgbGV0IG51bWJlciA9IDE7XG4gICAgICAgIGZvciAobGV0IGMgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgbnVtYmVyICs9IGMubnVtYmVyX29mX25vZGVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG4gICAgY29udGFpbnNfbm9kZShuKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBuKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgYyBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMuY29udGFpbnNfbm9kZShuKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZV9mbGF0X3RyZWVzKG51bWJlcl9vZl9jaGlsZHJlbikge1xuICAgIGxldCByZXQgPSBuZXcgVHJlZShudWxsLCBbXSk7XG4gICAgcmVwZWF0KG51bWJlcl9vZl9jaGlsZHJlbiAtIDEsIChjb3VudGVyKSA9PiB7XG4gICAgICAgIHJldC5jaGlsZHJlbi5wdXNoKG5ldyBUcmVlKG51bGwsIFtdKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtyZXRdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlX3RyZWVzKG51bWJlcl9vZl9ub2Rlcykge1xuICAgIGlmIChudW1iZXJfb2Zfbm9kZXMgPT0gMSkge1xuICAgICAgICByZXR1cm4gW25ldyBUcmVlKG51bGwsIFtdKV07XG4gICAgfVxuICAgIGxldCByZXQgPSBbXTtcbiAgICBsZXQgcGFydGl0aW9ucyA9IGludGVnZXJfcGFydGl0aW9uX2Z1bmN0aW9uKG51bWJlcl9vZl9ub2RlcyAtIDEpO1xuICAgIGZvciAobGV0IHAgb2YgcGFydGl0aW9ucykge1xuICAgICAgICBsZXQgdGhpc19wYXJ0aXRpb24gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgcCkge1xuICAgICAgICAgICAgdGhpc19wYXJ0aXRpb24ucHVzaChnZW5lcmF0ZV90cmVlcyhjaGlsZCkpO1xuICAgICAgICB9XG4gICAgICAgIGFsbF9hcnJheV9jb21iaW5hdGlvbnModGhpc19wYXJ0aXRpb24sIGUgPT4ge1xuICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gW107XG4gICAgICAgICAgICBlLmZvckVhY2godCA9PiBjaGlsZHJlbi5wdXNoKHQuY2xvbmUoKSkpO1xuICAgICAgICAgICAgcmV0LnB1c2gobmV3IFRyZWUobnVsbCwgY2hpbGRyZW4pKTtcbiAgICAgICAgICAgIC8vIHJldC5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB0KGNoaWxkcmVuID0gW10pIHtcbiAgICByZXR1cm4gbmV3IFRyZWUobnVsbCwgY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gdGVzdF9kaXN0YW5jZV9TSDAxKGRlYnVnKSB7XG4gICAgbGV0IHNvdXJjZSA9IG5ldyBUcmVlKFwic291cmNlXCIsIFtdKTtcbiAgICBsZXQgdGFyZ2V0ID0gbmV3IFRyZWUoXCJ0YXJnZXRcIiwgW10pO1xuICAgIGxldCBkaXN0YW5jZSA9IC0xO1xuICAgIGxldCB0cmVlID0gbnVsbDtcbiAgICB0cmVlID0gdChbXG4gICAgICAgIHQoW3QoKSwgdCgpLCB0KCldKSxcbiAgICAgICAgdChbdCgpLCB0KFtzb3VyY2UsIHRhcmdldF0pLCB0KCldKVxuICAgIF0pO1xuICAgIGRpc3RhbmNlID0gdHJlZS5kaXN0YW5jZV9TSDAxKHNvdXJjZSwgdGFyZ2V0KTtcbiAgICBpc190cnVlKGRpc3RhbmNlID09IDEsIFwiZGlzdGFuY2UgPSAxXCIsIGRlYnVnKTtcbiAgICB0cmVlID0gdChbXG4gICAgICAgIHQoW3QoKSwgdChbc291cmNlLCB0YXJnZXRdKSwgdCgpXSksXG4gICAgICAgIHQoW3QoKSwgdCgpLCB0KCldKVxuICAgIF0pO1xuICAgIGRpc3RhbmNlID0gdHJlZS5kaXN0YW5jZV9TSDAxKHNvdXJjZSwgdGFyZ2V0KTtcbiAgICBpc190cnVlKGRpc3RhbmNlID09IDEsIFwiZGlzdGFuY2UgPSAxXCIsIGRlYnVnKTtcbiAgICB0cmVlID0gdChbXG4gICAgICAgIHQoW3QoKSwgdChbc291cmNlXSksIHQoKV0pLFxuICAgICAgICB0KFt0KCksIHQoKSwgdGFyZ2V0LCB0KCldKVxuICAgIF0pO1xuICAgIGRpc3RhbmNlID0gdHJlZS5kaXN0YW5jZV9TSDAxKHNvdXJjZSwgdGFyZ2V0KTtcbiAgICBpc190cnVlKGRpc3RhbmNlID09IDcsIFwiZGlzdGFuY2UgPSA3XCIsIGRlYnVnKTtcbiAgICB0cmVlID0gdChbXG4gICAgICAgIHQoW3QoKSwgdChbc291cmNlXSksIHQoKV0pLFxuICAgICAgICB0KFt0KCksIHRhcmdldCwgdCgpXSlcbiAgICBdKTtcbiAgICBkaXN0YW5jZSA9IHRyZWUuZGlzdGFuY2VfU0gwMShzb3VyY2UsIHRhcmdldCk7XG4gICAgaXNfdHJ1ZShkaXN0YW5jZSA9PSA2LCBcImRpc3RhbmNlID0gNlwiLCBkZWJ1Zyk7XG4gICAgdHJlZSA9IHQoW1xuICAgICAgICB0KFt0KCksIHNvdXJjZSwgdCgpXSksXG4gICAgICAgIHQoW3QoKSwgdCgpLCB0YXJnZXQsIHQoKV0pXG4gICAgXSk7XG4gICAgZGlzdGFuY2UgPSB0cmVlLmRpc3RhbmNlX1NIMDEoc291cmNlLCB0YXJnZXQpO1xuICAgIGlzX3RydWUoZGlzdGFuY2UgPT0gNiwgXCJkaXN0YW5jZSA9IDZcIiwgZGVidWcpO1xuICAgIHRyZWUgPSB0KFtcbiAgICAgICAgdChbc291cmNlLCB0KCldKSxcbiAgICAgICAgdChbdCgpLCB0YXJnZXQsIHQoKV0pXG4gICAgXSk7XG4gICAgZGlzdGFuY2UgPSB0cmVlLmRpc3RhbmNlX1NIMDEoc291cmNlLCB0YXJnZXQpO1xuICAgIGlzX3RydWUoZGlzdGFuY2UgPT0gNSwgXCJkaXN0YW5jZSA9IDVcIiwgZGVidWcpO1xuICAgIHRyZWUgPSB0KFtcbiAgICAgICAgdChbc291cmNlLCB0KCldKSxcbiAgICAgICAgdChbdCgpLCB0YXJnZXRdKVxuICAgIF0pO1xuICAgIGRpc3RhbmNlID0gdHJlZS5kaXN0YW5jZV9TSDAxKHNvdXJjZSwgdGFyZ2V0KTtcbiAgICBpc190cnVlKGRpc3RhbmNlID09IDUsIFwiZGlzdGFuY2UgPSA1XCIsIGRlYnVnKTtcbiAgICB0cmVlID0gdChbXG4gICAgICAgIHQoW3NvdXJjZSwgdCgpXSksXG4gICAgICAgIHQoW3RhcmdldF0pXG4gICAgXSk7XG4gICAgZGlzdGFuY2UgPSB0cmVlLmRpc3RhbmNlX1NIMDEoc291cmNlLCB0YXJnZXQpO1xuICAgIGlzX3RydWUoZGlzdGFuY2UgPT0gNCwgXCJkaXN0YW5jZSA9IDRcIiwgZGVidWcpO1xuICAgIHRyZWUgPSBzb3VyY2UuY2xvbmUoKTtcbiAgICB0cmVlLmNoaWxkcmVuID0gW3RhcmdldF07XG4gICAgZGlzdGFuY2UgPSB0cmVlLmRpc3RhbmNlX1NIMDEodHJlZSwgdGFyZ2V0KTtcbiAgICBpc190cnVlKGRpc3RhbmNlID09IDAsIFwiZGlzdGFuY2UgPSAwIChzb3VyY2U9PXJvb3QpXCIsIGRlYnVnKTtcbiAgICB0cmVlID0gdGFyZ2V0LmNsb25lKCk7XG4gICAgdHJlZS5jaGlsZHJlbiA9IFtzb3VyY2VdO1xuICAgIGRpc3RhbmNlID0gdHJlZS5kaXN0YW5jZV9TSDAxKHNvdXJjZSwgdHJlZSk7XG4gICAgaXNfdHJ1ZShkaXN0YW5jZSA9PSAwLCBcImRpc3RhbmNlID0gMCAodGFyZ2V0PT1yb290KVwiLCBkZWJ1Zyk7XG4gICAgLypcbiAgICAgICAgICAvIFxcID0gMVxuICAgICAgICAgcyAgIHQgICAgICAgICAgICAgICovXG4gICAgdHJlZSA9IHQoW1xuICAgICAgICBzb3VyY2UsXG4gICAgICAgIHRhcmdldFxuICAgIF0pO1xuICAgIGRpc3RhbmNlID0gdHJlZS5kaXN0YW5jZV9TSDAxKHNvdXJjZSwgdGFyZ2V0KTtcbiAgICBpc190cnVlKGRpc3RhbmNlID09IDEsIFwiZGlzdGFuY2UgPSAxXCIsIGRlYnVnKTtcbiAgICAvKlxuICAgICAgICAgIC8gXFxcbiAgICAgICAgIC8gICB0ID0gM1xuICAgICAgICBzICAgICAgICAgICAgICAqL1xuICAgIHRyZWUgPSB0KFtcbiAgICAgICAgdChbc291cmNlXSksXG4gICAgICAgIHRhcmdldFxuICAgIF0pO1xuICAgIGRpc3RhbmNlID0gdHJlZS5kaXN0YW5jZV9TSDAxKHNvdXJjZSwgdGFyZ2V0KTtcbiAgICBpc190cnVlKGRpc3RhbmNlID09IDIsIFwiZGlzdGFuY2UgPSAyXCIsIGRlYnVnKTtcbiAgICB0cmVlID0gdChbXG4gICAgICAgIHQoW3NvdXJjZSwgdCgpXSksXG4gICAgICAgIHRhcmdldFxuICAgIF0pO1xuICAgIGRpc3RhbmNlID0gdHJlZS5kaXN0YW5jZV9TSDAxKHNvdXJjZSwgdGFyZ2V0KTtcbiAgICBpc190cnVlKGRpc3RhbmNlID09IDMsIFwiZGlzdGFuY2UgPSAzXCIsIGRlYnVnKTtcbn1cbmxldCBhID0gWzEsIDJdO1xubGV0IGIgPSBhLnNsaWNlKDAsIDEpO1xudGVzdF9kaXN0YW5jZV9TSDAxKHRydWUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJlZS5qcy5tYXAiLCJpbXBvcnQgeyBkb19yYW5kb21fYXJyYXlfc29ydCB9IGZyb20gXCIuLi8uLi8uLi9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9FeHBlcmltZW50YXRpb24uanNcIjtcbmV4cG9ydCBjbGFzcyBDbGFzc19EZWZpbml0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihjbGFzc19uYW1lLCBwYXJhbWV0ZXJfbmFtZXMsIHR5cGVfbmFtZXMsIG1ldGhvZF9uYW1lKSB7XG4gICAgICAgIHRoaXMucGFyYW1ldGVyX25hbWVzID0gW107XG4gICAgICAgIHRoaXMucGFyYW1ldGVyX29yZGVyaW5nID0gW107XG4gICAgICAgIHRoaXMuY2xhc3NfbmFtZSA9IGNsYXNzX25hbWU7XG4gICAgICAgIHRoaXMucGFyYW1ldGVyX3R5cGVfbmFtZXMgPSB0eXBlX25hbWVzO1xuICAgICAgICB0aGlzLm1ldGhvZF9uYW1lID0gbWV0aG9kX25hbWU7XG4gICAgICAgIHRoaXMucGFyYW1ldGVyX25hbWVzID0gcGFyYW1ldGVyX25hbWVzO1xuICAgICAgICBsZXQgY291bnRlciA9IDA7XG4gICAgICAgIHBhcmFtZXRlcl9uYW1lcy5mb3JFYWNoKGUgPT4gdGhpcy5wYXJhbWV0ZXJfb3JkZXJpbmcucHVzaChjb3VudGVyKyspKTtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJfb3JkZXJpbmcgPSBkb19yYW5kb21fYXJyYXlfc29ydCh0aGlzLnBhcmFtZXRlcl9vcmRlcmluZyk7XG4gICAgfVxuICAgIHR5cGVfc2lnbmF0dXJlX3N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3NfbmFtZSArIFwiKFwiICsgdGhpcy5wYXJhbWV0ZXJfdHlwZV9uYW1lcy5qb2luKFwiLCBcIikgKyBcIilcIjtcbiAgICB9XG4gICAgcHJpbnRfaHRtbF9pbnRvX2FycmF5KG91dCwgY2xhc3NlcywgdHlwZWQpIHtcbiAgICAgICAgbGV0IG9wdGlvbmFsX2xpbmVfYnJlYWsgPSAodGhpcy5wYXJhbWV0ZXJfbmFtZXMubGVuZ3RoID4gMCkgPyBcIjxici8+XCIgOiBcIlwiO1xuICAgICAgICBsZXQgY29uc3RydWN0b3JfcGFyYW1zID0gW107XG4gICAgICAgIGZvciAobGV0IHBhcmFtX2NvdW50ZXIgPSAwOyBwYXJhbV9jb3VudGVyIDwgdGhpcy5wYXJhbWV0ZXJfbmFtZXMubGVuZ3RoOyBwYXJhbV9jb3VudGVyKyspIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yX3BhcmFtcy5wdXNoKCh0eXBlZCA/IHRoaXMucGFyYW1ldGVyX3R5cGVfbmFtZXNbcGFyYW1fY291bnRlcl0gKyBcIiBcIiA6IFwiXCIpICsgdGhpcy5wYXJhbWV0ZXJfbmFtZXNbcGFyYW1fY291bnRlcl0pO1xuICAgICAgICB9XG4gICAgICAgIG91dC5wdXNoKFwiY2xhc3MgXCIgKyB0aGlzLmNsYXNzX25hbWUgKyBcIiB7PGJyLz48YnIvPlwiKTtcbiAgICAgICAgb3V0LnB1c2goXCImbmJzcDsmbmJzcDtcIiArIHRoaXMuY2xhc3NfbmFtZSArIFwiKFwiICsgY29uc3RydWN0b3JfcGFyYW1zLmpvaW4oXCIsJm5ic3A7XCIpICsgXCIpIHtcIiArIG9wdGlvbmFsX2xpbmVfYnJlYWspO1xuICAgICAgICBmb3IgKGxldCBwYXJhbSBvZiB0aGlzLnBhcmFtZXRlcl9vcmRlcmluZykge1xuICAgICAgICAgICAgbGV0IGNsYXp6ID0gY2xhc3Nlcy5nZXRfY2xhc3NfbmFtZWQodGhpcy5wYXJhbWV0ZXJfdHlwZV9uYW1lc1twYXJhbV0pO1xuICAgICAgICAgICAgb3V0LnB1c2goXCImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtcIiArIHRoaXMucGFyYW1ldGVyX25hbWVzW3BhcmFtXSArIFwiLlwiICsgY2xhenoubWV0aG9kX25hbWUgKyBcIigpOzxici8+XCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGZvcihsZXQgcGFyYW0gb2YgdGhpcy5wYXJhbWV0ZXJfbmFtZXMpIHtcbiAgICAgICAgLy8gICAgIGxldCBjbGF6eiA9IGNsYXNzZXMuZ2V0X2NsYXNzX25hbWVkKHRoaXMucGFyYW1ldGVyX3R5cGVfbmFtZXNbY291bnRlcl0pO1xuICAgICAgICAvLyAgICAgb3V0LnB1c2goXCImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtcIiArIHBhcmFtICsgXCIuXCIgKyBjbGF6ei5tZXRob2RfbmFtZSArIFwiKCk7PGJyLz5cIik7XG4gICAgICAgIC8vICAgICBjb3VudGVyKys7XG4gICAgICAgIC8vIH1cbiAgICAgICAgb3V0LnB1c2goXCImbmJzcDsmbmJzcDt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyLz48YnIvPlwiKTtcbiAgICAgICAgb3V0LnB1c2goXCImbmJzcDsmbmJzcDtcIiArIHRoaXMubWV0aG9kX25hbWUgKyBcIigpIHt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyLz48YnIvPlwiKTtcbiAgICAgICAgb3V0LnB1c2goXCJ9XCIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsYXNzX0RlZmluaXRpb24uanMubWFwIiwiZXhwb3J0IGNsYXNzIENsYXNzZXMge1xuICAgIGNvbnN0cnVjdG9yKGNsYXNzX2RlZmluaXRpb25zKSB7XG4gICAgICAgIHRoaXMuY2xhc3NfZGVmaW5pdGlvbnMgPSBjbGFzc19kZWZpbml0aW9ucztcbiAgICB9XG4gICAgdHlwZV9jaGVjayhjb25zdHJ1Y3Rvcl9jYWxsKSB7XG4gICAgICAgIGxldCB0aGlzX2NsYXNzID0gdGhpcy5nZXRfY2xhc3NfbmFtZWQoY29uc3RydWN0b3JfY2FsbC5jbGFzc19uYW1lKTtcbiAgICAgICAgbGV0IHN0YXRpY190eXBlc19pbl9jYWxsID0gW107XG4gICAgICAgIGZvciAobGV0IHBfdHlwZSBvZiBjb25zdHJ1Y3Rvcl9jYWxsLnBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIHRoaXMudHlwZV9jaGVjayhwX3R5cGUpO1xuICAgICAgICAgICAgc3RhdGljX3R5cGVzX2luX2NhbGwucHVzaChwX3R5cGUuY2xhc3NfbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRpY190eXBlc19pbl9jYWxsLmxlbmd0aCAhPSB0aGlzX2NsYXNzLnBhcmFtZXRlcl90eXBlX25hbWVzLmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IFwiaW52YWxpZCBudW1iZXIgb2YgcGFyYW1ldGVyczogXCIgKyB0aGlzX2NsYXNzLmNsYXNzX25hbWUgKyBcIiBleHBlY3RzIFwiICsgdGhpc19jbGFzcy5wYXJhbWV0ZXJfbmFtZXMubGVuZ3RoICsgXCIgYnV0IGdvdCBcIiArIHN0YXRpY190eXBlc19pbl9jYWxsLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgcG9zaXRpb24gPSAwOyBwb3NpdGlvbiA8IHRoaXNfY2xhc3MucGFyYW1ldGVyX3R5cGVfbmFtZXMubGVuZ3RoOyBwb3NpdGlvbisrKSB7XG4gICAgICAgICAgICBpZiAodGhpc19jbGFzcy5wYXJhbWV0ZXJfdHlwZV9uYW1lc1twb3NpdGlvbl0gIT09IHN0YXRpY190eXBlc19pbl9jYWxsW3Bvc2l0aW9uXSkge1xuICAgICAgICAgICAgICAgIHRocm93IFwiaW52YWxpZCB0eXBlIGluIGNhbGwuIEV4cGVjdGVkIFwiICsgdGhpc19jbGFzcy50eXBlX3NpZ25hdHVyZV9zdHJpbmcoKSArIFwiIGJ1dCBnb3QgXCIgKyB0aGlzX2NsYXNzLmNsYXNzX25hbWUgKyBcIihcIiArIHN0YXRpY190eXBlc19pbl9jYWxsLmpvaW4oXCIsIFwiKSArIFwiKVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGV4ZWN1dGUoY29uc3RydWN0b3JfY2FsbCkge1xuICAgICAgICBsZXQgdGhpc19jbGFzcyA9IHRoaXMuZ2V0X2NsYXNzX25hbWVkKGNvbnN0cnVjdG9yX2NhbGwuY2xhc3NfbmFtZSk7XG4gICAgICAgIGxldCBkeW5hbWljX3R5cGVzX2luX2NhbGwgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcF90eXBlIG9mIGNvbnN0cnVjdG9yX2NhbGwucGFyYW1ldGVycykge1xuICAgICAgICAgICAgdGhpcy5leGVjdXRlKHBfdHlwZSk7XG4gICAgICAgICAgICBkeW5hbWljX3R5cGVzX2luX2NhbGwucHVzaChwX3R5cGUuY2xhc3NfbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR5bmFtaWNfdHlwZXNfaW5fY2FsbC5sZW5ndGggIT0gdGhpc19jbGFzcy5wYXJhbWV0ZXJfdHlwZV9uYW1lcy5sZW5ndGgpXG4gICAgICAgICAgICB0aHJvdyBcImludmFsaWQgbnVtYmVyIG9mIHBhcmFtZXRlcnM6IFwiICsgdGhpc19jbGFzcy5jbGFzc19uYW1lICsgXCIgZXhwZWN0cyBcIiArIHRoaXNfY2xhc3MucGFyYW1ldGVyX25hbWVzLmxlbmd0aCArIFwiIGJ1dCBnb3QgXCIgKyBkeW5hbWljX3R5cGVzX2luX2NhbGwubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBwb3NpdGlvbiA9IDA7IHBvc2l0aW9uIDwgdGhpc19jbGFzcy5wYXJhbWV0ZXJfdHlwZV9uYW1lcy5sZW5ndGg7IHBvc2l0aW9uKyspIHtcbiAgICAgICAgICAgIGxldCBwYXJhbV90eXBlID0gdGhpcy5nZXRfY2xhc3NfbmFtZWQodGhpc19jbGFzcy5wYXJhbWV0ZXJfdHlwZV9uYW1lc1twb3NpdGlvbl0pO1xuICAgICAgICAgICAgaWYgKHRoaXNfY2xhc3MucGFyYW1ldGVyX3R5cGVfbmFtZXNbcG9zaXRpb25dICE9PSBkeW5hbWljX3R5cGVzX2luX2NhbGxbcG9zaXRpb25dKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJ1bmtub3duIG1ldGhvZDogXCIgKyBwYXJhbV90eXBlLm1ldGhvZF9uYW1lXG4gICAgICAgICAgICAgICAgICAgICsgXCIgaW4gb2JqZWN0IG9mIGNsYXNzIFwiICsgZHluYW1pY190eXBlc19pbl9jYWxsW3Bvc2l0aW9uXVxuICAgICAgICAgICAgICAgICAgICArIFwiXFxuPT0+XCIgKyB0aGlzX2NsYXNzLnBhcmFtZXRlcl9uYW1lc1twb3NpdGlvbl0gKyBcIi5cIiArIHBhcmFtX3R5cGUubWV0aG9kX25hbWUgKyBcIigpO1wiXG4gICAgICAgICAgICAgICAgICAgICsgXCJcXG49PT5cIiArIHRoaXNfY2xhc3MuY2xhc3NfbmFtZSArIFwiKFwiICsgdGhpc19jbGFzcy5wYXJhbWV0ZXJfbmFtZXMuam9pbihcIiwgXCIpICsgXCIpey4uLn1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRfY2xhc3NfbmFtZWQoY2xhc3NfbmFtZSkge1xuICAgICAgICBmb3IgKGxldCBjIG9mIHRoaXMuY2xhc3NfZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChjLmNsYXNzX25hbWUgPT09IGNsYXNzX25hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBcIm5vIHN1Y2ggY2xhc3MgbmFtZWQ6IFwiICsgY2xhc3NfbmFtZTtcbiAgICB9XG4gICAgZ2V0X2NsYXNzZXNfbmFtZWQobmFtZXMpIHtcbiAgICAgICAgbGV0IHJldCA9IFtdO1xuICAgICAgICBuYW1lcy5mb3JFYWNoKG4gPT4gcmV0LnB1c2godGhpcy5nZXRfY2xhc3NfbmFtZWQobikpKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgbnVtYmVyX29mX2NsYXNzZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsYXNzX2RlZmluaXRpb25zLmxlbmd0aDtcbiAgICB9XG4gICAgaHRtbF90YWJsZV9zdHJpbmcobnVtX2NvbHVtbnMsIHdpdGhfdHlwZXMpIHtcbiAgICAgICAgbGV0IGFyciA9IFtcIjx0YWJsZSBzdHlsZT0nYm9yZGVyOiAxcHggc29saWQgYmxhY2s7Jz5cIl07XG4gICAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgICAgd2hpbGUgKGNvdW50ZXIgPCB0aGlzLmNsYXNzX2RlZmluaXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgYXJyLnB1c2goXCI8dHIgc3R5bGU9XFxcInZlcnRpY2FsLWFsaWduOnRvcFxcXCI+XCIpO1xuICAgICAgICAgICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgbnVtX2NvbHVtbnMgJiYgY291bnRlciA8IHRoaXMuY2xhc3NfZGVmaW5pdGlvbnMubGVuZ3RoOyBjb2x1bW4rKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzX2RlZmluaXRpb25zW2NvdW50ZXJdLmNsYXNzX25hbWUgPT09IFwiVGFyZ2V0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goXCI8dGQgY29sc3Bhbj0nMicgc3R5bGU9J2JvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyc+XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goXCI8dGQgc3R5bGU9J2JvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyc+XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzX2RlZmluaXRpb25zW2NvdW50ZXJdLnByaW50X2h0bWxfaW50b19hcnJheShhcnIsIHRoaXMsIHdpdGhfdHlwZXMpO1xuICAgICAgICAgICAgICAgIGFyci5wdXNoKFwiPC90ZD5cIik7XG4gICAgICAgICAgICAgICAgY291bnRlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJyLnB1c2goXCI8L3RyPlxcblwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNvcnRfY2xhc3NfZGVmaW5pdGlvbnMoKTtcbiAgICAgICAgbGV0IHN0cmVhbSA9IGFyci5qb2luKFwiXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImR1bW15IHByaW50X2ludG9faHRtbF90YWJsZSgpXCIpO1xuICAgICAgICA7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfVxuICAgIHNvcnRfY2xhc3NfZGVmaW5pdGlvbnMoKSB7XG4gICAgICAgIHRoaXMuY2xhc3NfZGVmaW5pdGlvbnMuc29ydCgoYzEsIGMyKSA9PiB7XG4gICAgICAgICAgICBpZiAoYzEuY2xhc3NfbmFtZSA9PT0gXCJUYXJnZXRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmIChjMi5jbGFzc19uYW1lID09PSBcIlRhcmdldFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIHJldHVybiAoYzEuY2xhc3NfbmFtZSA8IGMyLmNsYXNzX25hbWUpXG4gICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgIDogKChjMS5jbGFzc19uYW1lID4gYzIuY2xhc3NfbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICAgIDogMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gdGhpcy5jbGFzc19kZWZpbml0aW9ucy5wb3AoKTtcbiAgICAgICAgdGhpcy5jbGFzc19kZWZpbml0aW9ucy5zcGxpY2UoMTAsIDAsIHRhcmdldCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xhc3Nlcy5qcy5tYXAiLCJleHBvcnQgY2xhc3MgTm91bnMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICAgICAgXCJhY2NvdW50XCIsIFwiYWNoaWV2ZXJcIiwgXCJhY291c3RpY3NcIiwgXCJhY3RcIiwgXCJhY3Rpb25cIixcbiAgICAgICAgICAgIFwiYWN0aXZpdHlcIiwgXCJhY3RvclwiLCBcImFkZGl0aW9uXCIsIFwiYWRqdXN0bWVudFwiLCBcImFkdmVydGlzZW1lbnRcIixcbiAgICAgICAgICAgIFwiYWR2aWNlXCIsIFwiYWZ0ZXJtYXRoXCIsIFwiYWZ0ZXJub29uXCIsIFwiYWZ0ZXJ0aG91Z2h0XCIsIFwiYWdyZWVtZW50XCIsXG4gICAgICAgICAgICBcImFpclwiLCBcImFpcnBsYW5lXCIsIFwiYWlycG9ydFwiLCBcImFsYXJtXCIsIFwiYW1vdW50XCIsXG4gICAgICAgICAgICBcImFtdXNlbWVudFwiLCBcImFuZ2VyXCIsIFwiYW5nbGVcIiwgXCJhbmltYWxcIiwgXCJhbnRzXCIsXG4gICAgICAgICAgICBcImFwcGFyYXR1c1wiLCBcImFwcGFyZWxcIiwgXCJhcHBsaWFuY2VcIiwgXCJhcHByb3ZhbFwiLCBcImFyY2hcIixcbiAgICAgICAgICAgIFwiYXJndW1lbnRcIiwgXCJhcml0aG1ldGljXCIsIFwiYXJtXCIsIFwiYXJteVwiLCBcImFydFwiLFxuICAgICAgICAgICAgXCJhdHRhY2tcIiwgXCJhdHRyYWN0aW9uXCIsIFwiYXVudFwiLCBcImF1dGhvcml0eVwiLCBcImJhY2tcIixcbiAgICAgICAgICAgIFwiYmFkZ2VcIiwgXCJiYWdcIiwgXCJiYWl0XCIsIFwiYmFsYW5jZVwiLCBcImJhbGxcIixcbiAgICAgICAgICAgIFwiYmFzZVwiLCBcImJhc2ViYWxsXCIsIFwiYmFzaW5cIiwgXCJiYXNrZXRcIiwgXCJiYXNrZXRiYWxsXCIsXG4gICAgICAgICAgICBcImJhdFwiLCBcImJhdGhcIiwgXCJiYXR0bGVcIiwgXCJiZWFkXCIsIFwiYmVhclwiLFxuICAgICAgICAgICAgXCJiZWRcIiwgXCJiZWRyb29tXCIsIFwiYmVkc1wiLCBcImJlZVwiLCBcImJlZWZcIixcbiAgICAgICAgICAgIFwiYmVnaW5uZXJcIiwgXCJiZWhhdmlvclwiLCBcImJlbGllZlwiLCBcImJlbGlldmVcIiwgXCJiZWxsXCIsXG4gICAgICAgICAgICBcImJlbGxzXCIsIFwiYmVycnlcIiwgXCJiaWtlXCIsIFwiYmlrZXNcIiwgXCJiaXJkXCIsXG4gICAgICAgICAgICBcImJpcmRzXCIsIFwiYmlydGhcIiwgXCJiaXJ0aGRheVwiLCBcImJpdFwiLCBcImJpdGVcIixcbiAgICAgICAgICAgIFwiYmxhZGVcIiwgXCJibG9vZFwiLCBcImJsb3dcIiwgXCJib2FyZFwiLCBcImJvYXRcIixcbiAgICAgICAgICAgIFwiYm9tYlwiLCBcImJvbmVcIiwgXCJib29rXCIsIFwiYm9va3NcIiwgXCJib290XCIsXG4gICAgICAgICAgICBcImJvcmRlclwiLCBcImJvdHRsZVwiLCBcImJvdW5kYXJ5XCIsIFwiYm94XCIsIFwiYnJha2VcIixcbiAgICAgICAgICAgIFwiYnJhbmNoXCIsIFwiYnJhc3NcIiwgXCJicmVhdGhcIiwgXCJicmlja1wiLCBcImJyaWRnZVwiLFxuICAgICAgICAgICAgXCJicm90aGVyXCIsIFwiYnViYmxlXCIsIFwiYnVja2V0XCIsIFwiYnVpbGRpbmdcIiwgXCJidWxiXCIsXG4gICAgICAgICAgICBcImJ1cnN0XCIsIFwiYnVzaGVzXCIsIFwiYnVzaW5lc3NcIiwgXCJidXR0ZXJcIiwgXCJidXR0b25cIixcbiAgICAgICAgICAgIFwiYnJhbmNoXCIsIFwiYnJhc3NcIiwgXCJicmVhdGhcIiwgXCJicmlja1wiLCBcImJyaWRnZVwiLFxuICAgICAgICAgICAgXCJicm90aGVyXCIsIFwiYnViYmxlXCIsIFwiYnVja2V0XCIsIFwiYnVpbGRpbmdcIiwgXCJidWxiXCIsXG4gICAgICAgICAgICBcImJ1cnN0XCIsIFwiYnVzaGVzXCIsIFwiYnVzaW5lc3NcIiwgXCJidXR0ZXJcIiwgXCJidXR0b25cIixcbiAgICAgICAgICAgIFwiY2FiYmFnZVwiLCBcImNhYmxlXCIsIFwiY2FjdHVzXCIsIFwiY2FrZVwiLCBcImNha2VzXCIsXG4gICAgICAgICAgICBcImNhbGN1bGF0b3JcIiwgXCJjYWxlbmRhclwiLCBcImNhbWVyYVwiLCBcImNhbXBcIiwgXCJjYW5cIixcbiAgICAgICAgICAgIFwiY2Fubm9uXCIsIFwiY2FudmFzXCIsIFwiY2FwXCIsIFwiY2FwdGlvblwiLCBcImNhclwiLFxuICAgICAgICAgICAgXCJjYXJkXCIsIFwiY2FyZVwiLCBcImNhcnBlbnRlclwiLCBcImNhcnJpYWdlXCIsIFwiY2Fyc1wiLFxuICAgICAgICAgICAgXCJjYXJ0XCIsIFwiY2FzdFwiLCBcImNhdFwiLCBcImNhdHNcIiwgXCJjYXR0bGVcIixcbiAgICAgICAgICAgIFwiY2F1c2VcIiwgXCJjYXZlXCIsIFwiY2VsZXJ5XCIsIFwiY2VsbGFyXCIsIFwiY2VtZXRlcnlcIixcbiAgICAgICAgICAgIFwiY2VudFwiLCBcImNoYWxrXCIsIFwiY2hhbmNlXCIsIFwiY2hhbmdlXCIsIFwiY2hhbm5lbFwiLFxuICAgICAgICAgICAgXCJjaGVlc2VcIiwgXCJjaGVycmllc1wiLCBcImNoZXJyeVwiLCBcImNoZXNzXCIsIFwiY2hpY2tlblwiLFxuICAgICAgICAgICAgXCJjaGlja2Vuc1wiLCBcImNoaW5cIiwgXCJjaHVyY2hcIiwgXCJjaXJjbGVcIiwgXCJjbGFtXCIsXG4gICAgICAgICAgICBcImNsb3RoXCIsIFwiY2xvdmVyXCIsIFwiY2x1YlwiLCBcImNvYWNoXCIsIFwiY29hbFwiLFxuICAgICAgICAgICAgXCJjb2FzdFwiLCBcImNvYXRcIiwgXCJjb2J3ZWJcIiwgXCJjb2lsXCIsIFwiY29sbGFyXCIsXG4gICAgICAgICAgICBcImNvbG9yXCIsIFwiY29tbWl0dGVlXCIsIFwiY29tcGFueVwiLCBcImNvbXBhcmlzb25cIiwgXCJjb21wZXRpdGlvblwiLFxuICAgICAgICAgICAgXCJjb25kaXRpb25cIiwgXCJjb25uZWN0aW9uXCIsIFwiY29udHJvbFwiLCBcImNvb2tcIiwgXCJjb3BwZXJcIixcbiAgICAgICAgICAgIFwiY29yblwiLCBcImNvdWdoXCIsIFwiY291bnRyeVwiLCBcImNvdmVyXCIsIFwiY293XCIsXG4gICAgICAgICAgICBcImNvd3NcIiwgXCJjcmFja1wiLCBcImNyYWNrZXJcIiwgXCJjcmF0ZVwiLCBcImNyYXlvblwiLFxuICAgICAgICAgICAgXCJjcmVhbVwiLCBcImNyZWF0b3JcIiwgXCJjcmVhdHVyZVwiLCBcImNyZWRpdFwiLCBcImNyaWJcIixcbiAgICAgICAgICAgIFwiY3JpbWVcIiwgXCJjcm9va1wiLCBcImNyb3dcIiwgXCJjcm93ZFwiLCBcImNyb3duXCIsXG4gICAgICAgICAgICBcImN1YlwiLCBcImN1cFwiLCBcImN1cnJlbnRcIiwgXCJjdXJ0YWluXCIsIFwiY3VydmVcIixcbiAgICAgICAgICAgIFwiY3VzaGlvblwiLCBcImRhZFwiLCBcImRhdWdodGVyXCIsIFwiZGF5XCIsIFwiZGVhdGhcIixcbiAgICAgICAgICAgIFwiZGVidFwiLCBcImRlY2lzaW9uXCIsIFwiZGVlclwiLCBcImRlZ3JlZVwiLCBcImRlc2lnblwiLFxuICAgICAgICAgICAgXCJkZXNpcmVcIiwgXCJkZXNrXCIsIFwiZGVzdHJ1Y3Rpb25cIiwgXCJkZXRhaWxcIiwgXCJkZXZlbG9wbWVudFwiLFxuICAgICAgICAgICAgXCJkaWdlc3Rpb25cIiwgXCJkaW1lXCIsIFwiZGlubmVyXCIsIFwiZGlub3NhdXJzXCIsIFwiZGlyZWN0aW9uXCIsXG4gICAgICAgICAgICBcImRpcnRcIiwgXCJkaXNjb3ZlcnlcIiwgXCJkaXNjdXNzaW9uXCIsIFwiZGlzdGFuY2VcIiwgXCJkaXN0cmlidXRpb25cIixcbiAgICAgICAgICAgIFwiZGl2aXNpb25cIiwgXCJkb2NrXCIsIFwiZG9jdG9yXCIsIFwiZG9nXCIsIFwiZG9nc1wiLFxuICAgICAgICAgICAgXCJkb2xsXCIsIFwiZG9sbHNcIiwgXCJkb25rZXlcIiwgXCJkb29yXCIsIFwiZG93bnRvd25cIixcbiAgICAgICAgICAgIFwiZHJhaW5cIiwgXCJkcmF3ZXJcIiwgXCJkcmVzc1wiLCBcImRyaW5rXCIsIFwiZHJpdmluZ1wiLFxuICAgICAgICAgICAgXCJkcm9wXCIsIFwiZHVja1wiLCBcImR1Y2tzXCIsIFwiZHVzdFwiLCBcImVhclwiLFxuICAgICAgICAgICAgXCJlYXJ0aFwiLCBcImVhcnRocXVha2VcIiwgXCJlZGdlXCIsIFwiZWR1Y2F0aW9uXCIsIFwiZWZmZWN0XCIsXG4gICAgICAgICAgICBcImVnZ1wiLCBcImVnZ25vZ1wiLCBcImVnZ3NcIiwgXCJlbGJvd1wiLCBcImVuZFwiLFxuICAgICAgICAgICAgXCJlbmdpbmVcIiwgXCJlcnJvclwiLCBcImV2ZW50XCIsIFwiZXhhbXBsZVwiLCBcImV4Y2hhbmdlXCIsXG4gICAgICAgICAgICBcImV4aXN0ZW5jZVwiLCBcImV4cGFuc2lvblwiLCBcImV4cGVyaWVuY2VcIiwgXCJleHBlcnRcIiwgXCJleWVcIixcbiAgICAgICAgICAgIFwiZXllc1wiLCBcImZhY2VcIiwgXCJmYWN0XCIsIFwiZmFpcmllc1wiLCBcImZhbGxcIixcbiAgICAgICAgICAgIFwiZmFuZ1wiLCBcImZhcm1cIiwgXCJmZWFyXCIsIFwiZmVlbGluZ1wiLCBcImZpZWxkXCIsXG4gICAgICAgICAgICBcImZpbmdlclwiLCBcImZpcmVcIiwgXCJmaXJlbWFuXCIsIFwiZmlzaFwiLCBcImZsYWdcIixcbiAgICAgICAgICAgIFwiZmxhbWVcIiwgXCJmbGF2b3JcIiwgXCJmbGVzaFwiLCBcImZsaWdodFwiLCBcImZsb2NrXCIsXG4gICAgICAgICAgICBcImZsb29yXCIsIFwiZmxvd2VyXCIsIFwiZmxvd2Vyc1wiLCBcImZseVwiLCBcImZvZ1wiLFxuICAgICAgICAgICAgXCJmb2xkXCIsIFwiZm9vZFwiLCBcImZvb3RcIiwgXCJmb3JjZVwiLCBcImZvcmtcIixcbiAgICAgICAgICAgIFwiZm9ybVwiLCBcImZvd2xcIiwgXCJmcmFtZVwiLCBcImZyaWN0aW9uXCIsIFwiZnJpZW5kXCIsXG4gICAgICAgICAgICBcImZyaWVuZHNcIiwgXCJmcm9nXCIsIFwiZnJvZ3NcIiwgXCJmcm9udFwiLCBcImZydWl0XCIsXG4gICAgICAgICAgICBcImZ1ZWxcIiwgXCJmdXJuaXR1cmVcIiwgXCJnYXRlXCIsIFwiZ2Vlc2VcIiwgXCJnaG9zdFwiLFxuICAgICAgICAgICAgXCJnaWFudHNcIiwgXCJnaXJhZmZlXCIsIFwiZ2xhc3NcIiwgXCJnbG92ZVwiLCBcImdvbGRcIixcbiAgICAgICAgICAgIFwiZ292ZXJubWVudFwiLCBcImdvdmVybm9yXCIsIFwiZ3JhZGVcIiwgXCJncmFpblwiLCBcImdyYW5kZmF0aGVyXCIsXG4gICAgICAgICAgICBcImdyYW5kbW90aGVyXCIsIFwiZ3JhcGVcIiwgXCJncmFzc1wiLCBcImdyaXBcIiwgXCJncm91bmRcIixcbiAgICAgICAgICAgIFwiZ3JvdXBcIiwgXCJncm93dGhcIiwgXCJndWlkZVwiLCBcImd1aXRhclwiLCBcImd1blwiLFxuICAgICAgICAgICAgXCJoYWlyXCIsIFwiaGFpcmN1dFwiLCBcImhhbGxcIiwgXCJoYW1tZXJcIiwgXCJoYW5kXCIsXG4gICAgICAgICAgICBcImhhbmRzXCIsIFwiaGFyYm9yXCIsIFwiaGFybW9ueVwiLCBcImhhdFwiLCBcImhlYWRcIixcbiAgICAgICAgICAgIFwiaGVhbHRoXCIsIFwiaGVhdFwiLCBcImhpbGxcIiwgXCJoaXN0b3J5XCIsIFwiaG9iYmllc1wiLFxuICAgICAgICAgICAgXCJob2xlXCIsIFwiaG9saWRheVwiLCBcImhvbWVcIiwgXCJob25leVwiLCBcImhvb2tcIixcbiAgICAgICAgICAgIFwiaG9wZVwiLCBcImhvcm5cIiwgXCJob3JzZVwiLCBcImhvcnNlc1wiLCBcImhvc2VcIixcbiAgICAgICAgICAgIFwiaG9zcGl0YWxcIiwgXCJob3RcIiwgXCJob3VyXCIsIFwiaG91c2VcIiwgXCJob3VzZXNcIixcbiAgICAgICAgICAgIFwiaHVtb3JcIiwgXCJoeWRyYW50XCIsIFwiaWNlXCIsIFwiaWNpY2xlXCIsIFwiaWRlYVwiLFxuICAgICAgICAgICAgXCJpbXB1bHNlXCIsIFwiaW5jb21lXCIsIFwiaW5jcmVhc2VcIiwgXCJpbmR1c3RyeVwiLCBcImlua1wiLFxuICAgICAgICAgICAgXCJpbnNlY3RcIiwgXCJpbnN0cnVtZW50XCIsIFwiaW5zdXJhbmNlXCIsIFwiaW50ZXJlc3RcIiwgXCJpbnZlbnRpb25cIixcbiAgICAgICAgICAgIFwiaXJvblwiLCBcImlzbGFuZFwiLCBcImphaWxcIiwgXCJqYW1cIiwgXCJqYXJcIixcbiAgICAgICAgICAgIFwiamVhbnNcIiwgXCJqZWxseVwiLCBcImplbGx5ZmlzaFwiLCBcImpld2VsXCIsIFwiam9pblwiLFxuICAgICAgICAgICAgXCJqdWRnZVwiLCBcImp1aWNlXCIsIFwianVtcFwiLCBcImtldHRsZVwiLCBcImtleVwiLFxuICAgICAgICAgICAgXCJraWNrXCIsIFwia2lzc1wiLCBcImtpdHRlbnNcIiwgXCJraXR0eVwiLCBcImtuZWVcIixcbiAgICAgICAgICAgIFwia25pZmVcIiwgXCJrbm90XCIsIFwia25vd2xlZGdlXCIsIFwibGFib3JlclwiLCBcImxhY2VcIixcbiAgICAgICAgICAgIFwibGFkeWJ1Z1wiLCBcImxha2VcIiwgXCJsYW1wXCIsIFwibGFuZFwiLCBcImxhbmd1YWdlXCIsXG4gICAgICAgICAgICBcImxhdWdoXCIsIFwibGVhdGhlclwiLCBcImxlZ1wiLCBcImxlZ3NcIiwgXCJsZXR0ZXJcIixcbiAgICAgICAgICAgIFwibGV0dGVyc1wiLCBcImxldHR1Y2VcIiwgXCJsZXZlbFwiLCBcImxpYnJhcnlcIiwgXCJsaW1pdFwiLFxuICAgICAgICAgICAgXCJsaW5lXCIsIFwibGluZW5cIiwgXCJsaXBcIiwgXCJsaXF1aWRcIiwgXCJsb2FmXCIsXG4gICAgICAgICAgICBcImxvY2tcIiwgXCJsb2NrZXRcIiwgXCJsb29rXCIsIFwibG9zc1wiLCBcImxvdmVcIixcbiAgICAgICAgICAgIFwibG93XCIsIFwibHVtYmVyXCIsIFwibHVuY2hcIiwgXCJsdW5jaHJvb21cIiwgXCJtYWNoaW5lXCIsXG4gICAgICAgICAgICBcIm1hZ2ljXCIsIFwibWFpZFwiLCBcIm1haWxib3hcIiwgXCJtYW5cIiwgXCJtYXJibGVcIixcbiAgICAgICAgICAgIFwibWFya1wiLCBcIm1hcmtldFwiLCBcIm1hc2tcIiwgXCJtYXNzXCIsIFwibWF0Y2hcIixcbiAgICAgICAgICAgIFwibWVhbFwiLCBcIm1lYXN1cmVcIiwgXCJtZWF0XCIsIFwibWVldGluZ1wiLCBcIm1lbW9yeVwiLFxuICAgICAgICAgICAgXCJtZW5cIiwgXCJtZXRhbFwiLCBcIm1pY2VcIiwgXCJtaWRkbGVcIiwgXCJtaWxrXCIsXG4gICAgICAgICAgICBcIm1pbmRcIiwgXCJtaW5lXCIsIFwibWluaXN0ZXJcIiwgXCJtaW50XCIsIFwibWludXRlXCIsXG4gICAgICAgICAgICBcIm1pc3RcIiwgXCJtaXR0ZW5cIiwgXCJtb21cIiwgXCJtb25leVwiLCBcIm1vbnRoXCIsXG4gICAgICAgICAgICBcIm1vb25cIiwgXCJtb3JuaW5nXCIsIFwibW90aGVyXCIsIFwibW90aW9uXCIsIFwibW91bnRhaW5cIixcbiAgICAgICAgICAgIFwibW91dGhcIiwgXCJtb3ZlXCIsIFwibXVzY2xlXCIsIFwibmFtZVwiLCBcIm5hdGlvblwiLFxuICAgICAgICAgICAgXCJuZWNrXCIsIFwibmVlZFwiLCBcIm5lZWRsZVwiLCBcIm5lcnZlXCIsIFwibmVzdFwiLFxuICAgICAgICAgICAgXCJuaWdodFwiLCBcIm5vaXNlXCIsIFwibm9ydGhcIiwgXCJub3NlXCIsIFwibm90ZVwiLFxuICAgICAgICAgICAgXCJub3RlYm9va1wiLCBcIm51bWJlclwiLCBcIm51dFwiLCBcIm9hdG1lYWxcIiwgXCJvYnNlcnZhdGlvblwiLFxuICAgICAgICAgICAgXCJvY2VhblwiLCBcIm9mZmVyXCIsIFwib2ZmaWNlXCIsIFwib2lsXCIsIFwib3JhbmdlXCIsXG4gICAgICAgICAgICBcIm9yYW5nZXNcIiwgXCJvcmRlclwiLCBcIm92ZW5cIiwgXCJwYWdlXCIsIFwicGFpbFwiLFxuICAgICAgICAgICAgXCJwYW5cIiwgXCJwYW5jYWtlXCIsIFwicGFwZXJcIiwgXCJwYXJjZWxcIiwgXCJwYXJ0XCIsXG4gICAgICAgICAgICBcInBhcnRuZXJcIiwgXCJwYXJ0eVwiLCBcInBhc3NlbmdlclwiLCBcInBheW1lbnRcIiwgXCJwZWFjZVwiLFxuICAgICAgICAgICAgXCJwZWFyXCIsIFwicGVuXCIsIFwicGVuY2lsXCIsIFwicGVyc29uXCIsIFwicGVzdFwiLFxuICAgICAgICAgICAgXCJwZXRcIiwgXCJwZXRzXCIsIFwicGlja2xlXCIsIFwicGljdHVyZVwiLCBcInBpZVwiLFxuICAgICAgICAgICAgXCJwaWVzXCIsIFwicGlnXCIsIFwicGlnc1wiLCBcInBpblwiLCBcInBpcGVcIixcbiAgICAgICAgICAgIFwicGl6emFzXCIsIFwicGxhY2VcIiwgXCJwbGFuZVwiLCBcInBsYW5lc1wiLCBcInBsYW50XCIsXG4gICAgICAgICAgICBcInBsYW50YXRpb25cIiwgXCJwbGFudHNcIiwgXCJwbGFzdGljXCIsIFwicGxhdGVcIiwgXCJwbGF5XCIsXG4gICAgICAgICAgICBcInBsYXlncm91bmRcIiwgXCJwbGVhc3VyZVwiLCBcInBsb3RcIiwgXCJwbG91Z2hcIiwgXCJwb2NrZXRcIixcbiAgICAgICAgICAgIFwicG9pbnRcIiwgXCJwb2lzb25cIiwgXCJwb2xsdXRpb25cIiwgXCJwb3Bjb3JuXCIsIFwicG9ydGVyXCIsXG4gICAgICAgICAgICBcInBvc2l0aW9uXCIsIFwicG90XCIsIFwicG90YXRvXCIsIFwicG93ZGVyXCIsIFwicG93ZXJcIixcbiAgICAgICAgICAgIFwicHJpY2VcIiwgXCJwcm9kdWNlXCIsIFwicHJvZml0XCIsIFwicHJvcGVydHlcIiwgXCJwcm9zZVwiLFxuICAgICAgICAgICAgXCJwcm90ZXN0XCIsIFwicHVsbFwiLCBcInB1bXBcIiwgXCJwdW5pc2htZW50XCIsIFwicHVycG9zZVwiLFxuICAgICAgICAgICAgXCJwdXNoXCIsIFwicXVhcnRlclwiLCBcInF1YXJ0elwiLCBcInF1ZWVuXCIsIFwicXVlc3Rpb25cIixcbiAgICAgICAgICAgIFwicXVpY2tzYW5kXCIsIFwicXVpZXRcIiwgXCJxdWlsbFwiLCBcInF1aWx0XCIsIFwicXVpbmNlXCIsXG4gICAgICAgICAgICBcInF1aXZlclwiLCBcInJhYmJpdFwiLCBcInJhYmJpdHNcIiwgXCJyYWlsXCIsIFwicmFpbHdheVwiLFxuICAgICAgICAgICAgXCJyYWluXCIsIFwicmFpbnN0b3JtXCIsIFwicmFrZVwiLCBcInJhbmdlXCIsIFwicmF0XCIsXG4gICAgICAgICAgICBcInJhdGVcIiwgXCJyYXlcIiwgXCJyZWFjdGlvblwiLCBcInJlYWRpbmdcIiwgXCJyZWFzb25cIixcbiAgICAgICAgICAgIFwicmVjZWlwdFwiLCBcInJlY2Vzc1wiLCBcInJlY29yZFwiLCBcInJlZ3JldFwiLCBcInJlbGF0aW9uXCIsXG4gICAgICAgICAgICBcInJlbGlnaW9uXCIsIFwicmVwcmVzZW50YXRpdmVcIiwgXCJyZXF1ZXN0XCIsIFwicmVzcGVjdFwiLCBcInJlc3RcIixcbiAgICAgICAgICAgIFwicmV3YXJkXCIsIFwicmh5dGhtXCIsIFwicmljZVwiLCBcInJpZGRsZVwiLCBcInJpZmxlXCIsXG4gICAgICAgICAgICBcInJpbmdcIiwgXCJyaW5nc1wiLCBcInJpdmVyXCIsIFwicm9hZFwiLCBcInJvYmluXCIsXG4gICAgICAgICAgICBcInJvY2tcIiwgXCJyb2RcIiwgXCJyb2xsXCIsIFwicm9vZlwiLCBcInJvb21cIixcbiAgICAgICAgICAgIFwicm9vdFwiLCBcInJvc2VcIiwgXCJyb3V0ZVwiLCBcInJ1YlwiLCBcInJ1bGVcIixcbiAgICAgICAgICAgIFwicnVuXCIsIFwic2Fja1wiLCBcInNhaWxcIiwgXCJzYWx0XCIsIFwic2FuZFwiLFxuICAgICAgICAgICAgXCJzY2FsZVwiLCBcInNjYXJlY3Jvd1wiLCBcInNjYXJmXCIsIFwic2NlbmVcIiwgXCJzY2VudFwiLFxuICAgICAgICAgICAgXCJzY2hvb2xcIiwgXCJzY2llbmNlXCIsIFwic2Npc3NvcnNcIiwgXCJzY3Jld1wiLCBcInNlYVwiLFxuICAgICAgICAgICAgXCJzZWFzaG9yZVwiLCBcInNlYXRcIiwgXCJzZWNyZXRhcnlcIiwgXCJzZWVkXCIsIFwic2VsZWN0aW9uXCIsXG4gICAgICAgICAgICBcInNlbGZcIiwgXCJzZW5zZVwiLCBcInNlcnZhbnRcIiwgXCJzaGFkZVwiLCBcInNoYWtlXCIsXG4gICAgICAgICAgICBcInNoYW1lXCIsIFwic2hhcGVcIiwgXCJzaGVlcFwiLCBcInNoZWV0XCIsIFwic2hlbGZcIixcbiAgICAgICAgICAgIFwic2hpcFwiLCBcInNoaXJ0XCIsIFwic2hvY2tcIiwgXCJzaG9lXCIsIFwic2hvZXNcIixcbiAgICAgICAgICAgIFwic2hvcFwiLCBcInNob3dcIiwgXCJzaWRlXCIsIFwic2lkZXdhbGtcIiwgXCJzaWduXCIsXG4gICAgICAgICAgICBcInNpbGtcIiwgXCJzaWx2ZXJcIiwgXCJzaW5rXCIsIFwic2lzdGVyXCIsIFwic2lzdGVyc1wiLFxuICAgICAgICAgICAgXCJzaXplXCIsIFwic2thdGVcIiwgXCJza2luXCIsIFwic2tpcnRcIiwgXCJza3lcIixcbiAgICAgICAgICAgIFwic2xhdmVcIiwgXCJzbGVlcFwiLCBcInNsZWV0XCIsIFwic2xpcFwiLCBcInNsb3BlXCIsXG4gICAgICAgICAgICBcInNtYXNoXCIsIFwic21lbGxcIiwgXCJzbWlsZVwiLCBcInNtb2tlXCIsIFwic25haWxcIixcbiAgICAgICAgICAgIFwic25haWxzXCIsIFwic25ha2VcIiwgXCJzbmFrZXNcIiwgXCJzbmVlemVcIiwgXCJzbm93XCIsXG4gICAgICAgICAgICBcInNvYXBcIiwgXCJzb2NpZXR5XCIsIFwic29ja1wiLCBcInNvZGFcIiwgXCJzb2ZhXCIsXG4gICAgICAgICAgICBcInNvblwiLCBcInNvbmdcIiwgXCJzb25nc1wiLCBcInNvcnRcIiwgXCJzb3VuZFwiLFxuICAgICAgICAgICAgXCJzb3VwXCIsIFwic3BhY2VcIiwgXCJzcGFkZVwiLCBcInNwYXJrXCIsIFwic3BpZGVyc1wiLFxuICAgICAgICAgICAgXCJzcG9uZ2VcIiwgXCJzcG9vblwiLCBcInNwb3RcIiwgXCJzcHJpbmdcIiwgXCJzcHlcIixcbiAgICAgICAgICAgIFwic3F1YXJlXCIsIFwic3F1aXJyZWxcIiwgXCJzdGFnZVwiLCBcInN0YW1wXCIsIFwic3RhclwiLFxuICAgICAgICAgICAgXCJzdGFydFwiLCBcInN0YXRlbWVudFwiLCBcInN0YXRpb25cIiwgXCJzdGVhbVwiLCBcInN0ZWVsXCIsXG4gICAgICAgICAgICBcInN0ZW1cIiwgXCJzdGVwXCIsIFwic3Rld1wiLCBcInN0aWNrXCIsIFwic3RpY2tzXCIsXG4gICAgICAgICAgICBcInN0aXRjaFwiLCBcInN0b2NraW5nXCIsIFwic3RvbWFjaFwiLCBcInN0b25lXCIsIFwic3RvcFwiLFxuICAgICAgICAgICAgXCJzdG9yZVwiLCBcInN0b3J5XCIsIFwic3RvdmVcIiwgXCJzdHJhbmdlclwiLCBcInN0cmF3XCIsXG4gICAgICAgICAgICBcInN0cmVhbVwiLCBcInN0cmVldFwiLCBcInN0cmV0Y2hcIiwgXCJzdHJpbmdcIiwgXCJzdHJ1Y3R1cmVcIixcbiAgICAgICAgICAgIFwic3Vic3RhbmNlXCIsIFwic3VnYXJcIiwgXCJzdWdnZXN0aW9uXCIsIFwic3VpdFwiLCBcInN1bW1lclwiLFxuICAgICAgICAgICAgXCJzdW5cIiwgXCJzdXBwb3J0XCIsIFwic3VycHJpc2VcIiwgXCJzd2VhdGVyXCIsIFwic3dpbVwiLFxuICAgICAgICAgICAgXCJzd2luZ1wiLCBcInN5c3RlbVwiLCBcInRhYmxlXCIsIFwidGFpbFwiLCBcInRhbGtcIixcbiAgICAgICAgICAgIFwidGFua1wiLCBcInRhc3RlXCIsIFwidGF4XCIsIFwidGVhY2hpbmdcIiwgXCJ0ZWFtXCIsXG4gICAgICAgICAgICBcInRlZXRoXCIsIFwidGVtcGVyXCIsIFwidGVuZGVuY3lcIiwgXCJ0ZW50XCIsIFwidGVycml0b3J5XCIsXG4gICAgICAgICAgICBcInRlc3RcIiwgXCJ0ZXh0dXJlXCIsIFwidGhlb3J5XCIsIFwidGhpbmdcIiwgXCJ0aGluZ3NcIixcbiAgICAgICAgICAgIFwidGhvdWdodFwiLCBcInRocmVhZFwiLCBcInRocmlsbFwiLCBcInRocm9hdFwiLCBcInRocm9uZVwiLFxuICAgICAgICAgICAgXCJ0aHVtYlwiLCBcInRodW5kZXJcIiwgXCJ0aWNrZXRcIiwgXCJ0aWdlclwiLCBcInRpbWVcIixcbiAgICAgICAgICAgIFwidGluXCIsIFwidGl0bGVcIiwgXCJ0b2FkXCIsIFwidG9lXCIsIFwidG9lc1wiLFxuICAgICAgICAgICAgXCJ0b21hdG9lc1wiLCBcInRvbmd1ZVwiLCBcInRvb3RoXCIsIFwidG9vdGhicnVzaFwiLCBcInRvb3RocGFzdGVcIixcbiAgICAgICAgICAgIFwidG9wXCIsIFwidG91Y2hcIiwgXCJ0b3duXCIsIFwidG95XCIsIFwidG95c1wiLFxuICAgICAgICAgICAgXCJ0cmFkZVwiLCBcInRyYWlsXCIsIFwidHJhaW5cIiwgXCJ0cmFpbnNcIiwgXCJ0cmFtcFwiLFxuICAgICAgICAgICAgXCJ0cmFuc3BvcnRcIiwgXCJ0cmF5XCIsIFwidHJlYXRtZW50XCIsIFwidHJlZVwiLCBcInRyZWVzXCIsXG4gICAgICAgICAgICBcInRyaWNrXCIsIFwidHJpcFwiLCBcInRyb3VibGVcIiwgXCJ0cm91c2Vyc1wiLCBcInRydWNrXCIsXG4gICAgICAgICAgICBcInRydWNrc1wiLCBcInR1YlwiLCBcInR1cmtleVwiLCBcInR1cm5cIiwgXCJ0d2lnXCIsXG4gICAgICAgICAgICBcInR3aXN0XCIsIFwidW1icmVsbGFcIiwgXCJ1bmNsZVwiLCBcInVuZGVyd2VhclwiLCBcInVuaXRcIixcbiAgICAgICAgICAgIFwidXNlXCIsIFwidmFjYXRpb25cIiwgXCJ2YWx1ZVwiLCBcInZhblwiLCBcInZhc2VcIixcbiAgICAgICAgICAgIFwidmVnZXRhYmxlXCIsIFwidmVpbFwiLCBcInZlaW5cIiwgXCJ2ZXJzZVwiLCBcInZlc3NlbFwiLFxuICAgICAgICAgICAgXCJ2ZXN0XCIsIFwidmlld1wiLCBcInZpc2l0b3JcIiwgXCJ2b2ljZVwiLCBcInZvbGNhbm9cIixcbiAgICAgICAgICAgIFwidm9sbGV5YmFsbFwiLCBcInZveWFnZVwiLCBcIndhbGtcIiwgXCJ3YWxsXCIsIFwid2FyXCIsXG4gICAgICAgICAgICBcIndhc2hcIiwgXCJ3YXN0ZVwiLCBcIndhdGNoXCIsIFwid2F0ZXJcIiwgXCJ3YXZlXCIsXG4gICAgICAgICAgICBcIndhdmVzXCIsIFwid2F4XCIsIFwid2F5XCIsIFwid2VhbHRoXCIsIFwid2VhdGhlclwiLFxuICAgICAgICAgICAgXCJ3ZWVrXCIsIFwid2VpZ2h0XCIsIFwid2hlZWxcIiwgXCJ3aGlwXCIsIFwid2hpc3RsZVwiLFxuICAgICAgICAgICAgXCJ3aWxkZXJuZXNzXCIsIFwid2luZFwiLCBcIndpbmRvd1wiLCBcIndpbmVcIiwgXCJ3aW5nXCIsXG4gICAgICAgICAgICBcIndpbnRlclwiLCBcIndpcmVcIiwgXCJ3aXNoXCIsIFwid29vZFwiLCBcIndvb2xcIixcbiAgICAgICAgICAgIFwid29yZFwiLCBcIndvcmtcIiwgXCJ3b3JtXCIsIFwid291bmRcIiwgXCJ3cmVuXCIsXG4gICAgICAgICAgICBcIndyZW5jaFwiLCBcIndyaXN0XCIsIFwid3JpdGVyXCIsIFwid3JpdGluZ1wiLCBcInlha1wiLFxuICAgICAgICAgICAgXCJ5YW1cIiwgXCJ5YXJkXCIsIFwieWFyblwiLCBcInllYXJcIiwgXCJ5b2tlXCIsXG4gICAgICAgICAgICBcInplYnJhXCIsIFwiemVwaHlyXCIsIFwiemluY1wiLCBcInppcHBlclwiLCBcInpvb1wiXG4gICAgICAgIF07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm91bnMuanMubWFwIiwiZXhwb3J0IGNsYXNzIENvbnN0cnVjdG9yX0NhbGwge1xuICAgIGNvbnN0cnVjdG9yKGNsYXNzTmFtZSwgcGFyYW1ldGVycykge1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgICB0aGlzLmNsYXNzX25hbWUgPSBjbGFzc05hbWU7XG4gICAgfVxuICAgIGNhbGxfc3RyaW5nKCkge1xuICAgICAgICBsZXQgYXJyID0gW107XG4gICAgICAgIGFyci5wdXNoKHRoaXMuY2xhc3NfbmFtZSArIFwiKFwiKTtcbiAgICAgICAgYXJyLnB1c2godGhpcy5wYXJhbWV0ZXJzLm1hcChlID0+IGUuY2FsbF9zdHJpbmcoKSkuam9pbihcIiwgXCIpKTtcbiAgICAgICAgYXJyLnB1c2goXCIpXCIpO1xuICAgICAgICByZXR1cm4gYXJyLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIGVxdWFscyhjb25zdHJ1Y3RvckNhbGwpIHtcbiAgICAgICAgaWYgKCEoY29uc3RydWN0b3JDYWxsIGluc3RhbmNlb2YgQ29uc3RydWN0b3JfQ2FsbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzX25hbWUgIT09IGNvbnN0cnVjdG9yQ2FsbC5jbGFzc19uYW1lKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtZXRlcnMubGVuZ3RoICE9PSBjb25zdHJ1Y3RvckNhbGwucGFyYW1ldGVycy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db25zdHJ1Y3Rvcl9DYWxsLmpzLm1hcCIsImltcG9ydCB7IENvbnN0cnVjdG9yX0NhbGwgfSBmcm9tIFwiLi9Db25zdHJ1Y3Rvcl9DYWxsLmpzXCI7XG5mdW5jdGlvbiByZWFkX2lkZW50aWZpZXIoc3RyaW5nX2FycmF5KSB7XG4gICAgbGV0IGlkZW50aWZpZXIgPSBbXTtcbiAgICB3aGlsZSAoc3RyaW5nX2FycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IHRoaXNfdG9rZW4gPSBzdHJpbmdfYXJyYXkuc2hpZnQoKTtcbiAgICAgICAgaWYgKCh0aGlzX3Rva2VuID49ICdhJyAmJiB0aGlzX3Rva2VuIDw9ICd6JykgfHwgdGhpc190b2tlbiA+PSAnQScgJiYgdGhpc190b2tlbiA8PSAnWicpIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXIucHVzaCh0aGlzX3Rva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpZGVudGlmaWVyLmxlbmd0aCA8PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFwiaW52YWxpZCBpZGVudGlmaWVyIGJlZm9yZSBcIiArIHN0cmluZ19hcnJheS5qb2luKCcnKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cmluZ19hcnJheS51bnNoaWZ0KHRoaXNfdG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiBpZGVudGlmaWVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlkZW50aWZpZXIubGVuZ3RoIDw9IDApXG4gICAgICAgIHRocm93IFwiTm8gaWRlbnRpZmllclwiO1xuICAgIHJldHVybiBpZGVudGlmaWVyLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiByZWFkX2NvbnN0cnVjdG9yX2NhbGxfbGlzdChhcnIpIHtcbiAgICBpZiAoYXJyLmxlbmd0aCA8IDEpXG4gICAgICAgIHRocm93IFwibWlzc2luZyApXCI7XG4gICAgbGV0IHBhcmFtZXRlcnMgPSBbXTtcbiAgICBsZXQgdGhpc190b2tlbiA9IGFyclswXTtcbiAgICBpZiAodGhpc190b2tlbiAhPT0gXCIpXCIgJiYgYXJyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IG5leHRfY29uc3RydWN0b3JfY2FsbCA9IHJlYWRfY29uc3RydWN0b3JfY2FsbChhcnIpO1xuICAgICAgICBwYXJhbWV0ZXJzLnB1c2gobmV4dF9jb25zdHJ1Y3Rvcl9jYWxsKTtcbiAgICAgICAgdGhpc190b2tlbiA9IGFyclswXTtcbiAgICAgICAgaWYgKHRoaXNfdG9rZW4gPT09IFwiLFwiKSB7XG4gICAgICAgICAgICBhcnIuc2hpZnQoKTtcbiAgICAgICAgICAgIGxldCByZXN0X3BhcmFtcyA9IHJlYWRfY29uc3RydWN0b3JfY2FsbF9saXN0KGFycik7XG4gICAgICAgICAgICBpZiAocmVzdF9wYXJhbXMubGVuZ3RoID09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgXCJtaXNzaW5nIHBhcmFtZXRlcnMgYWZ0ZXIgLCA8PDwgXCIgKyBhcnIuam9pbihcIlwiKTtcbiAgICAgICAgICAgIHJlc3RfcGFyYW1zLmZvckVhY2goZSA9PiBwYXJhbWV0ZXJzLnB1c2goZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChhcnIubGVuZ3RoIDw9IDApXG4gICAgICAgIHRocm93IFwibWlzc2luZyApXCI7XG4gICAgcmV0dXJuIHBhcmFtZXRlcnM7XG59XG5mdW5jdGlvbiByZWFkX3NpbmdsZV9jYWxsKGFycikge1xuICAgIGxldCB4ID0gcmVhZF9jb25zdHJ1Y3Rvcl9jYWxsKGFycik7XG4gICAgaWYgKGFyci5sZW5ndGggPiAwKVxuICAgICAgICB0aHJvdyBcInVuZXhwZWN0ZWQgY2hhcmFjdGVyIFwiICsgYXJyWzBdO1xuICAgIHJldHVybiB4O1xufVxuZnVuY3Rpb24gcmVhZF9jb25zdHJ1Y3Rvcl9jYWxsKGFycikge1xuICAgIGxldCBpZGVudGlmaWVyID0gcmVhZF9pZGVudGlmaWVyKGFycik7XG4gICAgaWYgKGlkZW50aWZpZXIgPT09IFwibnVsbFwiKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3JfQ2FsbChudWxsLCBbXSk7XG4gICAgfVxuICAgIGxldCB0b2tlbiA9IGFyci5zaGlmdCgpO1xuICAgIGlmICh0b2tlbiAhPT0gXCIoXCIpXG4gICAgICAgIHRocm93IFwibWlzc2luZyAoXCIgKyBhcnIuam9pbihcIlwiKTtcbiAgICBsZXQgcGFyYW1ldGVycyA9IHJlYWRfY29uc3RydWN0b3JfY2FsbF9saXN0KGFycik7XG4gICAgdG9rZW4gPSBhcnIuc2hpZnQoKTtcbiAgICBpZiAodG9rZW4gIT09IFwiKVwiKVxuICAgICAgICB0aHJvdyBcIk1pc3NpbmcgKVwiO1xuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3JfQ2FsbChpZGVudGlmaWVyLCBwYXJhbWV0ZXJzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYWxsX3N0cmluZyhhU3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlYWRfc2luZ2xlX2NhbGwoYVN0cmluZy5zcGxpdChcIiBcIikuam9pbihcIlwiKS5zcGxpdCgnJykpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGFyc2VyLmpzLm1hcCIsImltcG9ydCB7IENvbnN0cnVjdG9yX0NhbGwgfSBmcm9tIFwiLi9Db25zdHJ1Y3Rvcl9DYWxsLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gYXNfY29uc3RydWN0b3JfY2FsbCh0cmVlKSB7XG4gICAgbGV0IHJldCA9IG5ldyBDb25zdHJ1Y3Rvcl9DYWxsKHRyZWUuY29udGVudCwgW10pO1xuICAgIHRyZWUuY2hpbGRyZW4uZm9yRWFjaCh2ID0+IHJldC5wYXJhbWV0ZXJzLnB1c2goYXNfY29uc3RydWN0b3JfY2FsbCh2KSkpO1xuICAgIHJldHVybiByZXQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0X3RyZWVfdG9fY29uc3RydWN0b3JfY2FsbC5qcy5tYXAiLCJpbXBvcnQge0JST1dTRVJfRVhQRVJJTUVOVH0gZnJvbSBcIi4uLy4uL21vZHVsZXMvRXhwZXJpbWVudGF0aW9uL0Jyb3dzZXJfT3V0cHV0X1dyaXRlci5qc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgYWx0ZXJuYXRpdmVzLFxyXG4gICAgRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyLCBmcmVlX3RleHQsIGluZm9ybWF0aW9uLCByYW5kb21fYXJyYXlfZWxlbWVudCxcclxuICAgIFNFVF9TRUVELFxyXG4gICAgdGV4dF9pbnB1dF9leHBlcmltZW50LFxyXG4gICAgVGltZV90b19maW5pc2hcclxufSBmcm9tIFwiLi4vLi4vbW9kdWxlcy9FeHBlcmltZW50YXRpb24vRXhwZXJpbWVudGF0aW9uLmpzXCI7XHJcbmltcG9ydCB7VGFza30gZnJvbSBcIi4uLy4uL21vZHVsZXMvRXhwZXJpbWVudGF0aW9uL1Rhc2suanNcIjtcclxuaW1wb3J0IHtnZW5lcmF0ZV9mbGF0X3RyZWVzLCBnZW5lcmF0ZV90cmVlc30gZnJvbSBcIi4uLy4uL21vZHVsZXMvZ3JhcGhzX25fdHJlZXMvVHJlZS5qc1wiO1xyXG5pbXBvcnQge2dlbmVyYXRlX2NsYXNzZXNfZnJvbV90cmVlfSBmcm9tIFwiLi9jb2RlL2dlbmVyYXRlX2NsYXNzZXNfZnJvbV90cmVlLmpzXCI7XHJcbmltcG9ydCB7Y2FsbF9zdHJpbmd9IGZyb20gXCIuL2NvZGUvUGFyc2VyLmpzXCI7XHJcbmltcG9ydCB7YXNfY29uc3RydWN0b3JfY2FsbH0gZnJvbSBcIi4vY29kZS9jb252ZXJ0X3RyZWVfdG9fY29uc3RydWN0b3JfY2FsbC5qc1wiO1xyXG5pbXBvcnQge0NvbnN0cnVjdG9yX0NhbGx9IGZyb20gXCIuL2NvZGUvQ29uc3RydWN0b3JfQ2FsbC5qc1wiO1xyXG5cclxubGV0IFNFRUQgPSBcIjY2NlwiO1xyXG5cclxuU0VUX1NFRUQoU0VFRCk7XHJcblxyXG5sZXQgVFJFRVMgPSB7XHJcbiAgICAxOiBnZW5lcmF0ZV9mbGF0X3RyZWVzKDIpLFxyXG4gICAgMzogZ2VuZXJhdGVfZmxhdF90cmVlcyg0KSxcclxuICAgIDU6IGdlbmVyYXRlX2ZsYXRfdHJlZXMoNilcclxufTtcclxuXHJcbmxldCBleHBlcmltZW50X2NvbmZpZ3VyYXRpb25fZnVuY3Rpb24gPSAod3JpdGVyOiBFeHBlcmltZW50X091dHB1dF9Xcml0ZXIpID0+IHsgcmV0dXJuIHtcclxuXHJcbiAgICBleHBlcmltZW50X25hbWU6IFwiVGVzdEV4cGVyaW1lbnRcIixcclxuICAgIHNlZWQ6IFNFRUQsXHJcblxyXG4gICAgaW50cm9kdWN0aW9uX3BhZ2VzOiB3cml0ZXIuc3RhZ2Vfc3RyaW5nX3BhZ2VzX2NvbW1hbmRzKFtcclxuICAgICAgICB3cml0ZXIuY29udmVydF9zdHJpbmdfdG9faHRtbF9zdHJpbmcoXHJcbiAgICAgICAgICAgIFwiUGxlYXNlLCBqdXN0IGRvIHRoaXMgZXhwZXJpbWVudCBvbmx5LCB3aGVuIHlvdSBoYXZlIGVub3VnaCB0aW1lIChhYm91dCAxMCBtaW51dGVzKSwgYXJlIGNvbmNlbnRyYXRlZCBlbm91Z2gsIGFuZCBtb3RpdmF0ZWQgZW5vdWdoLlxcblxcblBsZWFzZSwgb3BlbiB0aGUgYnJvd3NlciBpbiBmdWxsc2NyZWVuIG1vZGUgKHByb2JhYmx5IGJ5IHByZXNzaW5nIFtGMTFdKS4gWW91IHNob3VsZCBoYXZlIGEgc2NyZWVuIHdpdGggYSByZXNvbHV0aW9uIG9mIDE5MjB4MTA4MCBvciBtb3JlLlwiXHJcbiAgICAgICAgKSxcclxuICAgICAgICAgICAgXCJJbiB0aGlzIGV4cGVyaW1lbnQsIHlvdSB3aWxsIGJlIGFza2VkIHRvIGVudGVyIHRoZSBjb25zdHJ1Y3RvciBjYWxsIHRvIGEgY2xhc3MgPHNwYW4gY2xhc3M9J3NvdXJjZWNvZGUnPlRhcmdldDwvc3Bhbj4uIEEgdmFsaWQgY29uc3RydWN0b3IgY2FsbCByZXF1aXJlcyBpbiB0aGUgdW5kZXJseWluZyBsYW5ndWFnZSB0aGUgY29ycmVjdCBudW1iZXIgb2YgcGFyYW1ldGVycyBhcyB3ZWxsLjxicj48YnI+XCIgK1xyXG4gICAgICAgICAgICBcIlRoZSBsYW5ndWFnZXMgZG9lcyA8Yj5ub3Q8L2I+IGhhdmUgYSBrZXl3b3JkIHN1Y2ggYXMgPHNwYW4gY2xhc3M9J3NvdXJjZWNvZGUnPm5ldzwvc3Bhbj4uIEluc3RlYWQsIHlvdSBjYWxsIGEgY29uc3RydWN0b3IgbGlrZSBhIGZ1bmN0aW9uIGNhbGwsIHdoZXJlIHRoZSBjbGFzcyBuYW1lIGlzIHRoZSBmdW5jdGlvbiBuYW1lLjxici8+PGJyLz4gXCIgK1xyXG4gICAgICAgICAgICBcIkZvciBleGFtcGxlLCBpZiB0aGVyZSBpcyBhIGNsYXNzIHdpdGggdGhlIG5hbWUgPHNwYW4gY2xhc3M9J3NvdXJjZWNvZGUnPk15Q2xhc3M8L3NwYW4+IHdob3NlIGNvbnN0cnVjdG9yIGRvZXMgbm90IGhhdmUgYW55IHBhcmFtZXRlcnMsIHlvdSBjYWxsIHRoZSBjb25zdHJ1Y3RvciB2aWEgPHNwYW4gY2xhc3M9J3NvdXJjZWNvZGUnPk15Q2xhc3MoKTwvc3Bhbj4uPGJyLz48YnIvPlwiICtcclxuICAgICAgICAgICAgXCJBbGwgYXZhaWxhYmxlIGNsYXNzZXMgYXJlIHNob3duIHRvIHlvdSBpbiBhIHRhYmxlIChlYWNoIGNlbGwgaGFzIG9uZSBjbGFzcykuIFRoZSBjbGFzcyA8c3BhbiBjbGFzcz0nc291cmNlY29kZSc+VGFyZ2V0PC9zcGFuPiBpcyB0aGUgb25lIHdob3NlIHBhcmFtZXRlciBuZWVkcyB0byBiZSBjYWxsZWQuIEl0IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3QgY2VsbCBpbiB0aGUgbGFzdCByb3cuPGJyPjxicj5cIiArXHJcbiAgICAgICAgICAgIFwiVGhlIGNvZGUgaW4gdGhlIGV4cGVyaW1lbnQgaXMgZWl0aGVyIHN0YXRpY2FsbHkgdHlwZWQgb3IgZHluYW1pY2FsbHkgdHlwZWQgd2hpY2ggd2lsbCBiZSBleHBsYWluZWQgb24gdGhlIG5leHQgcGFnZSBhbmQgbm9uZSBvZiBjbGFzc2VzIHdob3NlIG9iamVjdHMgYXJlIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3IgcmVxdWlyZWQgYW55IHBhcmFtZXRlcnMuPGJyPjxicj5cIiArXHJcbiAgICAgICAgICAgIFwiUGxlYXNlIG5vdGUgdGhhdCB0aGUgY2xhc3NlcyB5b3Ugd2lsbCBzZWUgaW4gZWFjaCBjb2RlIHNuaXBwZXQgd2lsbCBiZSBkaWZmZXJlbnQuIEkuZS4gaW4gYSBmaXJzdCB0YXNrIGEgY2xhc3MgbmFtZWQgQSBpcyBkaWZmZXJlbnQgdGhhbiBhIGNsYXNzIG5hbWVkIEEgaW4gdGhlIHNlY29uZCB0YXNrLlwiLFxyXG5cclxuICAgICAgICAgICAgXCJTb21ldGltZXMgdGhlIGNsYXNzZXMgYXJlIHN0YXRpY2FsbHkgdHlwZWQgd2l0aCBhIHR5cGUgbmFtZSBpbiBmcm9udCBvZiBlYWNoIHBhcmFtZXRlciAoc3VjaCBhcyBpbiBsYW5ndWFnZXMgbGlrZSBKYXZhKS4gRm9yIGV4YW1wbGUsIHRoZSBmb2xsb3dpbmcgY291bGQgYmUgc2hvd24gdG8geW91OlwiICtcclxuICAgICAgICAgICAgXCI8dGFibGUgc3R5bGU9XFxcImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcXCI+PHRib2R5Pjx0ciBzdHlsZT1cXFwidmVydGljYWwtYWxpZ246dG9wXFxcIj48dGQgc3R5bGU9XFxcImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcXCI+Y2xhc3MgQSB7PGJyPjxicj4mbmJzcDsmbmJzcDtBKCkgeyZuYnNwOyZuYnNwO30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPiZuYnNwOyZuYnNwO2VudGVyRGF0YSgpIHt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj59PC90ZD48dGQgc3R5bGU9XFxcImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcXCI+Y2xhc3MgQyB7PGJyPjxicj4mbmJzcDsmbmJzcDtDKCkgeyZuYnNwOyZuYnNwO30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPiZuYnNwOyZuYnNwO2FkZEV2ZW50cygpIHt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj59PC90ZD48dGQgc3R5bGU9XFxcImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcXCI+Y2xhc3MgRSB7PGJyPjxicj4mbmJzcDsmbmJzcDtFKEogdGVldGgsJm5ic3A7SiBmYWxsKSB7PGJyPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO2ZhbGwucXVldWVSZXN1bHRzKCk7PGJyPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO3RlZXRoLnF1ZXVlUmVzdWx0cygpOzxicj4mbmJzcDsmbmJzcDt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj4mbmJzcDsmbmJzcDttYW5pcHVsYXRlUXVldWUoKSB7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+fTwvdGQ+PHRkIHN0eWxlPVxcXCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXFwiPmNsYXNzIEcgezxicj48YnI+Jm5ic3A7Jm5ic3A7RygpIHsmbmJzcDsmbmJzcDt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj4mbmJzcDsmbmJzcDtmaWx0ZXJFdmVudHMoKSB7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+fTwvdGQ+PHRkIHN0eWxlPVxcXCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXFwiPmNsYXNzIEggezxicj48YnI+Jm5ic3A7Jm5ic3A7SChHIGJ1aWxkaW5nKSB7PGJyPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO2J1aWxkaW5nLmZpbHRlckV2ZW50cygpOzxicj4mbmJzcDsmbmJzcDt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj4mbmJzcDsmbmJzcDtpbml0aWFsaXplRGF0YSgpIHt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj59PC90ZD48L3RyPlxcblwiICtcclxuICAgICAgICAgICAgXCI8dHIgc3R5bGU9XFxcInZlcnRpY2FsLWFsaWduOnRvcFxcXCI+PHRkIHN0eWxlPVxcXCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXFwiPmNsYXNzIEkgezxicj48YnI+Jm5ic3A7Jm5ic3A7SSgpIHsmbmJzcDsmbmJzcDt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj4mbmJzcDsmbmJzcDtjb21wdXRlUmVzdWx0KCkge30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPn08L3RkPjx0ZCBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj5jbGFzcyBKIHs8YnI+PGJyPiZuYnNwOyZuYnNwO0ooKSB7Jm5ic3A7Jm5ic3A7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+Jm5ic3A7Jm5ic3A7cXVldWVSZXN1bHRzKCkge30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPn08L3RkPjx0ZCBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj5jbGFzcyBMIHs8YnI+PGJyPiZuYnNwOyZuYnNwO0woRSBpbnNlY3QsJm5ic3A7SiBrbm90KSB7PGJyPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO2tub3QucXVldWVSZXN1bHRzKCk7PGJyPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO2luc2VjdC5tYW5pcHVsYXRlUXVldWUoKTs8YnI+Jm5ic3A7Jm5ic3A7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+Jm5ic3A7Jm5ic3A7d3JpdGVPdXRwdXQoKSB7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+fTwvdGQ+PHRkIHN0eWxlPVxcXCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXFwiPmNsYXNzIE4gezxicj48YnI+Jm5ic3A7Jm5ic3A7TigpIHsmbmJzcDsmbmJzcDt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj4mbmJzcDsmbmJzcDttb25pdG9yU3lzdGVtKCkge30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPn08L3RkPjx0ZCBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj5jbGFzcyBPIHs8YnI+PGJyPiZuYnNwOyZuYnNwO08oUiByb2FkKSB7PGJyPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO3JvYWQuY3JlYXRlVGFza3MoKTs8YnI+Jm5ic3A7Jm5ic3A7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+Jm5ic3A7Jm5ic3A7dHJhY2tVc2VyQWN0aXZpdHkoKSB7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+fTwvdGQ+PC90cj5cXG5cIiArXHJcbiAgICAgICAgICAgIFwiPHRyIHN0eWxlPVxcXCJ2ZXJ0aWNhbC1hbGlnbjp0b3BcXFwiPjx0ZCBjb2xzcGFuPVxcXCIyXFxcIiBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj5jbGFzcyBUYXJnZXQgezxicj48YnI+Jm5ic3A7Jm5ic3A7VGFyZ2V0KEEgc3Vic3RhbmNlLCZuYnNwO0Mgc2NlbmUpIHs8YnI+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7c2NlbmUuYWRkRXZlbnRzKCk7PGJyPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO3N1YnN0YW5jZS5lbnRlckRhdGEoKTs8YnI+Jm5ic3A7Jm5ic3A7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+Jm5ic3A7Jm5ic3A7Z2V0VXNlckluZm8oKSB7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+fTwvdGQ+PHRkIHN0eWxlPVxcXCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXFwiPmNsYXNzIFIgezxicj48YnI+Jm5ic3A7Jm5ic3A7UihIIGRyaXZpbmcsJm5ic3A7TiBkb29yKSB7PGJyPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO2RyaXZpbmcuaW5pdGlhbGl6ZURhdGEoKTs8YnI+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7ZG9vci5tb25pdG9yU3lzdGVtKCk7PGJyPiZuYnNwOyZuYnNwO30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPiZuYnNwOyZuYnNwO2NyZWF0ZVRhc2tzKCkge30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPn08L3RkPjx0ZCBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj5jbGFzcyBTIHs8YnI+PGJyPiZuYnNwOyZuYnNwO1MoQSByYWtlKSB7PGJyPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO3Jha2UuZW50ZXJEYXRhKCk7PGJyPiZuYnNwOyZuYnNwO30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPiZuYnNwOyZuYnNwO2RvQ29tcHV0YXRpb24oKSB7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+fTwvdGQ+PHRkIHN0eWxlPVxcXCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXFwiPmNsYXNzIFQgezxicj48YnI+Jm5ic3A7Jm5ic3A7VCgpIHsmbmJzcDsmbmJzcDt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj4mbmJzcDsmbmJzcDtzZXR1cENvbm5lY3Rpb25zKCkge30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPn08L3RkPjwvdHI+XFxuXCIgK1xyXG4gICAgICAgICAgICBcIjwvdGJvZHk+PC90YWJsZT48YnI+XCIgK1xyXG4gICAgICAgICAgICBcIlRoZSBjb3JyZWN0IGNvbnN0cnVjdG9yIGNhbGwgaW4gdGhhdCBjYXNlIGlzOiA8c3BhbiBjbGFzcz0nc291cmNlY29kZSc+VGFyZ2V0KEEoKSwgQygpKTwvc3Bhbj46IHRoZSBmaXJzdCBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiA8c3BhbiBjbGFzcz0nc291cmNlY29kZSc+QTwvc3Bhbj4sIHRoZSBzZWNvbmQgb25lIGFuIGluc3RhbmNlIG9mIDxzcGFuIGNsYXNzPSdzb3VyY2Vjb2RlJz5DPC9zcGFuPi5cIixcclxuXHJcbiAgICAgICAgICAgIFwiU29tZXRpbWVzIHRoZSBjbGFzc2VzIGFyZSBkeW5hbWljYWxseSB0eXBlZCAoc3VjaCBhcyBpbiBsYW5ndWFnZXMgbGlrZSBKYXZhU2NyaXB0KS4gRm9yIGV4YW1wbGUsIHRoZSBmb2xsb3dpbmcgY291bGQgYmUgc2hvd24gdG8geW91OlwiICtcclxuICAgICAgICAgICAgXCI8c3BhbiBjbGFzcz0nc291cmNlY29kZSc+XCIgK1xyXG4gICAgICAgICAgICBcIjx0YWJsZSBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj48dGJvZHk+PHRyIHN0eWxlPVxcXCJ2ZXJ0aWNhbC1hbGlnbjp0b3BcXFwiPjx0ZCBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj5jbGFzcyBBIHs8YnI+PGJyPiZuYnNwOyZuYnNwO0EoKSB7Jm5ic3A7Jm5ic3A7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+Jm5ic3A7Jm5ic3A7ZW50ZXJEYXRhKCkge30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPn08L3RkPjx0ZCBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj5jbGFzcyBDIHs8YnI+PGJyPiZuYnNwOyZuYnNwO0MoKSB7Jm5ic3A7Jm5ic3A7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+Jm5ic3A7Jm5ic3A7YWRkRXZlbnRzKCkge30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPn08L3RkPjx0ZCBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj5jbGFzcyBFIHs8YnI+PGJyPiZuYnNwOyZuYnNwO0UodGVldGgsJm5ic3A7ZmFsbCkgezxicj4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtmYWxsLnF1ZXVlUmVzdWx0cygpOzxicj4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDt0ZWV0aC5xdWV1ZVJlc3VsdHMoKTs8YnI+Jm5ic3A7Jm5ic3A7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+Jm5ic3A7Jm5ic3A7bWFuaXB1bGF0ZVF1ZXVlKCkge30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPn08L3RkPjx0ZCBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj5jbGFzcyBHIHs8YnI+PGJyPiZuYnNwOyZuYnNwO0coKSB7Jm5ic3A7Jm5ic3A7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+Jm5ic3A7Jm5ic3A7ZmlsdGVyRXZlbnRzKCkge30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPn08L3RkPjx0ZCBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj5jbGFzcyBIIHs8YnI+PGJyPiZuYnNwOyZuYnNwO0goYnVpbGRpbmcpIHs8YnI+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7YnVpbGRpbmcuZmlsdGVyRXZlbnRzKCk7PGJyPiZuYnNwOyZuYnNwO30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPiZuYnNwOyZuYnNwO2luaXRpYWxpemVEYXRhKCkge30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPn08L3RkPjwvdHI+XFxuXCIgK1xyXG4gICAgICAgICAgICBcIjx0ciBzdHlsZT1cXFwidmVydGljYWwtYWxpZ246dG9wXFxcIj48dGQgc3R5bGU9XFxcImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcXCI+Y2xhc3MgSSB7PGJyPjxicj4mbmJzcDsmbmJzcDtJKCkgeyZuYnNwOyZuYnNwO30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPiZuYnNwOyZuYnNwO2NvbXB1dGVSZXN1bHQoKSB7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+fTwvdGQ+PHRkIHN0eWxlPVxcXCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXFwiPmNsYXNzIEogezxicj48YnI+Jm5ic3A7Jm5ic3A7SigpIHsmbmJzcDsmbmJzcDt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj4mbmJzcDsmbmJzcDtxdWV1ZVJlc3VsdHMoKSB7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+fTwvdGQ+PHRkIHN0eWxlPVxcXCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXFwiPmNsYXNzIEwgezxicj48YnI+Jm5ic3A7Jm5ic3A7TChpbnNlY3QsJm5ic3A7a25vdCkgezxicj4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtrbm90LnF1ZXVlUmVzdWx0cygpOzxicj4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtpbnNlY3QubWFuaXB1bGF0ZVF1ZXVlKCk7PGJyPiZuYnNwOyZuYnNwO30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPiZuYnNwOyZuYnNwO3dyaXRlT3V0cHV0KCkge30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPn08L3RkPjx0ZCBzdHlsZT1cXFwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxcIj5jbGFzcyBOIHs8YnI+PGJyPiZuYnNwOyZuYnNwO04oKSB7Jm5ic3A7Jm5ic3A7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+Jm5ic3A7Jm5ic3A7bW9uaXRvclN5c3RlbSgpIHt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj59PC90ZD48dGQgc3R5bGU9XFxcImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcXCI+Y2xhc3MgTyB7PGJyPjxicj4mbmJzcDsmbmJzcDtPKHJvYWQpIHs8YnI+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7cm9hZC5jcmVhdGVUYXNrcygpOzxicj4mbmJzcDsmbmJzcDt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj4mbmJzcDsmbmJzcDt0cmFja1VzZXJBY3Rpdml0eSgpIHt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj59PC90ZD48L3RyPlxcblwiICtcclxuICAgICAgICAgICAgXCI8dHIgc3R5bGU9XFxcInZlcnRpY2FsLWFsaWduOnRvcFxcXCI+PHRkIGNvbHNwYW49XFxcIjJcXFwiIHN0eWxlPVxcXCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXFwiPmNsYXNzIFRhcmdldCB7PGJyPjxicj4mbmJzcDsmbmJzcDtUYXJnZXQoc3Vic3RhbmNlLCZuYnNwOyBzY2VuZSkgezxicj4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtzY2VuZS5hZGRFdmVudHMoKTs8YnI+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7c3Vic3RhbmNlLmVudGVyRGF0YSgpOzxicj4mbmJzcDsmbmJzcDt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj4mbmJzcDsmbmJzcDtnZXRVc2VySW5mbygpIHt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj59PC90ZD48dGQgc3R5bGU9XFxcImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcXCI+Y2xhc3MgUiB7PGJyPjxicj4mbmJzcDsmbmJzcDtSKGRyaXZpbmcsJm5ic3A7ZG9vcikgezxicj4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtkcml2aW5nLmluaXRpYWxpemVEYXRhKCk7PGJyPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO2Rvb3IubW9uaXRvclN5c3RlbSgpOzxicj4mbmJzcDsmbmJzcDt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj4mbmJzcDsmbmJzcDtjcmVhdGVUYXNrcygpIHt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj59PC90ZD48dGQgc3R5bGU9XFxcImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcXCI+Y2xhc3MgUyB7PGJyPjxicj4mbmJzcDsmbmJzcDtTKHJha2UpIHs8YnI+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7cmFrZS5lbnRlckRhdGEoKTs8YnI+Jm5ic3A7Jm5ic3A7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+Jm5ic3A7Jm5ic3A7ZG9Db21wdXRhdGlvbigpIHt9Jm5ic3A7Jm5ic3A7Jm5ic3A7PGJyPjxicj59PC90ZD48dGQgc3R5bGU9XFxcImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcXCI+Y2xhc3MgVCB7PGJyPjxicj4mbmJzcDsmbmJzcDtUKCkgeyZuYnNwOyZuYnNwO30mbmJzcDsmbmJzcDsmbmJzcDs8YnI+PGJyPiZuYnNwOyZuYnNwO3NldHVwQ29ubmVjdGlvbnMoKSB7fSZuYnNwOyZuYnNwOyZuYnNwOzxicj48YnI+fTwvdGQ+PC90cj5cXG5cIiArXHJcbiAgICAgICAgICAgIFwiPC90Ym9keT48L3RhYmxlPjwvc3Bhbj5cIiArXHJcbiAgICAgICAgICAgIFwiPGJyPlwiICtcclxuICAgICAgICAgICAgXCJUaGUgY29ycmVjdCBjb25zdHJ1Y3RvciBjYWxsIGlzIGFnYWluOiA8c3BhbiBjbGFzcz0nc291cmNlY29kZSc+VGFyZ2V0KEEoKSwgQygpKTwvc3Bhbj46IFwiICtcclxuICAgICAgICAgICAgXCI8b2w+XCIgK1xyXG4gICAgICAgICAgICBcIjxsaT50aGUgZmlyc3QgcGFyYW1ldGVyIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgPHNwYW4gY2xhc3M9J3NvdXJjZWNvZGUnPkE8L3NwYW4+LCBiZWNhdXNlIHRoZSBtZXNzYWdlIDxzcGFuIGNsYXNzPSdzb3VyY2Vjb2RlJz5lbnRlckRhdGEoKTwvc3Bhbj4gaXMgc2VudCB0byB0aGUgZmlyc3QgcGFyYW1ldGVyIChhbmQgaXQgaXMganVzdCBpbXBsZW1lbnRlZCBpbiA8c3BhbiBjbGFzcz0nc291cmNlY29kZSc+QTwvc3Bhbj4pLjwvbGk+XCIgK1xyXG4gICAgICAgICAgICBcIjxsaT5UaGUgc2Vjb25kIHBhcmFtZXRlciBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIDxzcGFuIGNsYXNzPSdzb3VyY2Vjb2RlJz5DPC9zcGFuPiBiZWNhdXNlIHRoZSBtZXNzYWdlIDxzcGFuIGNsYXNzPSdzb3VyY2Vjb2RlJz5hZGRFdmVudHMoKTwvc3Bhbj4gaXMgc2VudCB0byB0aGUgc2Vjb25kIHBhcmFtZXRlciAoYW5kIGl0IGlzIGp1c3QgaW1wbGVtZW50ZWQgaW4gPHNwYW4gY2xhc3M9J3NvdXJjZWNvZGUnPkM8L3NwYW4+KS48L2xpPlwiICtcclxuICAgICAgICAgICAgXCI8L29sPlwiXHJcblxyXG4gICAgXSksXHJcblxyXG4gICAgcHJlX3J1bl90cmFpbmluZ19pbnN0cnVjdGlvbnM6IHdyaXRlci5zdHJpbmdfcGFnZV9jb21tYW5kKFxyXG4gICAgICAgIHdyaXRlci5jb252ZXJ0X3N0cmluZ190b19odG1sX3N0cmluZyhcclxuICAgICAgICAgICAgXCJZb3UgZW50ZXJlZCB0aGUgdHJhaW5pbmcgcGhhc2UgdGhhdCBjb25zaXN0cyBvZiBqdXN0IHR3byBleGFtcGxlcy4gQWdhaW4sIHBsZWFzZSBlbnRlciB0aGUgY29uc3RydWN0b3IgY2FsbC4gWW91IHdpbGwgZ28gdG8gdGhlIG5leHQgdGFzayBvbmNlIHlvdSBlbnRlcmVkIHRoZSBjb3JyZWN0IGNhbGwuXCJcclxuICAgICAgICApKSxcclxuXHJcbiAgICBwcmVfcnVuX2V4cGVyaW1lbnRfaW5zdHJ1Y3Rpb25zOiB3cml0ZXIuc3RyaW5nX3BhZ2VfY29tbWFuZChcclxuICAgICAgICB3cml0ZXIuY29udmVydF9zdHJpbmdfdG9faHRtbF9zdHJpbmcoXHJcbiAgICAgICAgICAgIFwiWW91IGVudGVyZWQgdGhlIGV4cGVyaW1lbnQgcGhhc2UuIE5vdywgaXQgc2hvdWxkIHRha2UgcHJvYmFibHkgNS03IG1pbnV0ZXMgdW50aWwgdGhlIGVuZCBvZiB0aGUgZXhwZXJpbWVudC5cIlxyXG4gICAgICAgICkpLFxyXG5cclxuICAgIHBvc3RfcXVlc3Rpb25uYWlyZSAgICAgICAgICAgOiAgIFtcclxuICAgICAgICBhbHRlcm5hdGl2ZXMoXCJBZ2VcIixcIldoYXQncyB5b3VyIGFnZT8/XCIsXHJcbiAgICAgICAgICAgIFtcInlvdW5nZXIgdGhhbiAxOFwiLCBcImJldHdlZW4gMTggYW5kIChleGNsdWRpbmcpIDI1XCIsIFwiYmV0d2VlbiAyNSBhbmQgKGV4Y2x1ZGluZykgMzBcIiwgXCJiZXR3ZWVuIDMwIGFuZCAoZXhjbHVkaW5nKSAzNVwiLCBcImJldHdlZW4gMzUgYW5kIChleGNsdWRpbmcpIDQwXCIsIFwiNDAgb3Igb2xkZXJcIl0pLFxyXG5cclxuICAgICAgICBhbHRlcm5hdGl2ZXMoXCJTdGF0dXNcIixcIldoYXQgaXMgeW91ciBjdXJyZW50IHdvcmtpbmcgc3RhdHVzP1wiLFxyXG4gICAgICAgICAgICBbXCJVbmRlcmdyYWR1YXRlIHN0dWRlbnQgKEJTYyBub3QgeWV0IGZpbmlzaGVkKVwiLCBcIkdyYWR1YXRlIHN0dWRlbnQgKGF0IGxlYXN0IEJTYyBmaW5pc2hlZClcIiwgXCJQaEQgc3R1ZGVudFwiLCBcIlByb2Zlc3Npb25hbCBzb2Z0d2FyZSBkZXZlbG9wZXJcIiwgXCJUZWFjaGVyXCIsIFwiT3RoZXJcIl0pLFxyXG5cclxuICAgICAgICBhbHRlcm5hdGl2ZXMoXCJTdHVkaWVzXCIsXCJJbiBjYXNlIHlvdSBzdHVkeSwgd2hhdCdzIHlvdXIgc3ViamVjdD9cIixcclxuICAgICAgICAgICAgW1wiSSBkbyBub3Qgc3R1ZHlcIiwgXCJDb21wdXRlciBzY2llbmNlXCIsIFwiY29tcHV0ZXIgc2NpZW5jZSByZWxhdGVkIChzdWNoIGFzIGluZm9ybWF0aW9uIHN5c3RlbXMsIGFrYSBXaUluZilcIiwgXCJzb21ldGhpbmcgZWxzZSBpbiBuYXR1cmFsIHNjaWVuY2VzXCIsIFwic29tZXRoaW5nIGVsc2VcIl0pLFxyXG5cclxuICAgICAgICBhbHRlcm5hdGl2ZXMoXCJMT0NFeHBlcmllbmNlXCIsXCJXaGF0IGRlc2NyaWJlcyB5b3VyIHByb2dyYW1taW5nIGJhY2tncm91bmQgYmVzdD9cIixcclxuICAgICAgICAgICAgW1wiSSBuZXZlciBwcm9ncmFtXCIsIFwiSSByYXJlbHkgcHJvZ3JhbVwiLCBcIkkgd3JpdGUgc29tZSBMT0MgZnJvbSB0aW1lIHRvIHRpbWVcIiwgXCJJIGZyZXF1ZW50bHkgd3JpdGUgY29kZVwiLCBcIkkgd3JpdGUgY29kZSBhbG1vc3QgZXZlcnkgZGF5XCJdKSxcclxuXHJcbiAgICAgICAgYWx0ZXJuYXRpdmVzKFwiWWVhcnNPZkV4cGVyaWVuY2VcIiwgXCJIb3cgbWFueSB5ZWFycyBvZiBleHBlcmllbmNlIGRvIHlvdSBoYXZlIGluIHNvZnR3YXJlIGluZHVzdHJ5P1wiLFxyXG4gICAgICAgICAgICBbXCJub25lXCIsIFwibGVzcyB0aGFuIG9yIGVxdWFsIDEgeWVhclwiLCBcIm1vcmUgdGhhbiAxIHllYXIsIGJ1dCBsZXNzIHRoYW4gb3IgZXF1YWwgMyB5ZWFyc1wiLCBcIm1vcmUgdGhhbiAzIHllYXJzLCBidXQgbGVzcyB0aGFuIG9yIGVxdWFsIDUgeWVhclwiLCBcIm1vcmUgdGhhbiA1IHllYXJzXCJdKSxcclxuXHJcbiAgICAgICAgYWx0ZXJuYXRpdmVzKFwiaW1wcmVzc2lvblwiLCBcIldoYXQgc3RhdGVtZW50IGRlc2NyaWJlcyBcIiArXHJcbiAgICAgICAgICAgIFwiICAgICAgICAgICAgICAgICAgICAgICBiZXN0IHlvdXIgaW1wcmVzc2lvbiBcXG5cXCBvZiB0aGUgZXhwZXJpbWVudD9cIiwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiSSBkbyBub3QgdGhpbmsgdGhhdCB0aGVyZSB3YXMgYSBkaWZmZXJlbmNlIGJldHdlZW4gc3RhdGljIGFuZCBkeW5hbWljIHR5cGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJEeW5hbWljIHR5cGVzIG1hZGUgaXQgc2xpZ2h0bHkgZWFzaWVyIGZvciBtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRHluYW1pYyB0eXBlcyBtYWRlIGl0IG11Y2ggZWFzaWVyIGZvciBtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiU3RhdGljIHR5cGVzIG1hZGUgaXQgc2xpZ2h0bHkgZWFzaWVyIGZvciBtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiU3RhdGljIHR5cGVzIG1hZGUgaXQgbXVjaCBlYXNpZXIgZm9yIG1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG5cclxuICAgICAgICBhbHRlcm5hdGl2ZXMoXCJwcmVmZXJlbmNlXCIsIFwiV2hhdCBraW5kcyBvZiBsYW5ndWFnZSBkbyB5b3UgcHJlZmVyP1wiLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJTbGlnaHRseSByYXRoZXIgZHluYW1pY2FsbHkgdHlwZWQgbGFuZ3VhZ2VzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJTbGlnaHRseSBzdGF0aWNhbGx5IHR5cGVkIGxhbmd1YWdlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRGVmaW5pdGl2ZWx5IGR5bmFtaWNhbGx5IHR5cGVkIGxhbmd1YWdlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRGVmaW5pdGl2ZWx5IHN0YXRpY2FsbHkgdHlwZWQgbGFuZ3VhZ2VzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJJIGRvbid0IHRoaW5rIHR5cGluZyBtYXR0ZXJzIG11Y2hcIlxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGFsdGVybmF0aXZlcyhcInBvc3NpYmxlRWZmZWN0XCIsIFwiRG8geW91IHRoaW5rIHBhcnRpY2lwYXRpbmcgaW4gdGhlIGV4cGVyaW1lbnQgY2hhbmdlZCB5b3VyIHBlcnNwZWN0aXZlIG9uIHR5cGUgc3lzdGVtcz9cIiwgW1xyXG4gICAgICAgICAgICBcIlJhdGhlciBub1wiLFxyXG4gICAgICAgICAgICBcIlJhdGhlciB5ZXNcIixcclxuICAgICAgICAgICAgXCJEZWZpbml0aXZlbHkgbm9cIixcclxuICAgICAgICAgICAgXCJEZWZpbml0aXZlbHkgZXNcIixcclxuICAgICAgICAgICAgXCJJIGRvbid0IGtub3dcIlxyXG4gICAgICAgIF0pLFxyXG5cclxuICAgIF0sXHJcblxyXG4gICAgZmluaXNoX3BhZ2VzOiBbXHJcbiAgICAgICAgd3JpdGVyLnN0cmluZ19wYWdlX2NvbW1hbmQoXHJcbiAgICAgICAgICAgIFwiPHA+QWxtb3N0IGRvbmUuIE5leHQsIHRoZSBleHBlcmltZW50IGRhdGEgd2lsbCBiZSBkb3dubG9hZGVkIChhZnRlciBwcmVzc2luZyBbRW50ZXJdKS48YnI+PGJyPlwiICtcclxuICAgICAgICAgICAgXCJQbGVhc2UsIHNlbmQgdGhlIFwiICtcclxuICAgICAgICAgICAgXCJkb3dubG9hZGVkIGZpbGUgdG8gdGhlIGV4cGVyaW1lbnRlcjogXCIgKyBcIjxhIGhyZWY9J21haWx0bzpzdGVmYW4uaGFuZW5iZXJnQHVuaS1kdWUuZGUnPnN0ZWZhbi5oYW5lbmJlcmdAdW5pLWR1ZS5kZTwvYT48L3A+XCIgK1xyXG4gICAgICAgICAgICBcIjxwPkJ5IHNlbmRpbmcgdGhhdCBtYWlsLCB5b3UgYWdyZWUgdGhhdCBcIiArXHJcbiAgICAgICAgICAgIFwieW91ciAoYW5vbnltaXplZCkgZGF0YSB3aWxsIGJlIHVzZWQgZm9yIHNjaWVudGlmaWMgYW5hbHlzZXMgd2hlcmUgeW91ciBkYXRhICh0b2dldGhlciB3aXRoIG90aGVycyBpbiBhbiBcIiArXHJcbiAgICAgICAgICAgIFwiYW5vbnltaXplZCB3YXkpIHdpbGwgYmUgcHVibGlzaGVkLjxicj48YnI+SS5lLiwgeW91IGFncmVlIHdpdGggdGhlIGluZm9ybWF0aW9uIHNoZWV0LCBzZWUgXCIgK1xyXG4gICAgICAgICAgICBcIjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9zaGFuZW5iZS9FeHBlcmltZW50cy9ibG9iL21haW4vMjAyNF9UeXBlU3lzdGVtc19Db25zdHJ1Y3RvckNhbGxfRmxhdC9BZ3JlZW1lbnQucGRmJyB0YXJnZXQ9J19ibGFuayc+aGVyZTwvYT4uIFwiICtcclxuICAgICAgICAgICAgXCJOb3RlLCB0aGF0IGl0IGl0IG5vIGxvbmdlciBuZWNlc3NhcnkgdG8gc2VuZCBhIHNpZ25lZCB2ZXJzaW9uIG9mIHRoZSBhZ3JlZW1lbnQgdG8gdGhlIGV4cGVyaW1lbnRlci48YnI+PGJyPlwiICtcclxuICAgICAgICAgICAgXCJBZnRlciBzZW5kaW5nIHlvdXIgZW1haWwsIHlvdSBjYW4gY2xvc2UgdGhpcyB3aW5kb3cuPC9wPlwiICtcclxuICAgICAgICAgICAgXCI8cD5NYW55IHRoYW5rcyBmb3IgeW91ciBwYXJ0aWNpcGF0aW9uLjxicj5cIiArXHJcbiAgICAgICAgICAgIFwiLVN0ZWZhbiBIYW5lbmJlcmc8L3A+XCJcclxuICAgICAgICApXHJcbiAgICBdLFxyXG5cclxuICAgIGxheW91dDogW1xyXG4gICAgICAgIHsgdmFyaWFibGU6IFwiTm90YXRpb25cIiwgIHRyZWF0bWVudHM6IFtcInR5cGVzXCIsIFwibm9fdHlwZXNcIl19LFxyXG4gICAgICAgIHsgdmFyaWFibGU6IFwiTnVtYmVyX29mX3BhcmFtZXRlcnNcIiwgIHRyZWF0bWVudHM6IFtcIjFcIiwgXCIzXCIsIFwiNVwiXX0sXHJcbiAgICBdLFxyXG5cclxuICAgIHJlcGV0aXRpb25zOiAyLFxyXG5cclxuICAgIG1lYXN1cmVtZW50OiBUaW1lX3RvX2ZpbmlzaCh0ZXh0X2lucHV0X2V4cGVyaW1lbnQpLFxyXG5cclxuICAgIHRyYWluaW5nX2NvbmZpZ3VyYXRpb246IHtcclxuICAgICAgICBmaXhlZF90cmVhdG1lbnRzOiAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJ0eXBlc1wiLCBcIjVcIl0sIFtcIm5vX3R5cGVzXCIsIFwiNVwiXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICBjYW5fYmVfY2FuY2VsbGVkOiBmYWxzZSxcclxuICAgICAgICBjYW5fYmVfcmVwZWF0ZWQ6IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuICAgIHRhc2tfY29uZmlndXJhdGlvbjogICAgKHQ6VGFzaykgPT4ge1xyXG5cclxuICAgICAgICBsZXQgdGhpc190cmVlID0gcmFuZG9tX2FycmF5X2VsZW1lbnQoVFJFRVNbdC50cmVhdG1lbnRfdmFsdWUoXCJOdW1iZXJfb2ZfcGFyYW1ldGVyc1wiKV0pLmNsb25lKCk7XHJcbiAgICAgICAgbGV0IHRoaXNfY2xhc3NlcyA9IGdlbmVyYXRlX2NsYXNzZXNfZnJvbV90cmVlKHRoaXNfdHJlZSwgMTQpO1xyXG5cclxuICAgICAgICBsZXQgaHRtbF9zdHJpbmcgPSB0aGlzX2NsYXNzZXMuaHRtbF90YWJsZV9zdHJpbmcoNSwgdC50cmVhdG1lbnRfdmFsdWUoXCJOb3RhdGlvblwiKT09PVwidHlwZXNcIik7XHJcbiAgICAgICAgbGV0IGVycm9yX3N0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgICAgIHQuZG9fcHJpbnRfdGFzayA9ICgpID0+IHtcclxuICAgICAgICAgICAgd3JpdGVyLmNsZWFyX3N0YWdlKCk7XHJcbiAgICAgICAgICAgIHdyaXRlci5wcmludF9odG1sX29uX3N0YWdlKFwiPGRpdiBjbGFzcz0nc291cmNlY29kZSc+XCIgKyBodG1sX3N0cmluZyArIFwiPC9kaXY+XCIpO1xyXG4gICAgICAgICAgICAvLyB3cml0ZXIucHJpbnRfaHRtbF9vbl9zdGFnZShhc19jb25zdHJ1Y3Rvcl9jYWxsKHRoaXNfdHJlZSkuY2FsbF9zdHJpbmcoKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdC5leHBlY3RlZF9hbnN3ZXIgPSBhc19jb25zdHJ1Y3Rvcl9jYWxsKHRoaXNfdHJlZSkuY2FsbF9zdHJpbmcoKTtcclxuXHJcbiAgICAgICAgdC5hY2NlcHRzX2Fuc3dlcl9mdW5jdGlvbiA9IChnaXZlbl9hbnN3ZXIpID0+IHtcclxuICAgICAgICAgICAgbGV0IGdpdmVuX2NhbGwgPSBudWxsO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGdpdmVuX2NhbGw6Q29uc3RydWN0b3JfQ2FsbCA9IGNhbGxfc3RyaW5nKGdpdmVuX2Fuc3dlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZih0LnRyZWF0bWVudF92YWx1ZShcIk5vdGF0aW9uXCIpPT09XCJ0eXBlc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfY2xhc3Nlcy50eXBlX2NoZWNrKGdpdmVuX2NhbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfY2xhc3Nlcy5leGVjdXRlKGdpdmVuX2NhbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcl9zdHJpbmcgPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3Jfc3RyaW5nID0gZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCByaWdodF90YXJnZXQgPSAoY2FsbF9zdHJpbmcoZ2l2ZW5fYW5zd2VyKS5jbGFzc19uYW1lID09PSBhc19jb25zdHJ1Y3Rvcl9jYWxsKHRoaXNfdHJlZSkuY2xhc3NfbmFtZSk7XHJcbiAgICAgICAgICAgIGlmKHJpZ2h0X3RhcmdldCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yX3N0cmluZyA9IFwiaW52YWxpZCB0YXJnZXQgY2xhc3NcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0LmRvX3ByaW50X2Vycm9yX21lc3NhZ2UgPSAoZ2l2ZW5fYW5zd2VyKSA9PiB7XHJcbiAgICAgICAgICAgIHdyaXRlci5jbGVhcl9lcnJvcigpO1xyXG4gICAgICAgICAgICB3cml0ZXIucHJpbnRfaHRtbF9vbl9lcnJvcihlcnJvcl9zdHJpbmcpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHQuZG9fcHJpbnRfYWZ0ZXJfdGFza19pbmZvcm1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgd3JpdGVyLmNsZWFyX3N0YWdlKCk7XHJcbiAgICAgICAgICAgIHdyaXRlci5jbGVhcl9lcnJvcigpO1xyXG4gICAgICAgICAgICB3cml0ZXIucHJpbnRfc3RyaW5nX29uX3N0YWdlKHdyaXRlci5jb252ZXJ0X3N0cmluZ190b19odG1sX3N0cmluZyhcclxuICAgICAgICAgICAgICAgIFwiQ29ycmVjdC5cXG5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICBcIkluIGNhc2UsIHlvdSBmZWVsIG5vdCBjb25jZW50cmF0ZWQgZW5vdWdoLCBtYWtlIGEgc2hvcnQgYnJlYWsuXFxuXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgXCJQcmVzcyBbRW50ZXJdIHRvIGdvIG9uLiBcIikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufX07XHJcblxyXG5CUk9XU0VSX0VYUEVSSU1FTlQoZXhwZXJpbWVudF9jb25maWd1cmF0aW9uX2Z1bmN0aW9uKTtcclxuIiwiaW1wb3J0IHsgQ2xhc3NfRGVmaW5pdGlvbiB9IGZyb20gXCIuL0NsYXNzX0RlZmluaXRpb24uanNcIjtcbmltcG9ydCB7IENsYXNzZXMgfSBmcm9tIFwiLi9DbGFzc2VzLmpzXCI7XG5pbXBvcnQgeyBkb19yYW5kb21fYXJyYXlfc29ydCwgcmFuZG9tX2FycmF5X2VsZW1lbnQsIHJhbmRvbV9pbnRlZ2VyX3VwX3RvX2V4Y2x1ZGluZyB9IGZyb20gXCIuLi8uLi8uLi9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9FeHBlcmltZW50YXRpb24uanNcIjtcbmltcG9ydCB7IE5vdW5zIH0gZnJvbSBcIi4uLy4uLy4uL21vZHVsZXMvV29yZHMvTm91bnMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZV9jbGFzc2VzX2Zyb21fdHJlZSh0cmVlLCBudW1iZXJfb2ZfY2xhc3Nlcykge1xuICAgIGxldCBDTEFTU19OQU1FUyA9IGRvX3JhbmRvbV9hcnJheV9zb3J0KFtcIkFcIiwgXCJCXCIsIFwiQ1wiLCBcIkRcIiwgXCJFXCIsIFwiRlwiLCBcIkdcIiwgXCJIXCIsIFwiSVwiLCBcIkpcIiwgXCJLXCIsIFwiTFwiLCBcIk1cIiwgXCJOXCIsIFwiT1wiLCBcIlBcIiwgXCJRXCIsIFwiUlwiLCBcIlNcIiwgXCJUXCIsIFwiVVwiLCBcIlZcIiwgXCJXXCIsIFwiWFwiLCBcIllcIiwgXCJaXCJdKTtcbiAgICBsZXQgUEFSQU1FVEVSX05BTUVTID0gZG9fcmFuZG9tX2FycmF5X3NvcnQobmV3IE5vdW5zKCkud29yZHMpO1xuICAgIGxldCBGVU5DVElPTl9OQU1FUyA9IGRvX3JhbmRvbV9hcnJheV9zb3J0KFtcbiAgICAgICAgJ2FkZEV2ZW50cycsXG4gICAgICAgICdhY2NlcHREZWZhdWx0cycsXG4gICAgICAgICdhbmFseXplUmVzdWx0cycsXG4gICAgICAgICdhc2tJbnB1dCcsXG4gICAgICAgICdiaW5kUmVzb3VyY2VzJyxcbiAgICAgICAgJ2NhbmNlbEluaXRpYWxpemF0aW9uJyxcbiAgICAgICAgJ2NhbGN1bGF0ZVN1bScsXG4gICAgICAgICdjbGVhckNhY2hlJyxcbiAgICAgICAgJ2Nsb25lTnVtYmVycycsXG4gICAgICAgICdjb21wdXRlUmVzdWx0JyxcbiAgICAgICAgJ2Nvbm5lY3REYXRhYmFzZScsXG4gICAgICAgICdjcmVhdGVUYXNrcycsXG4gICAgICAgICdkb0NvbXB1dGF0aW9uJyxcbiAgICAgICAgJ2Ryb3BGaWxlcycsXG4gICAgICAgICdleGVjdXRlVGFzaycsXG4gICAgICAgICdkdW1wRGF0YWJhc2UnLFxuICAgICAgICAnZW50ZXJEYXRhJyxcbiAgICAgICAgJ2VyYXNlVG1wJyxcbiAgICAgICAgJ2ZldGNoRGF0YScsXG4gICAgICAgICdmaW5pc2hTZXR1cCcsXG4gICAgICAgICdmaWx0ZXJFdmVudHMnLFxuICAgICAgICAnZm9yd2FyZFByb2ZpbGUnLFxuICAgICAgICAnZm9ybWF0T3V0cHV0JyxcbiAgICAgICAgJ2dlbmVyYXRlTnVtYmVyJyxcbiAgICAgICAgJ2dldFVzZXJJbmZvJyxcbiAgICAgICAgJ2hhbmRsZUVycm9yJywgJycgK1xuICAgICAgICAgICAgJ2luaXRpYWxpemVEYXRhJyxcbiAgICAgICAgJ2ludmFsaWRhdGVDb25uZWN0aW9ucycsXG4gICAgICAgICdsb2dFcnJvcnMnLFxuICAgICAgICAnbWVyZ2VSZXF1ZXN0cycsXG4gICAgICAgICdtb25pdG9yU3lzdGVtJyxcbiAgICAgICAgJ21hbmlwdWxhdGVRdWV1ZScsXG4gICAgICAgICdwYXJzZURhdGEnLFxuICAgICAgICAncHJpbnRMb2dzJyxcbiAgICAgICAgJ3Byb2Nlc3NEYXRhJyxcbiAgICAgICAgJ3F1ZXVlUmVzdWx0cycsXG4gICAgICAgICdydW5Db21wdXRhdGlvbicsXG4gICAgICAgICdyZXJ1blNldHVwJyxcbiAgICAgICAgJ3NldHVwQ29ubmVjdGlvbnMnLFxuICAgICAgICAnc2NhbGVCYW5kd2l0aCcsXG4gICAgICAgICdzdHJlYW1FdmVudHMnLFxuICAgICAgICAndmFsaWRhdGVJbnB1dCcsXG4gICAgICAgICd3cml0ZU91dHB1dCcsXG4gICAgICAgICd0cmFja1VzZXJBY3Rpdml0eScsXG4gICAgICAgICd6aXBIaXN0b3J5JyxcbiAgICBdKTtcbiAgICBmdW5jdGlvbiBnZXRfcmFuZG9tX2NsYXNzX25hbWUoKSB7XG4gICAgICAgIE1hdGgucmFuZG9tKCkgKiAoQ0xBU1NfTkFNRVMubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIENMQVNTX05BTUVTLnNoaWZ0KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldF9yYW5kb21fcGFyYW1ldGVyX25hbWUoKSB7XG4gICAgICAgIE1hdGgucmFuZG9tKCkgKiAoUEFSQU1FVEVSX05BTUVTLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBQQVJBTUVURVJfTkFNRVMuc2hpZnQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0X3JhbmRvbV9mdW5jdGlvbl9uYW1lKCkgeyByZXR1cm4gRlVOQ1RJT05fTkFNRVMuc2hpZnQoKTsgfVxuICAgIGxldCBjbGFzc2VzID0gbmV3IENsYXNzZXMoW10pO1xuICAgIHRyZWUucG9zdG9yZGVyKCh0KSA9PiB7XG4gICAgICAgIGlmICh0ID09PSB0cmVlKSB7XG4gICAgICAgICAgICB0LmNvbnRlbnQgPSBcIlRhcmdldFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdC5jb250ZW50ID0gZ2V0X3JhbmRvbV9jbGFzc19uYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNoaWxkX3R5cGVfbmFtZXMgPSB0LmNoaWxkcmVuLm1hcChjID0+IGMuY29udGVudCk7XG4gICAgICAgIGxldCBjaGlsZF9wYXJhbV9uYW1lcyA9IHQuY2hpbGRyZW4ubWFwKGMgPT4gZ2V0X3JhbmRvbV9wYXJhbWV0ZXJfbmFtZSgpKTtcbiAgICAgICAgLy8gbGV0IG1ldGhvZF9uYW1lID0gKCh0ID09PSB0cmVlKT8gZ2V0X3JhbmRvbV9mdW5jdGlvbl9uYW1lKCk6bnVsbCk7XG4gICAgICAgIGxldCBjbGFzc19kZWZpbml0aW9uID0gbmV3IENsYXNzX0RlZmluaXRpb24odC5jb250ZW50LCBjaGlsZF9wYXJhbV9uYW1lcywgY2hpbGRfdHlwZV9uYW1lcywgZ2V0X3JhbmRvbV9mdW5jdGlvbl9uYW1lKCkpO1xuICAgICAgICBjbGFzc2VzLmNsYXNzX2RlZmluaXRpb25zLnB1c2goY2xhc3NfZGVmaW5pdGlvbik7XG4gICAgfSk7XG4gICAgZm9yIChsZXQgaSA9IGNsYXNzZXMubnVtYmVyX29mX2NsYXNzZXMoKTsgaSA8IG51bWJlcl9vZl9jbGFzc2VzOyBpKyspIHtcbiAgICAgICAgbGV0IHJhbmRvbV9wYXJhbV9udW1iZXIgPSByYW5kb21faW50ZWdlcl91cF90b19leGNsdWRpbmcoMyk7XG4gICAgICAgIGxldCBjaGlsZF9wYXJhbV9uYW1lcyA9IFtdO1xuICAgICAgICBsZXQgY2hpbGRfcGFyYW1fdHlwZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCByYW5kb21fcGFyYW1fbnVtYmVyOyBjKyspIHtcbiAgICAgICAgICAgIGNoaWxkX3BhcmFtX25hbWVzLnB1c2goZ2V0X3JhbmRvbV9wYXJhbWV0ZXJfbmFtZSgpKTtcbiAgICAgICAgICAgIGNoaWxkX3BhcmFtX3R5cGVzLnB1c2gocmFuZG9tX2FycmF5X2VsZW1lbnQoY2xhc3Nlcy5jbGFzc19kZWZpbml0aW9ucykuY2xhc3NfbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNsYXNzX2RlZmluaXRpb24gPSBuZXcgQ2xhc3NfRGVmaW5pdGlvbihnZXRfcmFuZG9tX2NsYXNzX25hbWUoKSwgY2hpbGRfcGFyYW1fbmFtZXMsIGNoaWxkX3BhcmFtX3R5cGVzLCBnZXRfcmFuZG9tX2Z1bmN0aW9uX25hbWUoKSk7XG4gICAgICAgIGNsYXNzZXMuY2xhc3NfZGVmaW5pdGlvbnMucHVzaChjbGFzc19kZWZpbml0aW9uKTtcbiAgICB9XG4gICAgY2xhc3Nlcy5zb3J0X2NsYXNzX2RlZmluaXRpb25zKCk7XG4gICAgcmV0dXJuIGNsYXNzZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZV9jbGFzc2VzX2Zyb21fdHJlZS5qcy5tYXAiLCJpbXBvcnQgeyBUcmVhdG1lbnRzX0NvbWJpbmF0b3IgfSBmcm9tIFwiLi4vdHJlYXRtZW50cy9UcmVhdG1lbnRzX0NvbWJpbmF0b3IuanNcIjtcbmltcG9ydCB7IENvZGVfRXhwZXJpbWVudF9EZWZpbml0aW9uIH0gZnJvbSBcIi4uL0NvZGVfRXhwZXJpbWVudF9EZWZpbml0aW9uLmpzXCI7XG5pbXBvcnQgeyBUcmFpbmluZ19Db25maWd1cmF0aW9uIH0gZnJvbSBcIi4uL1RyYWluaW5nX0NvbmZpZ3VyYXRpb24uanNcIjtcbmltcG9ydCB7IEluZGVwZW5kZW50X1ZhcmlhYmxlcyB9IGZyb20gXCIuLi90cmVhdG1lbnRzL0luZGVwZW5kZW50X1ZhcmlhYmxlcy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9jb2RlX2V4cGVyaW1lbnRfZXhlY3V0aW9uKGNmZykge1xuICAgIGxldCB2YXJpYWJsZXMgPSBJbmRlcGVuZGVudF9WYXJpYWJsZXMuZnJvbV9sYXlvdXQoY2ZnLmxheW91dCk7XG4gICAgbGV0IGFsbF90cmVhdG1lbnRfY29tYmluYXRpb25zID0gbmV3IFRyZWF0bWVudHNfQ29tYmluYXRvcih2YXJpYWJsZXMsIGNmZy5yZXBldGl0aW9ucyk7XG4gICAgbGV0IGV4cGVyaW1lbnRfZGVmaW5pdGlvbiA9IG5ldyBDb2RlX0V4cGVyaW1lbnRfRGVmaW5pdGlvbihjZmcuZXhwZXJpbWVudF9uYW1lLCBmYWxzZSwgYWxsX3RyZWF0bWVudF9jb21iaW5hdGlvbnMsIHZhcmlhYmxlcywgY2ZnLnJlcGV0aXRpb25zLCBjZmcubWVhc3VyZW1lbnQsIGNmZy50YXNrX2NvbmZpZ3VyYXRpb24pO1xuICAgIGxldCB0cmFpbmluZ19jb25maWd1cmF0aW9uID0gbmV3IFRyYWluaW5nX0NvbmZpZ3VyYXRpb24oY2ZnLnRyYWluaW5nX2NvbmZpZ3VyYXRpb24pO1xuICAgIGxldCBleHBlcmltZW50X2V4ZWN1dGlvbiA9IGV4cGVyaW1lbnRfZGVmaW5pdGlvbi5jcmVhdGVfY29kZV9hbGxfZXhwZXJpbWVudF9hdXRvbWF0YXMoe1xuICAgICAgICBzZWVkOiBjZmcuc2VlZCxcbiAgICAgICAgaW50cm9kdWN0aW9uX3RleHRzOiBjZmcuaW50cm9kdWN0aW9uX3BhZ2VzLFxuICAgICAgICBwb3N0X3F1ZXN0aW9ubmFpcmU6IGNmZy5wb3N0X3F1ZXN0aW9ubmFpcmUsXG4gICAgICAgIHByZV9ydW5fdHJhaW5pbmdfb3V0cHV0OiBjZmcucHJlX3J1bl90cmFpbmluZ19vdXRwdXQsXG4gICAgICAgIHRyYWluaW5nX2NvbmZpZ3VyYXRpb246IHRyYWluaW5nX2NvbmZpZ3VyYXRpb24sXG4gICAgICAgIC8vIHBvc3RfcnVuX3RyYWluaW5nX291dHB1dDogY2ZnLnBvc3RfcnVuX3RyYWluaW5nX291dHB1dCxcbiAgICAgICAgcHJlX3J1bl9leHBlcmltZW50X291dHB1dDogY2ZnLnByZV9ydW5fZXhwZXJpbWVudF9vdXRwdXQsXG4gICAgICAgIC8vIHBvc3RfcnVuX2V4cGVyaW1lbnRfb3V0cHV0OiBjZmcucG9zdF9ydW5fZXhwZXJpbWVudF9vdXRwdXQsXG4gICAgICAgIGZpbmlzaF90ZXh0czogY2ZnLmZpbmlzaF9wYWdlcyxcbiAgICAgICAgbWVhc3VyZW1lbnQ6IGNmZy5tZWFzdXJlbWVudCxcbiAgICAgICAgZmluaXNoX2Z1bmN0aW9uOiBjZmcuZmluaXNoX2Z1bmN0aW9uXG4gICAgfSk7XG4gICAgcmV0dXJuIGV4cGVyaW1lbnRfZXhlY3V0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlX2NvZGVfZXhwZXJpbWVudF9leGVjdXRpb24uanMubWFwIl0sIm5hbWVzIjpbImNvbnRhaW5zIiwiY29sbGVjdGlvbiIsImVsZW1lbnQiLCJpbmRleE9mIiwiZ2xvYmFsIiwicG9vbCIsIm1hdGgiLCJub2RlY3J5cHRvIiwid2lkdGgiLCJybmduYW1lIiwic3RhcnRkZW5vbSIsInBvdyIsInNpZ25pZmljYW5jZSIsIm92ZXJmbG93IiwibWFzayIsInNlZWRyYW5kb20iLCJzZWVkIiwib3B0aW9ucyIsImNhbGxiYWNrIiwia2V5Iiwic2hvcnRzZWVkIiwibWl4a2V5IiwiZmxhdHRlbiIsImVudHJvcHkiLCJ0b3N0cmluZyIsInJlcXVpcmUiLCJvdXQiLCJjcnlwdG8iLCJyYW5kb21CeXRlIiwicmFuZG9tQnl0ZXMiLCJVaW50OEFycmF5IiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJlIiwiYnJvd3NlciIsIm5hdmlnYXRvciIsInBsdWdpbnMiLCJEYXRlIiwic2NyZWVuIiwiYXV0b3NlZWQiLCJhcmM0IiwiQVJDNCIsInBybmciLCJuIiwiZyIsImQiLCJ4IiwiaW50MzIiLCJxdWljayIsImRvdWJsZSIsIlMiLCJwYXNzIiwiaXNfbWF0aF9jYWxsIiwic3RhdGUiLCJjb3B5IiwidGhpcyIsInQiLCJrZXlsZW4iLCJsZW5ndGgiLCJtZSIsImkiLCJqIiwicyIsImNvdW50IiwiciIsImYiLCJzbGljZSIsIm9iaiIsImRlcHRoIiwicHJvcCIsInJlc3VsdCIsInR5cCIsInB1c2giLCJzbWVhciIsInN0cmluZ3NlZWQiLCJjaGFyQ29kZUF0IiwiYSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwicmFuZG9tIiwibW9kdWxlIiwiZXhwb3J0cyIsImV4IiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsIk1hdGgiLCJBdXRvbWF0YV9Gb3J3YXJkZXIiLCJjb25zdHJ1Y3RvciIsImZvcndhcmRlcl9uYW1lIiwic2V0X2FjdGl2ZV9mdW5jdGlvbiIsImlucHV0IiwiYXV0b21hdGEiLCJhZGRfYWN0aXZhdGlvbl9mdW5jdGlvbiIsInRvX2FkZCIsInNldF9hY3RpdmUiLCJBdXRvbWF0YSIsImNvbmZpZyIsImN1cnJlbnRfc3RhdGUiLCJ0cmFuc2l0aW9ucyIsInN0YXRlcyIsInN0YXJ0X3N0YXRlIiwic3RhcnQiLCJmcm9tIiwiaW5pdF9mdW5jdGlvbiIsImVuZF9zdGF0ZXMiLCJtYXRjaGluZ190cmFuc2l0aW9uIiwiZmlyc3RfbWF0Y2giLCJzdGF0ZV9iZWZvcmUiLCJuZXh0X3N0YXRlIiwiYWN0aW9uIiwiYWNjZXB0cyIsImluaXRpYWxpemUiLCJhZGRfZmluaXNoX2FjdGlvbiIsInRyYW5zaXRpb24iLCJpc190cmFuc2l0aW9uX3RvX2VuZCIsImZvcm1lcl9hY3Rpb24iLCJuZXh0IiwiYWRkX2FjdGlvbl90b190cmFuc2l0aW9ucyIsImlzX3RhcmdldF90cmFuc2l0aW9uIiwiQXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyIiwibWVhc3VyZW1lbnQiLCJwcmVfcnVuX2luc3RydWN0aW9ucyIsInBvc3RfcnVuX2luc3RydWN0aW9ucyIsInN1cGVyIiwiY3JlYXRlX2F1dG9tYXRhIiwic2hvd19pbnRybyIsImF1dG9tYXRhX2NvbmZpZ3VyYXRvciIsIm91dHB1dF93cml0ZXIiLCJjbGVhcl9hbGwiLCJwcmludF9zdHJpbmdfdG9fc3RhdGUiLCJlbXB0eV9zY3JlZW5fYW5kX3Nob3dfaW5zdHJ1Y3Rpb25zIiwiY29tbWFuZCIsImNsZWFyX3N0YXRlIiwiY2xlYXJfc3RhZ2UiLCJ1bmRlZmluZWQiLCJjb25zb2xlIiwibG9nIiwiQXV0b21hdGFfQ29uZmlndXJhdG9yIiwiVHJhbnNpdGlvbl9BY2NlcHRvciIsIlRyYW5zaXRpb25fQWNjZXB0b3JfRnVuY3Rpb24iLCJhY2NlcHRvcl9mdW5jdGlvbiIsIlRyYW5zaXRpb24iLCJhY2NlcHRvciIsImlzX3ZhbGlkX2lucHV0IiwiU2ltcGxlX1RyYW5zaXRpb24iLCJhY2NlcHRfaW5wdXRfZnVuY3Rpb24iLCJ0byIsIm9uIiwiaWYiLCJjaGVjayIsImRvIiwib25fYW55Iiwia2V5cyIsIlF1ZXN0aW9uIiwidmFyaWFibGVfbmFtZSIsInF1ZXN0aW9uX3RleHQiLCJhbnN3ZXIiLCJzdG9yZV9hbnN3ZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidmFsdWUiLCJBbHRlcm5hdGl2ZXMiLCJhbHRlcm5hdGl2ZXMiLCJpbnB1dF9odG1sIiwiaHRtbF9zdHJpbmciLCJpbmRleCIsImZvckVhY2giLCJRdWVzdGlvbm5haXJlX0ZvcndhcmRlciIsInF1ZXN0aW9ucyIsInByaW50X2h0bWxfb25fc3RhZ2UiLCJjdXJyZW50X3F1ZXN0aW9uX251bWJlciIsImFkZF9yZXN1bHRfdG9fcXVlc3Rpb24iLCJjcmVhdGVfcXVlc3Rpb25uYWlyZV9odG1sX3N0cmluZyIsIm9uY2xpY2siLCJzaG93X291dHJvIiwicSIsInF1ZXN0aW9uIiwiVkFSSUFCTEVfVFlQRSIsInRleHRfaW5wdXRfZXhwZXJpbWVudCIsIkZyZWVfVGV4dF9Vc2VyX0lucHV0X0V4cGVyaW1lbnQiLCJ2YXJfbmFtZSIsIkV4cGVyaW1lbnRfT3V0cHV0X1dyaXRlciIsImNvbnZlcnRfc3RyaW5nX3RvX2h0bWxfc3RyaW5nIiwicmVwbGFjZSIsInN0cmluZ19wYWdlX2NvbW1hbmQiLCJwcmludF9zdHJpbmdfb25fc3RhZ2UiLCJzdGFnZV9zdHJpbmdfcGFnZXNfY29tbWFuZHMiLCJwYWdlcyIsInJldCIsImdldF9naXZlbl9hbnN3ZXIiLCJwcmludF9vbl9pbnB1dF9yZXNwb25zZSIsImdpdmVuX2Fuc3dlciIsInNldF9mb2N1c19vbl9pbnB1dCIsIk1lYXN1cmVtZW50X1R5cGUiLCJpbnB1dF90eXBlIiwiYWNjZXB0ZWRfcmVzcG9uc2VzIiwic3RhcnRfbWVhc3VyZW1lbnQiLCJ0YXNrIiwic3RhcnRfdGltZSIsImdldFRpbWUiLCJ2YWx1ZU9mIiwicHJpbnRfdGFzayIsInN0b3BfbWVhc3VyZW1lbnQiLCJlbmRfdGltZSIsInJlcXVpcmVkX21pbGxpc2Vjb25kcyIsImRvX3ByaW50X2FmdGVyX3Rhc2tfaW5mb3JtYXRpb24iLCJpbmNvcnJlY3RfcmVzcG9uc2UiLCJleHBlcmltZW50X2RlZmluaXRpb24iLCJpbnZhbGlkX2Fuc3dlcnMiLCJkb19wcmludF9lcnJvcl9tZXNzYWdlIiwiZGVtYW5kc19wZW5hbHR5IiwicGVuYWx0eV9pc19vdmVyIiwiVGltZV9Ub19GaW5pc2hfTWVhc3VyZW1lbnQiLCJFeHBlcmltZW50X0lucHV0X1R5cGUiLCJwcmludF9pbnB1dF9yZXF1ZXN0IiwiYXNrX2Zvcl9pbnB1dCIsImlucHV0X3N0cmluZyIsImtleV9wcmVzc2VkIiwiUmFuZG9tIiwibmV3X3JhbmRvbV9pbnRlZ2VyIiwidXBwZXJfbGltaXQiLCJ0cnVuYyIsInNldF9zZWVkIiwiU0VUX1NFRUQiLCJyYW5kb21faW50ZWdlcl91cF90b19leGNsdWRpbmciLCJkb19yYW5kb21fYXJyYXlfc29ydCIsImFycmF5Iiwic3BsaWNlIiwicmFuZG9tX2FycmF5X2VsZW1lbnQiLCJUYXNrIiwidGMiLCJ0ZXh0IiwiZXhwZWN0ZWRfYW5zd2VyIiwidGFza19udW1iZXJfaW5fZXhlY3V0aW9uIiwiaXNfdHJhaW5pbmciLCJkb19wcmludF90YXNrIiwiRXJyb3IiLCJhY2NlcHRzX2Fuc3dlcl9mdW5jdGlvbiIsInRyZWF0bWVudF9jb21iaW5hdGlvbiIsImFjY2VwdHNfYW5zd2VyIiwibmV4dF90YXNrIiwidGFza3MiLCJodG1sX3N0cmluZ193aXRoX2NtZCIsImNtZCIsImh0bWxfbm9kZV93aXRoX2NtZCIsImFmdGVyX3Rhc2tfc3RyaW5nX2NvbnN0cnVjdG9yIiwiYV9zdHJpbmdfY29uc3RydWN0b3IiLCJ0cmVhdG1lbnRfdmFsdWUiLCJ0cmVhdG1lbnRfbmFtZSIsInRyZWF0bWVudCIsInZhcmlhYmxlIiwibmFtZSIsIlRyZWF0bWVudHNfQ29tYmluYXRvciIsInZhcmlhYmxlcyIsInJlcGV0aXRpb25zIiwiY2xvbmUiLCJjcmVhdGVfdHJlYXRtZW50X2NvbWJpbmF0aW9ucyIsInRyZWF0bWVudF9jb21iaW5hdGlvbnMiLCJjb25jYXQiLCJjcmVhdGVfdGFza3MiLCJleHBlcmltZW50X2RlZmluaXRpb25fdGFza19jcmVhdG9yIiwiZ2V0X3ZhcmlhYmxlX25hbWVkIiwiRXhwZXJpbWVudF9EZWZpbml0aW9uIiwiZXhwZXJpbWVudF9uYW1lIiwidHJlYXRtZW50c19jb21iaW5hdG9yIiwidGFza19jcmVhdG9yIiwicXVlc3Rpb25uYWlyZXMiLCJ0ZW1wbGF0ZSIsImluaXRfZXhwZXJpbWVudCIsImFsbF9pbmRlcGVuZGVudF92YXJpYWJsZXMiLCJpbmRlcGVuZGVudF92YXJpYWJsZXMiLCJnZW5lcmF0ZV9jc3ZfZGF0YSIsInF1ZXN0aW9ubmFpcmUiLCJwcmludF90b19hcnJheSIsIkJvb2tfRm9yd2FyZGVyIiwiYm9va19uYW1lIiwiY3VycmVudF9wYWdlX251bWJlciIsInNldF9wYWdlX2luZGV4IiwicHJpbnRfc3RyaW5nX3RvX3BhZ2VfbnVtYmVyIiwibmF2aWdhdGlvbl9zdHJpbmciLCJTZXF1ZW50aWFsX0ZvcndhcmRlcl9Gb3J3YXJkZXIiLCJmb3J3YXJkZXJzIiwiY3VycmVudF9mb3J3YXJkZXJfaW5kZXgiLCJmb3J3YXJkZXIiLCJjdXJyZW50X2ZvcndhcmRlciIsImlucHV0X3NlcXVlbmNlIiwiRXhwZXJpbWVudGF0aW9uX0ZvcndhcmRlciIsInByaW50X2V4cGVyaW1lbnRfbmFtZSIsImN1cnJlbnRfdGFzayIsImN1cnJlbnRfcGFnZV9pbmRleCIsImV4cGVyaW1lbnRfYXV0b21hdGFfbmFtZSIsImF1dG9tYXRhX2NvbmZpZ3VyYXRpb24iLCJzZXRfZXhwZXJpbWVudF9pbmRleCIsImluY19jdXJyZW50X2V4cGVyaW1lbnQiLCJUcmFpbmluZ19FeGVjdXRpb25fRm9yd2FyZGVyIiwidHJhaW5pbmdfY29uZmlndXJhdGlvbiIsImNhbl9iZV9yZXBlYXRlZCIsInByaW50X2NhbmNlbF90ZXh0IiwiZXhwZXJpbWVudF90cmFuc2l0aW9ucyIsInRoaXNfdHJhbnNpdGlvbnMiLCJjYW5fYmVfY2FuY2VsbGVkIiwiaW5jbHVkZXMiLCJFeHBlcmltZW50X0ZvcndhcmRlciIsIkNvZGVfRXhwZXJpbWVudF9EZWZpbml0aW9uIiwiY3JlYXRlX2NvZGVfYWxsX2V4cGVyaW1lbnRfYXV0b21hdGFzIiwiY2ZnIiwiaW50cm9kdWN0aW9uX2Jvb2siLCJpbnRyb2R1Y3Rpb25fdGV4dHMiLCJlbmRpbmdfYm9vayIsImZpbmlzaF90ZXh0cyIsImZpbmlzaF9mdW5jdGlvbiIsImV4cGVyaW1lbnRfZXhlY3V0aW9uX2ZvcndhcmRlciIsInByZV9ydW5fZXhwZXJpbWVudF9vdXRwdXQiLCJjbG9uZWRfZXhwZXJpbWVudF9kZWZpbml0aW9uIiwidHJhaW5pbmdfZm9yd2FyZGVyIiwicHJlX3J1bl90cmFpbmluZ19vdXRwdXQiLCJwb3N0X3F1ZXN0aW9ubmFpcmUiLCJUcmVhdG1lbnQiLCJsb29wX2JvdGgiLCJhMSIsImEyIiwiY291bnRlciIsIlRyZWF0bWVudF9Db21iaW5hdGlvbiIsIlRyYWluaW5nX0NvbmZpZ3VyYXRpb24iLCJmaXhlZF90cmVhdG1lbnRzIiwiYV90cmVhdG1lbnRfY29tYmluYXRpb24iLCJJbmRlcGVuZGVudF9WYXJpYWJsZSIsInRyZWF0bWVudHMiLCJhU3RyaW5nIiwiYWxsX2FycmF5X2NvbWJpbmF0aW9uc19pbnRlcm5hbCIsImFyciIsImNvbWJpbmF0aW9uIiwibGFzdCIsInNoaWZ0IiwicG9wIiwidW5zaGlmdCIsIkluZGVwZW5kZW50X1ZhcmlhYmxlcyIsInB1c2hfdmFyaWFibGUiLCJtYXAiLCJ2IiwiZnJvbV9sYXlvdXQiLCJsYXlvdXQiLCJhVmFyIiwiQnJvd3Nlcl9PdXRwdXRfV3JpdGVyIiwiZ2V0X2h0bWxfZWxlbWVudF9ieV9pZCIsImlubmVySFRNTCIsImNsZWFyX2Vycm9yIiwiZWxlbWVudF9pZCIsInBhcmVudCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsInByaW50X2Vycm9yX3N0cmluZ19vbl9zdGFnZSIsInAiLCJjcmVhdGVFbGVtZW50IiwibCIsInNldEF0dHJpYnV0ZSIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJpZCIsImZvY3VzIiwiY3JlYXRlX2h0bWxfZWxlbWVudF9mcm9tX3N0cmluZyIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImJvZHkiLCJwcmludF9odG1sX29uX2Vycm9yIiwicGFydGl0aW9ucyIsInBhcnQiLCJyb3ciLCJpc190cnVlIiwiZXhwIiwiZGVidWciLCJlcnJvciIsInBhcnRpdGlvbiIsInRlc3RfaW50ZWdlcl9wYXJ0aXRpb25fZnVuY3Rpb24iLCJUcmVlIiwiY29udGVudCIsImNoaWxkcmVuIiwiY2hpbGRfY2xvbmVzIiwiY2hpbGQiLCJwcmVvcmRlciIsInBvc3RvcmRlciIsImRpc3RhbmNlX1NIMDEiLCJzb3VyY2UiLCJ0YXJnZXQiLCJsZWZ0X2Rpc3RhbmNlX1NIMDEiLCJyaWdodF9kaXN0YW5jZV9TSDAxIiwic291cmNlX2NoaWxkIiwidGFyZ2V0X2NoaWxkIiwiZGlzdGFuY2UiLCJjIiwiY29udGFpbnNfbm9kZSIsImlubmVyX25vZGVzIiwibnVtYmVyX29mX25vZGVzIiwibm9kZSIsInJlbGV2YW50X2NoaWxkIiwicmlnaHRfZGlzdGFuY2UiLCJyaWdodF90cmVlcyIsImxlZnRfZGlzdGFuY2UiLCJyZWxldmFudF9jaGlsZF9pbmRleCIsImxlZnRfdHJlZXMiLCJwYXRoX2xlbmd0aF9mcm9tX3RoaXMiLCJudW1iZXIiLCJnZW5lcmF0ZV9mbGF0X3RyZWVzIiwibnVtYmVyX29mX2NoaWxkcmVuIiwicmVwZWF0IiwidHJlZSIsInRlc3RfZGlzdGFuY2VfU0gwMSIsIkNsYXNzX0RlZmluaXRpb24iLCJjbGFzc19uYW1lIiwicGFyYW1ldGVyX25hbWVzIiwidHlwZV9uYW1lcyIsIm1ldGhvZF9uYW1lIiwicGFyYW1ldGVyX29yZGVyaW5nIiwicGFyYW1ldGVyX3R5cGVfbmFtZXMiLCJ0eXBlX3NpZ25hdHVyZV9zdHJpbmciLCJqb2luIiwicHJpbnRfaHRtbF9pbnRvX2FycmF5IiwiY2xhc3NlcyIsInR5cGVkIiwib3B0aW9uYWxfbGluZV9icmVhayIsImNvbnN0cnVjdG9yX3BhcmFtcyIsInBhcmFtX2NvdW50ZXIiLCJwYXJhbSIsImNsYXp6IiwiZ2V0X2NsYXNzX25hbWVkIiwiQ2xhc3NlcyIsImNsYXNzX2RlZmluaXRpb25zIiwidHlwZV9jaGVjayIsImNvbnN0cnVjdG9yX2NhbGwiLCJ0aGlzX2NsYXNzIiwic3RhdGljX3R5cGVzX2luX2NhbGwiLCJwX3R5cGUiLCJwYXJhbWV0ZXJzIiwicG9zaXRpb24iLCJleGVjdXRlIiwiZHluYW1pY190eXBlc19pbl9jYWxsIiwicGFyYW1fdHlwZSIsImdldF9jbGFzc2VzX25hbWVkIiwibmFtZXMiLCJudW1iZXJfb2ZfY2xhc3NlcyIsImh0bWxfdGFibGVfc3RyaW5nIiwibnVtX2NvbHVtbnMiLCJ3aXRoX3R5cGVzIiwiY29sdW1uIiwic29ydF9jbGFzc19kZWZpbml0aW9ucyIsInN0cmVhbSIsInNvcnQiLCJjMSIsImMyIiwiTm91bnMiLCJ3b3JkcyIsIkNvbnN0cnVjdG9yX0NhbGwiLCJjbGFzc05hbWUiLCJjYWxsX3N0cmluZyIsImVxdWFscyIsImNvbnN0cnVjdG9yQ2FsbCIsInJlYWRfY29uc3RydWN0b3JfY2FsbF9saXN0IiwidGhpc190b2tlbiIsIm5leHRfY29uc3RydWN0b3JfY2FsbCIsInJlYWRfY29uc3RydWN0b3JfY2FsbCIsInJlc3RfcGFyYW1zIiwiaWRlbnRpZmllciIsInN0cmluZ19hcnJheSIsInJlYWRfaWRlbnRpZmllciIsInRva2VuIiwicmVhZF9zaW5nbGVfY2FsbCIsInNwbGl0IiwiYXNfY29uc3RydWN0b3JfY2FsbCIsIlRSRUVTIiwiYnJvd3Nlcl9vdXRwdXQiLCJpbnRyb2R1Y3Rpb25fcGFnZXMiLCJ3cml0ZXIiLCJwcmVfcnVuX3RyYWluaW5nX2luc3RydWN0aW9ucyIsInByZV9ydW5fZXhwZXJpbWVudF9pbnN0cnVjdGlvbnMiLCJmaW5pc2hfcGFnZXMiLCJ0YXNrX2NvbmZpZ3VyYXRpb24iLCJ0aGlzX3RyZWUiLCJ0aGlzX2NsYXNzZXMiLCJDTEFTU19OQU1FUyIsIlBBUkFNRVRFUl9OQU1FUyIsIkZVTkNUSU9OX05BTUVTIiwiZ2V0X3JhbmRvbV9jbGFzc19uYW1lIiwiZ2V0X3JhbmRvbV9wYXJhbWV0ZXJfbmFtZSIsImdldF9yYW5kb21fZnVuY3Rpb25fbmFtZSIsImNoaWxkX3R5cGVfbmFtZXMiLCJjaGlsZF9wYXJhbV9uYW1lcyIsImNsYXNzX2RlZmluaXRpb24iLCJyYW5kb21fcGFyYW1fbnVtYmVyIiwiY2hpbGRfcGFyYW1fdHlwZXMiLCJnZW5lcmF0ZV9jbGFzc2VzX2Zyb21fdHJlZSIsImVycm9yX3N0cmluZyIsImdpdmVuX2NhbGwiLCJ0aGlzX21lYXN1cmVtZW50IiwiZXhwZXJpbWVudF9hdXRvbWF0YSIsImFsbF90cmVhdG1lbnRfY29tYmluYXRpb25zIiwiY3JlYXRlX2NvZGVfZXhwZXJpbWVudF9leGVjdXRpb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwia2V5X2ZvcndhcmRlciIsImZpbGVuYW1lIiwiZGF0YSIsImJsb2IiLCJCbG9iIiwidHlwZSIsImVsZW0iLCJ3aW5kb3ciLCJocmVmIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZG93bmxvYWQiLCJjbGljayIsInNhdmVfZmlsZV9pbl9odG1sIiwia2V5X3N0cmluZyIsInBvc3RmaXgiLCJldmVudCIsImN0cmxLZXkiLCJhbHRLZXkiLCJhZGRFdmVudExpc3RlbmVyIiwiQlJPV1NFUl9FWFBFUklNRU5UIl0sInNvdXJjZVJvb3QiOiIifQ==