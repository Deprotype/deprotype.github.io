(()=>{"use strict";function e(e,t){return-1!=e.indexOf(t)}!function(e,t,n){var s,r=256,i="random",a=n.pow(r,6),o=n.pow(2,52),p=2*o,l=r-1;function c(l,c,m){var f=[],g=h(_((c=1==c?{entropy:!0}:c||{}).entropy?[l,d(t)]:null==l?function(){try{s=require("crypto");var n=crypto.randomByte;return s&&(n=s.randomBytes)?n=n(r):(n=new Uint8Array(r),(e.crypto||e.msCrypto).getRandomValues(n)),d(n)}catch(n){var i=e.navigator,a=i&&i.plugins;return[+new Date,e,a,e.screen,d(t)]}}():l,3),f),w=new u(f),y=function(){for(var e=w.g(6),t=a,n=0;e<o;)e=(e+n)*r,t*=r,n=w.g(1);for(;e>=p;)e/=2,t/=2,n>>>=1;return(e+n)/t};return y.int32=function(){return 0|w.g(4)},y.quick=function(){return w.g(4)/4294967296},y.double=y,h(d(w.S),t),(c.pass||m||function(e,t,s,r){return r&&(r.S&&b(r,w),e.state=function(){return b(w,{})}),s?(n[i]=e,t):e})(y,g,"global"in c?c.global:this==n,c.state)}function u(e){var t,n=e.length,s=this,i=0,a=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);i<r;)o[i]=i++;for(i=0;i<r;i++)o[i]=o[a=l&a+e[i%n]+(t=o[i])],o[a]=t;(s.g=function(e){for(var t,n=0,i=s.i,a=s.j,o=s.S;e--;)t=o[i=l&i+1],n=n*r+o[l&(o[i]=o[a=l&a+t])+(o[a]=t)];return s.i=i,s.j=a,n})(r)}function b(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function _(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(_(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function h(e,t){for(var n,s=e+"",r=0;r<s.length;)t[l&r]=l&(n^=19*t[l&r])+s.charCodeAt(r++);return d(t)}function d(e){return String.fromCharCode.apply(0,e)}if(h(n.random(),t),"object"==typeof module&&module.exports){module.exports=c;try{s=require("crypto")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return c})):n["seed"+i]=c}("undefined"!=typeof self?self:void 0,[],Math);class t{constructor(e){this.set_active_function=()=>{},this.forwarder_name=e}input(e){this.automata.input(e)}add_activation_function(e){}set_active(){}}class n{constructor(e){this.current_state=-1,this.transitions=[],this.states=[],this.start_state=e.start,this.states=e.states;for(let e=0;e<this.states.length;e++)this.transitions.push([]);for(let t of e.transitions)this.transitions[t.from].push(t);this.init_function=e.init_function,this.end_states=e.end_states}input(e){let t=this.first_match(e),n=this.current_state;null!=t&&(this.current_state=t.next_state,t.action(n,e,this.current_state))}start(){this.current_state=this.start_state}first_match(e){for(let t=0;t<this.transitions[this.current_state].length;t++)if(this.transitions[this.current_state][t].accepts(e))return this.transitions[this.current_state][t];return null}initialize(){this.current_state=this.start_state,this.init_function()}add_finish_action(e){for(let t of this.transitions)for(let n of t)if(this.is_transition_to_end(n)){let t=n.action;n.action=(n,s,r)=>{t(n,s,r),e()}}}is_transition_to_end(t){return e(this.end_states,t.next_state)}add_action_to_transitions(e,t){for(let n of this.transitions)for(let s of n)if(e(s)){let e=s.action;s.action=(n,s,r)=>{e(n,s,r),t()}}}}class s extends t{constructor(e,t,n,s){super(e),this.pre_run_instructions=n,this.post_run_instructions=s,this.measurement=t,this.automata=this.create_automata(),this.automata.initialize()}set_active(){this.show_intro()}create_automata(){return new n(this.automata_configurator())}output_writer(){return this.measurement.output_writer()}show_intro(){this.output_writer().clear_all(),this.output_writer().print_string_to_state(this.forwarder_name),this.pre_run_instructions()}empty_screen_and_show_instructions(e){this.output_writer().clear_state(),this.output_writer().clear_stage(),null==e||null==e?console.log("something is strange"):e()}}class r{constructor(e,t,n,s,r){this.states=e,this.start=t,this.init_function=n,this.transitions=s,this.end_states=r}}class i{}class a extends i{constructor(e){super(),this.acceptor_function=e}accepts(e){return this.acceptor_function(e)}}class o{constructor(e,t,n,s){this.from=e,this.acceptor=t,this.next_state=n,this.action=s}is_valid_input(e){return this.acceptor.accepts(e)}accepts(e){return this.acceptor.accepts(e)}}function p(e,t,n,s){return new o(e,new a(t),n,((e,t,n)=>s(t)))}function l(t){return{to:n=>({on:e=>({if:s=>({do:r=>p(t,(t=>t==e&&s(t)),n,r)}),do:s=>p(t,(t=>t==e),n,s)}),on_any:s=>({if:r=>({do:i=>p(t,(t=>e(s,t)&&r(t)),n,i)}),do:r=>p(t,(t=>e(s,t)),n,r)})})}}class c extends s{constructor(e,t){super("Questionnaire",t,(()=>t.output_writer().print_html_on_stage("Please, answer the following questions.<br>")),(()=>t.output_writer().print_html_on_stage("Thank you for answering the questions."))),this.current_question_number=-1,this.questions=e}automata_configurator(){return new r([0,1,2,3,4],0,(()=>{}),this.transitions(),[4])}transitions(){return[l(0).to(4).on("DONE").if((e=>!0)).do((e=>{this.add_result_to_question(),console.log("dummy")}))]}show_intro(){super.show_intro();let e=this.create_questionnaire_html_string();this.output_writer().print_html_on_stage(e),document.getElementById("DONE").onclick=()=>this.input("DONE")}show_outro(){}create_questionnaire_html_string(){let e="<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>";return this.questions.forEach((t=>e+="<tr><td>"+t.question_text+"</td><td>"+t.input_html()+"</td></tr>")),e+="</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>",e}add_result_to_question(){for(let e of this.questions)e.store_answer()}}var u;function b(e){return new f(e)}!function(e){e[e.STRING=1]="STRING",e[e.NUMBER=2]="NUMBER"}(u||(u={}));class _{convert_string_to_html_string(e){return function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/\n/g,"<br/>").replace(/ /g,"&nbsp;")}(e)}string_page_command(e){return()=>this.print_string_on_stage(e)}stage_string_pages_commands(e){let t=[];for(let n of e)t.push(this.string_page_command(n));return t}get_given_answer(e){return e}print_on_input_response(e){}set_focus_on_input(){}clear_all(){this.clear_state(),this.clear_stage()}}class h{constructor(e){this.input_type=e}accepted_responses(){return this.input_type.accepted_responses()}given_answer(e){return this.input_type.given_answer(e)}start_measurement(e){this.start_time=(new Date).getTime().valueOf(),e.print_task()}stop_measurement(e,t){let n=(new Date).getTime().valueOf();t.given_answer=this.input_type.get_given_answer(e),t.required_milliseconds=n-this.start_time,t.do_print_after_task_information()}incorrect_response(e,t){let n=(new Date).getTime().valueOf(),s=t.experiment_definition.measurement.get_given_answer(e);t.invalid_answers.push([s,n-this.start_time]),t.do_print_error_message(this.input_type.get_given_answer(e))}output_writer(){return this.input_type.output_writer}get_given_answer(e){return this.input_type.get_given_answer(e)}demands_penalty(){return!1}penalty_is_over(){return!0}}class d extends h{constructor(e){super(e)}}class m{constructor(e){this.output_writer=e}print_input_request(){this.output_writer.ask_for_input()}get_given_answer(e){return this.output_writer.get_given_answer(e)}}class f extends m{constructor(e){super(e)}accepted_responses(){return["Enter"]}given_answer(e){}print_input_request(){this.output_writer.ask_for_input()}}const g=new class{constructor(){Math.seedrandom("1234567890")}new_random_integer(e){return Math.trunc(e*Math.random())}set_seed(e){Math.seedrandom(e)}};function w(e){g.set_seed(e)}function y(e){return g.new_random_integer(e)}function k(e){let t=[...e],n=[];for(;t.length>0;)n.push(t.splice(y(t.length),1)[0]);return n}function v(e){return e[y(e.length)]}class x{constructor(e,t,n){this.expected_answer="",this.given_answer="",this.required_milliseconds=null,this.task_number_in_execution=-1,this.invalid_answers=[],this.is_training=!1,this.do_print_task=()=>{throw new Error("Method not implemented.")},this.do_print_error_message=()=>{throw new Error("Method not implemented.")},this.accepts_answer_function=e=>!0,this.do_print_after_task_information=()=>{throw new Error("Method not implemented.")},this.treatment_combination=e,this.experiment_definition=t}accepts_answer(e){let t=this.experiment_definition.measurement.get_given_answer(e);return this.accepts_answer_function(t)}next_task(){return this.task_number_in_execution<this.experiment_definition.tasks.length?this.experiment_definition.tasks[this.task_number_in_execution]:null}html_string_with_cmd(e,t){}html_node_with_cmd(e,t){}after_task_string_constructor(e){}print_task(){this.do_print_task(),this.print_input_request()}print_input_request(){this.experiment_definition.measurement.input_type.print_input_request()}treatment_value(e){for(let t of this.treatment_combination.treatment_combination)if(t.variable.name===e)return t.value;throw"Unknown treatment: "+e}}class E{constructor(e,t){this.variables=e,this.repetitions=t}clone(){return new E(this.variables,this.repetitions)}create_treatment_combinations(){let e=[];for(let t=0;t<this.repetitions;t++)e=e.concat(this.variables.create_treatment_combinations());return e}create_tasks(e){let t=[];for(let n of this.create_treatment_combinations()){let s=new x(n.clone(),e,"");e.experiment_definition_task_creator(s),s.is_training=e.is_training,t.push(s)}return k(t),t}get_variable_named(e){return this.variables.get_variable_named(e)}}class q{constructor(e,t,n,s,r,i,a){this.questionnaires=[],this.tasks=[],this.experiment_name=e,this.is_training=t,this.template={experiment_name:e,variables:s,repetitions:r,task_creator:a},this.treatments_combinator=n,this.variables=s,this.measurement=i,this.experiment_definition_task_creator=a}init_experiment(e){this.tasks=this.treatments_combinator.create_tasks(this)}all_independent_variables(){return this.variables.independent_variables}generate_csv_data(){let e=[];for(let t of this.questionnaires)for(let n of t.questions)e.push('"'+n.variable_name+'";');this.variables.print_to_array(e),e.push("number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\n");for(let t of this.tasks){for(let t of this.questionnaires)for(let n of t.questions)e.push('"'+n.answer+'";');for(let n of t.treatment_combination.treatment_combination)e.push(n.value+";");e.push(t.invalid_answers.length+1+";"),e.push(t.expected_answer+";"),e.push(t.given_answer+";"),e.push((t.given_answer==t.expected_answer)+";"),e.push(t.required_milliseconds+";"),t.invalid_answers.forEach((t=>e.push(t[0]+";"+t[1]+";"))),e.push("\n")}return e}}class S extends s{constructor(e,t,n){super(e,n,t[0],t[t.length-1]),this.current_page_number=-1,this.pages=t,this.create_automata()}set_page_index(e){this.current_page_number=e,this.empty_screen_and_show_instructions(this.pages[this.current_page_number]),this.output_writer().print_string_to_state(this.forwarder_name),this.output_writer().print_string_to_page_number("Page "+(this.current_page_number+1)+" / "+this.pages.length);let t="<hr>";e>0&&(t+="[&#8592] = previous page"),e<this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[&#8594] = next page"),e==this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[Enter] = Finish"),this.output_writer().print_html_on_stage(t)}set_active(){super.set_active()}show_intro(){this.set_page_index(0)}show_outro(){}automata_configurator(){return new r([0,1],0,(()=>{}),this.transitions(),[1])}transitions(){return[l(0).to(0).on("ArrowRight").if((e=>this.current_page_number<this.pages.length-1)).do((e=>{this.set_page_index(++this.current_page_number)})),l(0).to(0).on("ArrowLeft").if((e=>this.current_page_number>0)).do((e=>{this.set_page_index(--this.current_page_number)})),l(0).to(1).on("Enter").if((e=>this.current_page_number>=this.pages.length-1)).do((e=>{}))]}}class T extends t{constructor(e){super("Default Sequential Forwarder Forwader"),this.current_forwarder_index=0,this.forwarders=e;for(let t of e)t.automata.add_finish_action((()=>this.automata.input("switch to next state")));var t,s,i;this.automata=(t=[0,1],s=()=>{},i=[l(0).to(0).on("switch to next state").if((()=>this.current_forwarder_index<this.forwarders.length-1)).do((()=>{this.current_forwarder_index++,this.current_forwarder().set_active()})),l(0).to(1).on("switch to next state").if((()=>this.current_forwarder_index==this.forwarders.length-1)).do((()=>{}))],new n(new r(t,0,s,i,[1]))),this.automata.initialize()}input(e){this.forwarders[this.current_forwarder_index].input(e)}input_sequence(e){for(let t of e)this.input(t)}current_forwarder(){return this.forwarders[this.current_forwarder_index]}set_active(){super.set_active(),this.current_forwarder().set_active()}}class C extends s{show_intro(){this.empty_screen_and_show_instructions(this.pre_run_instructions),this.output_writer().print_experiment_name(this.forwarder_name)}show_outro(){this.empty_screen_and_show_instructions(this.post_run_instructions)}automata_configurator(){return new r([0,1,3,4,5],0,(()=>{}),this.transitions(),[5])}current_task(){return this.experiment_definition.tasks[this.current_page_index]}constructor(e,t,n,s,r){super(e,r,t,n),this.current_page_index=-1,this.experiment_definition=s}automata_configuration(){return new r([0,1,3,4,5],0,(()=>{}),this.transitions(),[5])}transitions(){return[l(0).to(1).on("Enter").do((e=>{console.log("Dummy Exp: Enter On Exp"),this.set_experiment_index(0),this.measurement.start_measurement(this.current_task())})),l(0).to(4).on("Delete").do((e=>{console.log("Dummy Exp: Delete On Exp"),this.show_outro()})),l(1).to(4).on("?+Control").if((e=>!0)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),l(1).to(3).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index<this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task())})),l(1).to(1).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&!this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),l(1).to(2).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),l(2).to(1).on("Enter").if((e=>this.measurement.penalty_is_over())).do((e=>{this.measurement.start_measurement(this.current_task())})),l(3).to(1).on("Enter").if((e=>this.current_page_index<this.experiment_definition.tasks.length-1)).do((e=>{this.inc_current_experiment(),this.measurement.start_measurement(this.current_task())})),l(1).to(4).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index==this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),l(4).to(5).on("Enter").do((e=>{}))]}set_experiment_index(e){this.current_page_index=e,this.output_writer().print_string_to_page_number("Task "+(this.current_page_index+1)+" / "+this.experiment_definition.tasks.length)}inc_current_experiment(){this.set_experiment_index(++this.current_page_index)}init_experiment(){this.experiment_definition.init_experiment(!1)}}class A extends C{constructor(e,t,n,s){super("Training",(()=>{e(),s.output_writer().print_html_on_stage("<hr>Press [Enter] to start training.")}),(()=>{s.output_writer().print_html_on_stage("You finished the training phase.<hr>"+(t.can_be_repeated?"Please, press [Enter] to run again a training session.<br>":"")+"Please, press [E] (capital E!) to enter the experiment phase.")}),n,s),this.training_configuration=t}print_cancel_text(){this.output_writer().clear_stage(),this.output_writer().print_string_to_page_number("Cancelled"),this.output_writer().print_html_on_stage("You cancelled this training session.<hr>Press [Enter] if you want to start another training session.<br>Press [E] (capital E!) if you want to start with the experiment.")}automata_configurator(){return new r([0,1,2,3,4,5,6],0,(()=>{}),this.transitions(),[5])}transitions(){let e=super.transitions(),t=[l(0).to(6).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),l(1).to(6).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),l(3).to(6).on("Escape").if((()=>this.current_page_index<this.experiment_definition.tasks.length-1&&this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),l(6).to(5).on("E").do((()=>{})),l(6).to(0).on("Enter").do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),l(4).to(0).on("Enter").if((()=>this.training_configuration.can_be_repeated)).do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),l(4).to(5).on("E").do((e=>{}))];return e.splice(e.length-1),t.forEach((t=>e.push(t))),e}input(e){if(!["a","b","c"].includes(e)&&0!=this.automata.current_state)return super.input(e);super.input(e)}init_experiment(){this.training_configuration.init_experiment(this.experiment_definition)}}class R extends C{constructor(e,t,n){super("Main Experiment",(()=>{e(),n.output_writer().print_html_on_stage("<hr>Press [Enter] to start the experiment.")}),(()=>{n.output_writer().print_html_on_stage("You finished the experiment phase.<hr>Please, press [Enter] to go to the next phase.<br>")}),t,n)}}class j extends q{create_code_all_experiment_automatas(e){e.measurement.output_writer();let t=new S("Introduction",e.introduction_texts,e.measurement),n=new S("Finish",e.finish_texts,e.measurement);n.automata.add_finish_action((()=>e.finish_function(s.experiment_definition)));let s=new R(e.pre_run_experiment_output,this,e.measurement);w(e.seed),s.init_experiment();let r=this.clone(),i=new A(e.pre_run_training_output,e.training_configuration,r,e.measurement);i.init_experiment();let a=null;null!=e.post_questionnaire&&(a=new c(e.post_questionnaire,e.measurement));let o=[];return null!=t&&o.push(t),o.push(i),o.push(s),null!=a&&(o.push(a),s.experiment_definition.questionnaires.push(a)),o.push(n),new T(o)}clone(){return new j(this.template.experiment_name,this.is_training,this.treatments_combinator.clone(),this.template.variables,this.template.repetitions,this.measurement,this.template.task_creator)}}class D{constructor(e,t){this.variable=e,this.value=""+t}clone(){return new D(this.variable,this.value)}}function H(e,t,n){if(e.length>t.length)throw"Cannot loop both: first array has length: "+e.length+", but second has length "+t.length;let s=0;for(let r of e)n(r,t[s++])}class O{constructor(e){this.treatment_combination=[],this.treatment_combination=e}clone(){let e=new O([]);for(let t of this.treatment_combination)e.treatment_combination.push(t.clone());return e}}class I{constructor(e){this.fixed_treatments=e.fixed_treatments,this.can_be_cancelled=e.can_be_cancelled,this.can_be_repeated=e.can_be_repeated}init_experiment(e){if(e.tasks=[],null!=this.fixed_treatments)for(let t of this.fixed_treatments){let n=new O([]);H(e.all_independent_variables(),t,((e,t)=>{n.treatment_combination.push(new D(e,t))}));let s=new x(n,e,"");s.is_training=!0,e.experiment_definition_task_creator(s),e.tasks.push(s)}}}class N{constructor(e,t){this.treatments=[],this.name=e;for(let e of t)this.treatments.push(new D(this,e))}}function M(e,t,n){if(0==e.length)n(t);else{let s=e.shift();for(let r of s)t.push(r),M(e,t,n),t.pop();e.unshift(s)}}function z(e,t){M(e,[],t)}class P{constructor(){this.independent_variables=[]}push_variable(e,t){this.independent_variables.push(new N(e,t))}print_to_array(e){for(let t of this.independent_variables)e.push(t.name+";")}create_treatment_combinations(){let e=[];return z(this.independent_variables.map((e=>e.treatments)),(t=>{e.push(new O([...t]))})),e}get_variable_named(e){for(let t of this.independent_variables)if(t.name===e)return t;throw"Unknown independent variable named: "+e}static from_layout(e){let t=new P;for(let n of e)t.push_variable(n.variable,n.treatments);return t}}class U extends _{print_experiment_name(e){this.get_html_element_by_id("STATE").innerHTML=e}clear_error(){let e=["STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_stage(){let e=["STAGE","STAGE_MSG","STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_state(){let e=["STATE","TASK"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}print_error_string_on_stage(e){this.get_html_element_by_id("STAGE_ERROR").innerHTML=e}get_html_element_by_id(e){return document.getElementById(e)}print_string_to_state(e){this.get_html_element_by_id("STATE").innerHTML=e}print_string_on_stage(e){this.print_html_on_stage("<p>"+e+"</p>")}ask_for_input(){let e=document.createElement("p"),t=document.createElement("label");t.setAttribute("type","text"),e.textContent="Answer: ",e.appendChild(t);let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("class","input"),e.appendChild(n),n.id="INPUT",this.get_html_element_by_id("STAGE").appendChild(e),n.focus()}set_focus_on_input(){this.get_html_element_by_id("INPUT").focus()}print_string_to_page_number(e){this.get_html_element_by_id("TASK").innerHTML=e}get_given_answer(){return this.get_html_element_by_id("INPUT").value}print_on_input_response(e){this.get_html_element_by_id("INPUT").value=e}create_html_element_from_string(e){return(new DOMParser).parseFromString(e,"text/html").body}print_html_on_stage(e){this.get_html_element_by_id("STAGE").appendChild(this.create_html_element_from_string(e))}print_html_on_error(e){this.get_html_element_by_id("STAGE_ERROR").appendChild(this.create_html_element_from_string(e))}}function G(e){let t=[];if(0==e)return[];for(let n=1;n<=e;n++){let s=G(e-n);for(let e of s){let s=[n];for(let t of e)s.push(t);t.push(s)}0==s.length&&t.push([e])}return t}function L(e,t="",n=!1){if(!e)throw console.error(t),"Wrong: "+t;n&&console.log("Ok: "+t)}!function(){let e=[];e=G(5),e=G(0)}();class B{constructor(e,t){this.children=[],this.children=[],this.content=e,this.children=t}clone(){let e=[];for(let t of this.children)e.push(t.clone());return new B(this.content,e)}preorder(e){e(this);for(let t of this.children)t.preorder(e)}postorder(e){for(let t of this.children)t.postorder(e);e(this)}distance_SH01(e,t){if(this==e)return this.left_distance_SH01(t)-1;if(this==t)return this.right_distance_SH01(e)-1;let n=null,s=null,r=1;for(let r of this.children)r.contains_node(e)&&(n=r),r.contains_node(t)&&(s=r);if(null===n||null===s)throw"should not be";if(n===s)return n.distance_SH01(e,t);let i=this.children.slice(this.children.indexOf(n)+1,this.children.indexOf(s)-1);for(let e of i)r+=e.number_of_nodes();return r+=n.right_distance_SH01(e),r+=s.left_distance_SH01(t),r}right_distance_SH01(e){let t=null,n=1;if(e===this)return 0;for(let n of this.children)if(n.contains_node(e)){t=n;break}if(null===t)throw"should not be";let s=this.children.slice(this.children.indexOf(t)+1);for(let e of s)n+=e.number_of_nodes();return n+=t.right_distance_SH01(e),n}left_distance_SH01(e){let t=null,n=1;if(e===this)return 0;for(let n of this.children)if(n.contains_node(e)){t=n;break}if(null===t)throw"should not be";let s=this.children.indexOf(t),r=this.children.slice(0,s);for(let e of r)n+=e.number_of_nodes();return n+=t.left_distance_SH01(e),n}path_length_from_this(e){if(this===e)return 0;for(let t of this.children){let n=t.path_length_from_this(e);if(n>0)return n+1}return-1}number_of_nodes(){let e=1;for(let t of this.children)e+=t.number_of_nodes();return e}contains_node(e){if(this===e)return!0;for(let t of this.children)if(t.contains_node(e))return!0;return!1}}function F(e){let t=new B(null,[]);return function(e){for(let n=0;n<e;n++)t.children.push(new B(null,[]))}(e-1),[t]}function J(e=[]){return new B(null,e)}[1,2].slice(0,1),function(e){let t=new B("source",[]),n=new B("target",[]),s=-1,r=null;r=J([J([J(),J(),J()]),J([J(),J([t,n]),J()])]),s=r.distance_SH01(t,n),L(1==s,"distance = 1",e),r=J([J([J(),J([t,n]),J()]),J([J(),J(),J()])]),s=r.distance_SH01(t,n),L(1==s,"distance = 1",e),r=J([J([J(),J([t]),J()]),J([J(),J(),n,J()])]),s=r.distance_SH01(t,n),L(7==s,"distance = 7",e),r=J([J([J(),J([t]),J()]),J([J(),n,J()])]),s=r.distance_SH01(t,n),L(6==s,"distance = 6",e),r=J([J([J(),t,J()]),J([J(),J(),n,J()])]),s=r.distance_SH01(t,n),L(6==s,"distance = 6",e),r=J([J([t,J()]),J([J(),n,J()])]),s=r.distance_SH01(t,n),L(5==s,"distance = 5",e),r=J([J([t,J()]),J([J(),n])]),s=r.distance_SH01(t,n),L(5==s,"distance = 5",e),r=J([J([t,J()]),J([n])]),s=r.distance_SH01(t,n),L(4==s,"distance = 4",e),r=t.clone(),r.children=[n],s=r.distance_SH01(r,n),L(0==s,"distance = 0 (source==root)",e),r=n.clone(),r.children=[t],s=r.distance_SH01(t,r),L(0==s,"distance = 0 (target==root)",e),r=J([t,n]),s=r.distance_SH01(t,n),L(1==s,"distance = 1",e),r=J([J([t]),n]),s=r.distance_SH01(t,n),L(2==s,"distance = 2",e),r=J([J([t,J()]),n]),s=r.distance_SH01(t,n),L(3==s,"distance = 3",e)}(!0);class Q{constructor(e,t,n,s){this.parameter_names=[],this.parameter_ordering=[],this.class_name=e,this.parameter_type_names=n,this.method_name=s,this.parameter_names=t;let r=0;t.forEach((e=>this.parameter_ordering.push(r++))),this.parameter_ordering=k(this.parameter_ordering)}type_signature_string(){return this.class_name+"("+this.parameter_type_names.join(", ")+")"}print_html_into_array(e,t,n){let s=this.parameter_names.length>0?"<br/>":"",r=[];for(let e=0;e<this.parameter_names.length;e++)r.push((n?this.parameter_type_names[e]+" ":"")+this.parameter_names[e]);e.push("class "+this.class_name+" {<br/><br/>"),e.push("&nbsp;&nbsp;"+this.class_name+"("+r.join(",&nbsp;")+") {"+s);for(let n of this.parameter_ordering){let s=t.get_class_named(this.parameter_type_names[n]);e.push("&nbsp;&nbsp;&nbsp;&nbsp;"+this.parameter_names[n]+"."+s.method_name+"();<br/>")}e.push("&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br/><br/>"),e.push("&nbsp;&nbsp;"+this.method_name+"() {}&nbsp;&nbsp;&nbsp;<br/><br/>"),e.push("}")}}class Y{constructor(e){this.class_definitions=e}type_check(e){let t=this.get_class_named(e.class_name),n=[];for(let t of e.parameters)this.type_check(t),n.push(t.class_name);if(n.length!=t.parameter_type_names.length)throw"invalid number of parameters: "+t.class_name+" expects "+t.parameter_names.length+" but got "+n.length;for(let e=0;e<t.parameter_type_names.length;e++)if(t.parameter_type_names[e]!==n[e])throw"invalid type in call. Expected "+t.type_signature_string()+" but got "+t.class_name+"("+n.join(", ")+")"}execute(e){let t=this.get_class_named(e.class_name),n=[];for(let t of e.parameters)this.execute(t),n.push(t.class_name);if(n.length!=t.parameter_type_names.length)throw"invalid number of parameters: "+t.class_name+" expects "+t.parameter_names.length+" but got "+n.length;for(let e=0;e<t.parameter_type_names.length;e++){let s=this.get_class_named(t.parameter_type_names[e]);if(t.parameter_type_names[e]!==n[e])throw"unknown method: "+s.method_name+" in object of class "+n[e]+"\n==>"+t.parameter_names[e]+"."+s.method_name+"();\n==>"+t.class_name+"("+t.parameter_names.join(", ")+"){...}"}}get_class_named(e){for(let t of this.class_definitions)if(t.class_name===e)return t;throw"no such class named: "+e}get_classes_named(e){let t=[];return e.forEach((e=>t.push(this.get_class_named(e)))),t}number_of_classes(){return this.class_definitions.length}html_table_string(e,t){let n=["<table style='border: 1px solid black;'>"],s=0;for(;s<this.class_definitions.length;){n.push('<tr style="vertical-align:top">');for(let r=0;r<e&&s<this.class_definitions.length;r++)"Target"===this.class_definitions[s].class_name?n.push("<td colspan='2' style='border: 1px solid black;'>"):n.push("<td style='border: 1px solid black;'>"),this.class_definitions[s].print_html_into_array(n,this,t),n.push("</td>"),s++;n.push("</tr>\n")}this.sort_class_definitions();let r=n.join("");return console.log("dummy print_into_html_table()"),r}sort_class_definitions(){this.class_definitions.sort(((e,t)=>"Target"===e.class_name?1:"Target"===t.class_name||e.class_name<t.class_name?-1:e.class_name>t.class_name?1:0));let e=this.class_definitions.pop();this.class_definitions.splice(10,0,e)}}class K{constructor(){this.words=["account","achiever","acoustics","act","action","activity","actor","addition","adjustment","advertisement","advice","aftermath","afternoon","afterthought","agreement","air","airplane","airport","alarm","amount","amusement","anger","angle","animal","ants","apparatus","apparel","appliance","approval","arch","argument","arithmetic","arm","army","art","attack","attraction","aunt","authority","back","badge","bag","bait","balance","ball","base","baseball","basin","basket","basketball","bat","bath","battle","bead","bear","bed","bedroom","beds","bee","beef","beginner","behavior","belief","believe","bell","bells","berry","bike","bikes","bird","birds","birth","birthday","bit","bite","blade","blood","blow","board","boat","bomb","bone","book","books","boot","border","bottle","boundary","box","brake","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","cabbage","cable","cactus","cake","cakes","calculator","calendar","camera","camp","can","cannon","canvas","cap","caption","car","card","care","carpenter","carriage","cars","cart","cast","cat","cats","cattle","cause","cave","celery","cellar","cemetery","cent","chalk","chance","change","channel","cheese","cherries","cherry","chess","chicken","chickens","chin","church","circle","clam","cloth","clover","club","coach","coal","coast","coat","cobweb","coil","collar","color","committee","company","comparison","competition","condition","connection","control","cook","copper","corn","cough","country","cover","cow","cows","crack","cracker","crate","crayon","cream","creator","creature","credit","crib","crime","crook","crow","crowd","crown","cub","cup","current","curtain","curve","cushion","dad","daughter","day","death","debt","decision","deer","degree","design","desire","desk","destruction","detail","development","digestion","dime","dinner","dinosaurs","direction","dirt","discovery","discussion","distance","distribution","division","dock","doctor","dog","dogs","doll","dolls","donkey","door","downtown","drain","drawer","dress","drink","driving","drop","duck","ducks","dust","ear","earth","earthquake","edge","education","effect","egg","eggnog","eggs","elbow","end","engine","error","event","example","exchange","existence","expansion","experience","expert","eye","eyes","face","fact","fairies","fall","fang","farm","fear","feeling","field","finger","fire","fireman","fish","flag","flame","flavor","flesh","flight","flock","floor","flower","flowers","fly","fog","fold","food","foot","force","fork","form","fowl","frame","friction","friend","friends","frog","frogs","front","fruit","fuel","furniture","gate","geese","ghost","giants","giraffe","glass","glove","gold","government","governor","grade","grain","grandfather","grandmother","grape","grass","grip","ground","group","growth","guide","guitar","gun","hair","haircut","hall","hammer","hand","hands","harbor","harmony","hat","head","health","heat","hill","history","hobbies","hole","holiday","home","honey","hook","hope","horn","horse","horses","hose","hospital","hot","hour","house","houses","humor","hydrant","ice","icicle","idea","impulse","income","increase","industry","ink","insect","instrument","insurance","interest","invention","iron","island","jail","jam","jar","jeans","jelly","jellyfish","jewel","join","judge","juice","jump","kettle","key","kick","kiss","kittens","kitty","knee","knife","knot","knowledge","laborer","lace","ladybug","lake","lamp","land","language","laugh","leather","leg","legs","letter","letters","lettuce","level","library","limit","line","linen","lip","liquid","loaf","lock","locket","look","loss","love","low","lumber","lunch","lunchroom","machine","magic","maid","mailbox","man","marble","mark","market","mask","mass","match","meal","measure","meat","meeting","memory","men","metal","mice","middle","milk","mind","mine","minister","mint","minute","mist","mitten","mom","money","month","moon","morning","mother","motion","mountain","mouth","move","muscle","name","nation","neck","need","needle","nerve","nest","night","noise","north","nose","note","notebook","number","nut","oatmeal","observation","ocean","offer","office","oil","orange","oranges","order","oven","page","pail","pan","pancake","paper","parcel","part","partner","party","passenger","payment","peace","pear","pen","pencil","person","pest","pet","pets","pickle","picture","pie","pies","pig","pigs","pin","pipe","pizzas","place","plane","planes","plant","plantation","plants","plastic","plate","play","playground","pleasure","plot","plough","pocket","point","poison","pollution","popcorn","porter","position","pot","potato","powder","power","price","produce","profit","property","prose","protest","pull","pump","punishment","purpose","push","quarter","quartz","queen","question","quicksand","quiet","quill","quilt","quince","quiver","rabbit","rabbits","rail","railway","rain","rainstorm","rake","range","rat","rate","ray","reaction","reading","reason","receipt","recess","record","regret","relation","religion","representative","request","respect","rest","reward","rhythm","rice","riddle","rifle","ring","rings","river","road","robin","rock","rod","roll","roof","room","root","rose","route","rub","rule","run","sack","sail","salt","sand","scale","scarecrow","scarf","scene","scent","school","science","scissors","screw","sea","seashore","seat","secretary","seed","selection","self","sense","servant","shade","shake","shame","shape","sheep","sheet","shelf","ship","shirt","shock","shoe","shoes","shop","show","side","sidewalk","sign","silk","silver","sink","sister","sisters","size","skate","skin","skirt","sky","slave","sleep","sleet","slip","slope","smash","smell","smile","smoke","snail","snails","snake","snakes","sneeze","snow","soap","society","sock","soda","sofa","son","song","songs","sort","sound","soup","space","spade","spark","spiders","sponge","spoon","spot","spring","spy","square","squirrel","stage","stamp","star","start","statement","station","steam","steel","stem","step","stew","stick","sticks","stitch","stocking","stomach","stone","stop","store","story","stove","stranger","straw","stream","street","stretch","string","structure","substance","sugar","suggestion","suit","summer","sun","support","surprise","sweater","swim","swing","system","table","tail","talk","tank","taste","tax","teaching","team","teeth","temper","tendency","tent","territory","test","texture","theory","thing","things","thought","thread","thrill","throat","throne","thumb","thunder","ticket","tiger","time","tin","title","toad","toe","toes","tomatoes","tongue","tooth","toothbrush","toothpaste","top","touch","town","toy","toys","trade","trail","train","trains","tramp","transport","tray","treatment","tree","trees","trick","trip","trouble","trousers","truck","trucks","tub","turkey","turn","twig","twist","umbrella","uncle","underwear","unit","use","vacation","value","van","vase","vegetable","veil","vein","verse","vessel","vest","view","visitor","voice","volcano","volleyball","voyage","walk","wall","war","wash","waste","watch","water","wave","waves","wax","way","wealth","weather","week","weight","wheel","whip","whistle","wilderness","wind","window","wine","wing","winter","wire","wish","wood","wool","word","work","worm","wound","wren","wrench","wrist","writer","writing","yak","yam","yard","yarn","year","yoke","zebra","zephyr","zinc","zipper","zoo"]}}class V{constructor(e,t){this.parameters=t,this.class_name=e}call_string(){let e=[];return e.push(this.class_name+"("),e.push(this.parameters.map((e=>e.call_string())).join(", ")),e.push(")"),e.join("")}equals(e){return e instanceof V&&this.class_name===e.class_name&&this.parameters.length===e.parameters.length}}function W(e){if(e.length<1)throw"missing )";let t=[],n=e[0];if(")"!==n&&e.length>0){let s=Z(e);if(t.push(s),n=e[0],","===n){e.shift();let n=W(e);if(0==n.length)throw"missing parameters after , <<< "+e.join("");n.forEach((e=>t.push(e)))}}if(e.length<=0)throw"missing )";return t}function Z(e){let t=function(e){let t=[];for(;e.length>0;){let n=e.shift();if(!(n>="a"&&n<="z"||n>="A"&&n<="Z")){if(t.length<=0)throw"invalid identifier before "+e.join("");return e.unshift(n),t.join("")}t.push(n)}if(t.length<=0)throw"No identifier";return t.join("")}(e);if("null"===t)return new V(null,[]);let n=e.shift();if("("!==n)throw"missing ("+e.join("");let s=W(e);if(n=e.shift(),")"!==n)throw"Missing )";return new V(t,s)}function X(e){return function(e){let t=Z(e);if(e.length>0)throw"unexpected character "+e[0];return t}(e.split(" ").join("").split(""))}function $(e){let t=new V(e.content,[]);return e.children.forEach((e=>t.parameters.push($(e)))),t}w("666");let ee={3:F(2),5:F(4),7:F(6)};!function(){let e=new U,t={experiment_name:"TestExperiment",seed:"666",introduction_pages:(i=e).stage_string_pages_commands([i.convert_string_to_html_string("Please, just do this experiment only, when you have enough time (about 25 minutes), are concentrated enough, and motivated enough.\n\nPlease, open the browser in fullscreen mode (probably by pressing [F11]). You should have a screen with a resolution of 1920x1080 or more."),"In this experiment, you will be asked to enter the constructor call to a class <span class='sourcecode'>Target</span>. A valid constructor call requires in the underlying language the correct number of parameters as well.<br><br>The languages does <b>not</b> have a keyword such as <span class='sourcecode'>new</span>. Instead, you call a constructor like a function call, where the class name is the function name.<br/><br/> For example, if there is a class with the name <span class='sourcecode'>MyClass</span> whose constructor does not have any parameters, you call the constructor via <span class='sourcecode'>MyClass()</span>.<br/><br/>All available classes are shown to you in a table (each cell has one class). The class <span class='sourcecode'>Target</span> is the one whose parameter needs to be called. It is always in the first cell in the last row.<br><br>The code in the experiment is either statically typed or dynamically typed which will be explained on the next page and none of classes whose objects are passed to the constructor required any parameters.<br><br>Please note that the classes you will see in each code snippet will be different. I.e. in a first task a class named A is different than a class named A in the second task.",'Sometimes the classes are statically typed with a type name in front of each parameter (such as in languages like Java). For example, the following could be shown to you:<table style="border: 1px solid black;"><tbody><tr style="vertical-align:top"><td style="border: 1px solid black;">class A {<br><br>&nbsp;&nbsp;A() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;enterData() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class C {<br><br>&nbsp;&nbsp;C() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;addEvents() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class E {<br><br>&nbsp;&nbsp;E(J teeth,&nbsp;J fall) {<br>&nbsp;&nbsp;&nbsp;&nbsp;fall.queueResults();<br>&nbsp;&nbsp;&nbsp;&nbsp;teeth.queueResults();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;manipulateQueue() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class G {<br><br>&nbsp;&nbsp;G() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;filterEvents() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class H {<br><br>&nbsp;&nbsp;H(G building) {<br>&nbsp;&nbsp;&nbsp;&nbsp;building.filterEvents();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;initializeData() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n<tr style="vertical-align:top"><td style="border: 1px solid black;">class I {<br><br>&nbsp;&nbsp;I() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;computeResult() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class J {<br><br>&nbsp;&nbsp;J() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;queueResults() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class L {<br><br>&nbsp;&nbsp;L(E insect,&nbsp;J knot) {<br>&nbsp;&nbsp;&nbsp;&nbsp;knot.queueResults();<br>&nbsp;&nbsp;&nbsp;&nbsp;insect.manipulateQueue();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;writeOutput() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class N {<br><br>&nbsp;&nbsp;N() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;monitorSystem() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class O {<br><br>&nbsp;&nbsp;O(R road) {<br>&nbsp;&nbsp;&nbsp;&nbsp;road.createTasks();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;trackUserActivity() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n<tr style="vertical-align:top"><td colspan="2" style="border: 1px solid black;">class Target {<br><br>&nbsp;&nbsp;Target(A substance,&nbsp;C scene) {<br>&nbsp;&nbsp;&nbsp;&nbsp;scene.addEvents();<br>&nbsp;&nbsp;&nbsp;&nbsp;substance.enterData();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;getUserInfo() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class R {<br><br>&nbsp;&nbsp;R(H driving,&nbsp;N door) {<br>&nbsp;&nbsp;&nbsp;&nbsp;driving.initializeData();<br>&nbsp;&nbsp;&nbsp;&nbsp;door.monitorSystem();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;createTasks() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class S {<br><br>&nbsp;&nbsp;S(A rake) {<br>&nbsp;&nbsp;&nbsp;&nbsp;rake.enterData();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;doComputation() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class T {<br><br>&nbsp;&nbsp;T() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;setupConnections() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n</tbody></table><br>The correct constructor call in that case is: <span class=\'sourcecode\'>Target(A(), C())</span>: the first parameter must be an instance of <span class=\'sourcecode\'>A</span>, the second one an instance of <span class=\'sourcecode\'>C</span>.','Sometimes the classes are dynamically typed (such as in languages like JavaScript). For example, the following could be shown to you:<span class=\'sourcecode\'><table style="border: 1px solid black;"><tbody><tr style="vertical-align:top"><td style="border: 1px solid black;">class A {<br><br>&nbsp;&nbsp;A() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;enterData() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class C {<br><br>&nbsp;&nbsp;C() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;addEvents() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class E {<br><br>&nbsp;&nbsp;E(teeth,&nbsp;fall) {<br>&nbsp;&nbsp;&nbsp;&nbsp;fall.queueResults();<br>&nbsp;&nbsp;&nbsp;&nbsp;teeth.queueResults();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;manipulateQueue() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class G {<br><br>&nbsp;&nbsp;G() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;filterEvents() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class H {<br><br>&nbsp;&nbsp;H(building) {<br>&nbsp;&nbsp;&nbsp;&nbsp;building.filterEvents();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;initializeData() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n<tr style="vertical-align:top"><td style="border: 1px solid black;">class I {<br><br>&nbsp;&nbsp;I() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;computeResult() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class J {<br><br>&nbsp;&nbsp;J() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;queueResults() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class L {<br><br>&nbsp;&nbsp;L(insect,&nbsp;knot) {<br>&nbsp;&nbsp;&nbsp;&nbsp;knot.queueResults();<br>&nbsp;&nbsp;&nbsp;&nbsp;insect.manipulateQueue();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;writeOutput() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class N {<br><br>&nbsp;&nbsp;N() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;monitorSystem() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class O {<br><br>&nbsp;&nbsp;O(road) {<br>&nbsp;&nbsp;&nbsp;&nbsp;road.createTasks();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;trackUserActivity() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n<tr style="vertical-align:top"><td colspan="2" style="border: 1px solid black;">class Target {<br><br>&nbsp;&nbsp;Target(substance,&nbsp; scene) {<br>&nbsp;&nbsp;&nbsp;&nbsp;scene.addEvents();<br>&nbsp;&nbsp;&nbsp;&nbsp;substance.enterData();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;getUserInfo() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class R {<br><br>&nbsp;&nbsp;R(driving,&nbsp;door) {<br>&nbsp;&nbsp;&nbsp;&nbsp;driving.initializeData();<br>&nbsp;&nbsp;&nbsp;&nbsp;door.monitorSystem();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;createTasks() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class S {<br><br>&nbsp;&nbsp;S(rake) {<br>&nbsp;&nbsp;&nbsp;&nbsp;rake.enterData();<br>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;doComputation() {}&nbsp;&nbsp;&nbsp;<br><br>}</td><td style="border: 1px solid black;">class T {<br><br>&nbsp;&nbsp;T() {&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;setupConnections() {}&nbsp;&nbsp;&nbsp;<br><br>}</td></tr>\n</tbody></table></span><br>The correct constructor call is again: <span class=\'sourcecode\'>Target(A(), C())</span>: <ol><li>the first parameter must be an instance of <span class=\'sourcecode\'>A</span>, because the message <span class=\'sourcecode\'>enterData()</span> is sent to the first parameter (and it is just implemented in <span class=\'sourcecode\'>A</span>).</li><li>The second parameter must be an instance of <span class=\'sourcecode\'>C</span> because the message <span class=\'sourcecode\'>addEvents()</span> is sent to the second parameter (and it is just implemented in <span class=\'sourcecode\'>C</span>).</li></ol>']),pre_run_training_instructions:i.string_page_command(i.convert_string_to_html_string("You entered the training phase that consists of just two examples. Again, please enter the constructor call. You will go to the next task once you entered the correct call.")),pre_run_experiment_instructions:i.string_page_command(i.convert_string_to_html_string("You entered the experiment phase.\n\n")),finish_pages:[i.string_page_command(i.convert_string_to_html_string("Almost done. Next, the experiment data will be downloaded (after pressing [Enter]). Please, send the downloaded file to the experimenter (stefan.hanenberg@uni-due.de).\n\nAfter sending your email, you can close this window.\n\nMany thanks for participation."))],layout:[{variable:"Notation",treatments:["types","no_types"]},{variable:"Number_of_terms",treatments:["3","5","7"]}],repetitions:2,measurement:(a=b,e=>new d(a(e))),training_configuration:{fixed_treatments:[["types","7"],["no_types","5"]],can_be_cancelled:!1,can_be_repeated:!1},task_configuration:e=>{let t=v(ee[e.treatment_value("Number_of_terms")]).clone(),n=function(e,t){let n=k(["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]),s=k((new K).words),r=k(["addEvents","acceptDefaults","analyzeResults","askInput","bindResources","cancelInitialization","calculateSum","clearCache","cloneNumbers","computeResult","connectDatabase","createTasks","doComputation","dropFiles","executeTask","dumpDatabase","enterData","eraseTmp","fetchData","finishSetup","filterEvents","forwardProfile","formatOutput","generateNumber","getUserInfo","handleError","initializeData","invalidateConnections","logErrors","mergeRequests","monitorSystem","manipulateQueue","parseData","printLogs","processData","queueResults","runComputation","rerunSetup","setupConnections","scaleBandwith","streamEvents","validateInput","writeOutput","trackUserActivity","zipHistory"]);function i(){return Math.random(),n.length,n.shift()}function a(){return Math.random(),s.length,s.shift()}function o(){return r.shift()}let p=new Y([]);e.postorder((t=>{t.content=t===e?"Target":i();let n=t.children.map((e=>e.content)),s=t.children.map((e=>a())),r=new Q(t.content,s,n,o());p.class_definitions.push(r)}));for(let e=p.number_of_classes();e<t;e++){let e=y(3),t=[],n=[];for(let s=0;s<e;s++)t.push(a()),n.push(v(p.class_definitions).class_name);let s=new Q(i(),t,n,o());p.class_definitions.push(s)}return p.sort_class_definitions(),p}(t,14),s=n.html_table_string(5,"types"===e.treatment_value("Notation")),r="";e.do_print_task=()=>{i.clear_stage(),i.print_html_on_stage("<div class='sourcecode'>"+s+"</div>")},e.expected_answer=$(t).call_string(),e.accepts_answer_function=s=>{try{let t=X(s);try{"types"===e.treatment_value("Notation")?n.type_check(t):n.execute(t)}catch(e){return r=e,!1}}catch(e){return r=e,!1}return 0!=(X(s).class_name===$(t).class_name)||(r="invalid target class",!1)},e.do_print_error_message=e=>{i.clear_error(),i.print_html_on_error(r)},e.do_print_after_task_information=()=>{i.clear_stage(),i.clear_error(),i.print_string_on_stage(i.convert_string_to_html_string("Correct.\n\nIn case, you feel not concentrated enough, make a short break.\n\nPress [Enter] to go on. "))}}},n=t.measurement(e),s=function(e){let t=P.from_layout(e.layout),n=new E(t,e.repetitions),s=new j(e.experiment_name,!1,n,t,e.repetitions,e.measurement,e.task_configuration),r=new I(e.training_configuration);return s.create_code_all_experiment_automatas({seed:e.seed,introduction_texts:e.introduction_pages,post_questionnaire:e.post_questionnaire,pre_run_training_output:e.pre_run_training_output,training_configuration:r,pre_run_experiment_output:e.pre_run_experiment_output,finish_texts:e.finish_pages,measurement:e.measurement,finish_function:e.finish_function})}({experiment_name:t.experiment_name,seed:t.seed,introduction_pages:t.introduction_pages,post_questionnaire:t.post_questionnaire,pre_run_training_output:t.pre_run_training_instructions,training_configuration:t.training_configuration,pre_run_experiment_output:t.pre_run_experiment_instructions,finish_pages:t.finish_pages,layout:t.layout,repetitions:t.repetitions,task_configuration:t.task_configuration,measurement:n,finish_function:e=>{document.removeEventListener("keydown",r),function(e,t){const n=new Blob(t,{type:"application/ssc"}),s=window.document.createElement("a");s.href=window.URL.createObjectURL(n),s.download="experimentdata.csv",document.body.appendChild(s),s.click(),document.body.removeChild(s)}(0,e.generate_csv_data())}}),r=e=>{let t=(r="","Alt"==(n=e).key&&n.ctrlKey?"Alt+Ctrl":"Control"==n.key&&n.altKey?"Ctrl+Alt":(r+=n.altKey?"+Alt":"",r+=n.ctrlKey?"+Control":"","Alt"==n.key?"Alt":""+n.key+r));var n,r;s.input(t)};var i,a;document.addEventListener("keydown",r,!1),s.set_active()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,