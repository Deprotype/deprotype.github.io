(()=>{"use strict";!function(t,e,n){var i,r=256,s="random",o=n.pow(r,6),a=n.pow(2,52),_=2*a,u=255;function h(u,h,f){var g=[],w=m(p((h=1==h?{entropy:!0}:h||{}).entropy?[u,d(e)]:null==u?function(){try{i=require("crypto");var n=crypto.randomByte;return i&&(n=i.randomBytes)?n=n(r):(n=new Uint8Array(r),(t.crypto||t.msCrypto).getRandomValues(n)),d(n)}catch(n){var s=t.navigator,o=s&&s.plugins;return[+new Date,t,o,t.screen,d(e)]}}():u,3),g),b=new c(g),y=function(){for(var t=b.g(6),e=o,n=0;t<a;)t=(t+n)*r,e*=r,n=b.g(1);for(;t>=_;)t/=2,e/=2,n>>>=1;return(t+n)/e};return y.int32=function(){return 0|b.g(4)},y.quick=function(){return b.g(4)/4294967296},y.double=y,m(d(b.S),e),(h.pass||f||function(t,e,i,r){return r&&(r.S&&l(r,b),t.state=function(){return l(b,{})}),i?(n[s]=t,e):t})(y,w,"global"in h?h.global:this==n,h.state)}function c(t){var e,n=t.length,i=this,s=0,o=i.i=i.j=0,a=i.S=[];for(n||(t=[n++]);s<r;)a[s]=s++;for(s=0;s<r;s++)a[s]=a[o=u&o+t[s%n]+(e=a[s])],a[o]=e;(i.g=function(t){for(var e,n=0,s=i.i,o=i.j,a=i.S;t--;)e=a[s=u&s+1],n=n*r+a[u&(a[s]=a[o=u&o+e])+(a[o]=e)];return i.i=s,i.j=o,n})(r)}function l(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function p(t,e){var n,i=[],r=typeof t;if(e&&"object"==r)for(n in t)try{i.push(p(t[n],e-1))}catch(t){}return i.length?i:"string"==r?t:t+"\0"}function m(t,e){for(var n,i=t+"",r=0;r<i.length;)e[u&r]=u&(n^=19*e[u&r])+i.charCodeAt(r++);return d(e)}function d(t){return String.fromCharCode.apply(0,t)}if(m(n.random(),e),"object"==typeof module&&module.exports){module.exports=h,n["seed"+s]=h;try{i=require("crypto")}catch(t){}}else"function"==typeof define&&define.amd?define((function(){return h})):n["seed"+s]=h}("undefined"!=typeof self?self:void 0,[],Math),console.log("RANDOM_INIT");class t{constructor(t){this.value=t}}function e(t,e){return-1!=t.indexOf(e)}class n{constructor(t){this.set_active_function=()=>{},this.forwarder_name=t}input(t){this.automata.input(t)}add_activation_function(t){}set_active(){}}class i{constructor(t){this.current_state=-1,this.transitions=[],this.states=[],this.start_state=t.start,this.states=t.states;for(let t=0;t<this.states.length;t++)this.transitions.push([]);for(let e of t.transitions){null==this.transitions&&console.log("Something is wrong here"),null!=this.transitions&&null!=e.from||console.log("Something is wrong here"),null==this.transitions[e.from]&&console.log("Something is wrong here");try{this.transitions[e.from].push(e)}catch(t){console.log("weird")}}this.init_function=t.init_function,this.end_states=t.end_states}input(t){let e=this.first_match(t),n=this.current_state;null!=e&&(this.current_state=e.next_state,e.action(n,t,this.current_state))}start(){this.current_state=this.start_state}first_match(t){for(let e=0;e<this.transitions[this.current_state].length;e++)if(this.transitions[this.current_state][e].accepts(t))return this.transitions[this.current_state][e];return null}initialize(){this.current_state=this.start_state,this.init_function()}add_finish_action(t){for(let e of this.transitions)for(let n of e)if(this.is_transition_to_end(n)){let e=n.action;n.action=(n,i,r)=>{e(n,i,r),t()}}}is_transition_to_end(t){return e(this.end_states,t.next_state)}add_action_to_transitions(t,e){for(let n of this.transitions)for(let i of n)if(t(i)){let t=i.action;i.action=(n,i,r)=>{t(n,i,r),e()}}}}class r extends n{constructor(t,e,n,i){super(t),this.pre_run_instructions=n,this.post_run_instructions=i,this.measurement=e,this.automata=this.create_automata(),this.automata.initialize()}set_active(){this.show_intro()}create_automata(){return new i(this.automata_configurator())}output_writer(){return this.measurement.output_writer()}show_intro(){this.output_writer().clear_all(),this.output_writer().print_string_to_state(this.forwarder_name),this.pre_run_instructions()}empty_screen_and_show_instructions(t){this.output_writer().clear_state(),this.output_writer().clear_stage(),null==t||null==t?console.log("something is strange"):t()}}class s{constructor(t,e,n,i,r){this.states=t,this.start=e,this.init_function=n,this.transitions=i,this.end_states=r}}class o{}class a extends o{constructor(t){super(),this.acceptor_function=t}accepts(t){return this.acceptor_function(t)}}class _{constructor(t,e,n,i){this.from=t,this.acceptor=e,this.next_state=n,this.action=i}is_valid_input(t){return this.acceptor.accepts(t)}accepts(t){return this.acceptor.accepts(t)}}function u(t,e,n,i){return new _(t,new a(e),n,((t,e,n)=>i(e)))}function h(t){return{to:n=>({on:e=>({if:i=>({do:r=>u(t,(t=>t==e&&i(t)),n,r)}),do:i=>u(t,(t=>t==e),n,i)}),on_any:i=>({if:r=>({do:s=>u(t,(t=>e(i,t)&&r(t)),n,s)}),do:r=>u(t,(t=>e(i,t)),n,r)})})}}class c{constructor(t,e){this.answer=null,this.variable_name=t,this.question_text=e}store_answer(){let t=document.getElementById(this.variable_name);this.answer=t.value}}class l extends c{constructor(t,e,n){super(t,e),this.alternatives=n}input_html(){let t='<select id="'+this.variable_name+'">';t+="<option disabled selected value> -- select an option -- </option>";let e=0;return this.alternatives.forEach((n=>t+="<option value="+e+++">"+n+"</option>")),t+="</select>",t}store_answer(){let t=document.getElementById(this.variable_name);this.answer=this.alternatives[t.value]}}class p extends r{constructor(t,e){super("Questionnaire",e,(()=>e.output_writer().print_html_on_stage("Please, answer the following questions.<br>")),(()=>e.output_writer().print_html_on_stage("Thank you for answering the questions."))),this.current_question_number=-1,this.questions=t}automata_configurator(){return new s([0,1,2,3,4],0,(()=>{}),this.transitions(),[4])}transitions(){return[h(0).to(4).on("DONE").if((t=>!0)).do((t=>{this.add_result_to_question(),console.log("dummy")}))]}show_intro(){super.show_intro();let t=this.create_questionnaire_html_string();this.output_writer().print_html_on_stage(t),document.getElementById("DONE").onclick=()=>this.input("DONE")}show_outro(){}create_questionnaire_html_string(){let t="<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>";return this.questions.forEach((e=>t+="<tr><td>"+e.question_text+"</td><td>"+e.input_html()+"</td></tr>")),t+="</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>",t}add_result_to_question(){for(let t of this.questions)t.store_answer()}}var m;function d(t,e,n){return new l(t,e,n)}!function(t){t[t.STRING=1]="STRING",t[t.NUMBER=2]="NUMBER"}(m||(m={}));class f{convert_string_to_html_string(t){return function(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/\n/g,"<br/>").replace(/ /g,"&nbsp;")}(t)}string_page_command(t){return()=>this.print_string_on_stage(t)}stage_string_pages_commands(t){let e=[];for(let n of t)e.push(this.string_page_command(n));return e}get_given_answer(t){return t}print_on_input_response(t){}set_focus_on_input(){}clear_all(){this.clear_state(),this.clear_stage()}}class g{constructor(t){this.input_type=t}accepted_responses(){return this.input_type.accepted_responses()}given_answer(t){return this.input_type.given_answer(t)}start_measurement(t){this.start_time=(new Date).getTime().valueOf(),t.print_task()}stop_measurement(t,e){let n=(new Date).getTime().valueOf();e.given_answer=this.input_type.get_given_answer(t),e.required_milliseconds=n-this.start_time,e.do_print_after_task_information()}incorrect_response(t,e){let n=(new Date).getTime().valueOf(),i=e.experiment_definition.measurement.get_given_answer(t);e.invalid_answers.push([i,n-this.start_time]),e.do_print_error_message(this.input_type.get_given_answer(t))}output_writer(){return this.input_type.output_writer}get_given_answer(t){return this.input_type.get_given_answer(t)}demands_penalty(){return!1}penalty_is_over(){return!0}}class w extends g{constructor(t){super(t)}}class b{constructor(t){this.output_writer=t}print_input_request(){this.output_writer.ask_for_input()}get_given_answer(t){return this.output_writer.get_given_answer(t)}}class y extends b{constructor(t,e){super(e),this.accepted_keys=t}accepted_responses(){return this.accepted_keys}given_answer(t){return t}print_input_request(){}get_given_answer(t){return t}}const x=new class{constructor(){Math.seedrandom("1234567890")}new_random_integer(t){return Math.trunc(t*Math.random())}set_seed(t){Math.seedrandom(t)}};function v(t){x.set_seed(t)}function q(t){return x.new_random_integer(t)}function k(t){let e=[...t],n=[];for(;e.length>0;)n.push(e.splice(q(e.length),1)[0]);return n}function E(t){return t[q(t.length)]}function j(t,e){return k(t).slice(0,e)}function S(t){for(;;){let e=String.fromCharCode(97+q(26));if(!t.includes(e))return e}}function T(t){for(;;){let e=String.fromCharCode(97+q(26)).toUpperCase();if(!t.includes(e))return e}}console.log("DONE");class C{constructor(t,e,n){this.expected_answer="",this.given_answer="",this.required_milliseconds=null,this.task_number_in_execution=-1,this.invalid_answers=[],this.is_training=!1,this.has_pre_task_description=!1,this.do_print_task=()=>{throw new Error("Method not implemented.")},this.do_print_pre_task=()=>{throw new Error("Method not implemented.")},this.do_print_error_message=()=>{throw new Error("Method not implemented.")},this.accepts_answer_function=t=>!0,this.do_print_after_task_information=()=>{throw new Error("Method not implemented.")},this.treatment_combination=t,this.experiment_definition=e}accepts_answer(t){let e=this.experiment_definition.measurement.get_given_answer(t);return this.accepts_answer_function(e)}next_task(){return this.task_number_in_execution<this.experiment_definition.tasks.length?this.experiment_definition.tasks[this.task_number_in_execution]:null}html_string_with_cmd(t,e){}html_node_with_cmd(t,e){}after_task_string_constructor(t){}print_task(){this.do_print_task(),this.print_input_request()}print_pre_task_info(){this.do_print_pre_task()}print_input_request(){this.experiment_definition.measurement.input_type.print_input_request()}treatment_value(t){for(let e of this.treatment_combination.treatment_combination)if(e.variable.name===t)return e.value;throw"Unknown treatment: "+t}set_computed_variable_value(t,e){for(let n of this.treatment_combination.treatment_combination)if(n.variable.name===t)return void(n.value=e);throw"Unknown treatment: "+t}}class A{constructor(t,e){this.variables=t,this.repetitions=e}clone(){return new A(this.variables,this.repetitions)}create_treatment_combinations(){let t=[];for(let e=0;e<this.repetitions;e++)t=t.concat(this.variables.create_treatment_combinations());return t}create_tasks(t){let e=[];for(let n of this.create_treatment_combinations()){let i=new C(n.clone(),t,"");try{t.experiment_definition_task_creator(i)}catch(e){console.log("halt"),t.experiment_definition_task_creator(i)}i.is_training=t.is_training,e.push(i)}return k(e)}get_variable_named(t){return this.variables.get_variable_named(t)}}class I{constructor(t,e,n,i,r,s,o){this.questionnaires=[],this.tasks=[],this.experiment_name=t,this.is_training=e,this.template={experiment_name:t,variables:i,repetitions:r,task_creator:o},this.treatments_combinator=n,this.variables=i,this.measurement=s,this.experiment_definition_task_creator=o}init_experiment(t){this.tasks=this.treatments_combinator.create_tasks(this)}all_independent_variables(){return this.variables.independent_variables}generate_csv_data(){let t=[];for(let e of this.questionnaires)for(let n of e.questions)t.push('"'+n.variable_name+'";');this.variables.print_to_array(t),t.push("number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\n");for(let e of this.tasks){for(let e of this.questionnaires)for(let n of e.questions)t.push('"'+n.answer+'";');for(let n of e.treatment_combination.treatment_combination)t.push(n.value+";");t.push(e.invalid_answers.length+1+";"),t.push(e.expected_answer+";"),t.push(e.given_answer+";"),t.push((e.given_answer==e.expected_answer)+";"),t.push(e.required_milliseconds+";"),e.invalid_answers.forEach((e=>t.push(e[0]+";"+e[1]+";"))),t.push("\n")}return t}}class O extends r{constructor(t,e,n){super(t,n,e[0],e[e.length-1]),this.current_page_number=-1,this.pages=e,this.create_automata()}set_page_index(t){this.current_page_number=t,this.empty_screen_and_show_instructions(this.pages[this.current_page_number]),this.output_writer().print_string_to_state(this.forwarder_name),this.output_writer().print_string_to_page_number("Page "+(this.current_page_number+1)+" / "+this.pages.length);let e="<hr>";t>0&&(e+="[&#8592] = previous page"),t<this.pages.length-1&&(e+=("<hr>"!=e?"<br>":"")+"[&#8594] = next page"),t==this.pages.length-1&&(e+=("<hr>"!=e?"<br>":"")+"[Enter] = Finish"),this.output_writer().print_html_on_stage(e)}set_active(){super.set_active()}show_intro(){this.set_page_index(0)}show_outro(){}automata_configurator(){return new s([0,1],0,(()=>{}),this.transitions(),[1])}transitions(){return[h(0).to(0).on("ArrowRight").if((t=>this.current_page_number<this.pages.length-1)).do((t=>{this.set_page_index(++this.current_page_number)})),h(0).to(0).on("ArrowLeft").if((t=>this.current_page_number>0)).do((t=>{this.set_page_index(--this.current_page_number)})),h(0).to(1).on("Enter").if((t=>this.current_page_number>=this.pages.length-1)).do((t=>{}))]}}class M extends n{constructor(t){super("Default Sequential Forwarder Forwader"),this.current_forwarder_index=0,this.forwarders=t;for(let e of t)e.automata.add_finish_action((()=>this.automata.input("switch to next state")));var e,n,r;this.automata=(e=[0,1],n=()=>{},r=[h(0).to(0).on("switch to next state").if((()=>this.current_forwarder_index<this.forwarders.length-1)).do((()=>{this.current_forwarder_index++,this.current_forwarder().set_active()})),h(0).to(1).on("switch to next state").if((()=>this.current_forwarder_index==this.forwarders.length-1)).do((()=>{}))],new i(new s(e,0,n,r,[1]))),this.automata.initialize()}input(t){this.forwarders[this.current_forwarder_index].input(t)}input_sequence(t){for(let e of t)this.input(e)}current_forwarder(){return this.forwarders[this.current_forwarder_index]}set_active(){super.set_active(),this.current_forwarder().set_active()}}class R extends r{show_intro(){this.empty_screen_and_show_instructions(this.pre_run_instructions),this.output_writer().print_experiment_name(this.forwarder_name)}show_outro(){this.empty_screen_and_show_instructions(this.post_run_instructions)}automata_configurator(){return new s([0,1,2,4,5,6],0,(()=>{}),this.transitions(),[6])}current_task(){return this.experiment_definition.tasks[this.current_page_index]}constructor(t,e,n,i,r){super(t,r,e,n),this.current_page_index=-1,this.experiment_definition=i}automata_configuration(){return new s([0,1,2,4,5,6],0,(()=>{}),this.transitions(),[6])}transitions(){return[h(0).to(2).on("Enter").if((t=>!this.first_task().has_pre_task_description)).do((t=>{this.set_experiment_index(0),this.measurement.start_measurement(this.current_task())})),h(0).to(1).on("Enter").if((t=>this.first_task().has_pre_task_description)).do((t=>{this.set_experiment_index(0),this.show_pre_task_info()})),h(0).to(5).on("Delete").do((t=>{this.show_outro()})),h(1).to(2).on("Enter").do((t=>{this.measurement.start_measurement(this.current_task())})),h(2).to(2).on_any(this.measurement.accepted_responses()).if((t=>!this.current_task().accepts_answer(t)&&!this.measurement.demands_penalty())).do((t=>{this.measurement.incorrect_response(t,this.current_task())})),h(2).to(5).on("?+Control").if((t=>!0)).do((t=>{this.measurement.stop_measurement(t,this.current_task()),this.show_outro()})),h(2).to(4).on_any(this.measurement.accepted_responses()).if((t=>this.current_task().accepts_answer(t)&&this.current_page_index<this.experiment_definition.tasks.length-1)).do((t=>{this.measurement.stop_measurement(t,this.current_task())})),h(2).to(3).on_any(this.measurement.accepted_responses()).if((t=>!this.current_task().accepts_answer(t)&&this.measurement.demands_penalty())).do((t=>{this.measurement.incorrect_response(t,this.current_task())})),h(3).to(2).on("Enter").if((t=>this.measurement.penalty_is_over())).do((t=>{this.measurement.start_measurement(this.current_task())})),h(4).to(1).on("Enter").if((t=>this.current_page_index<this.experiment_definition.tasks.length-1&&this.next_task().has_pre_task_description)).do((t=>{this.inc_current_experiment(),this.show_pre_task_info()})),h(4).to(2).on("Enter").if((t=>this.current_page_index<this.experiment_definition.tasks.length-1&&!this.next_task().has_pre_task_description)).do((t=>{this.inc_current_experiment(),this.measurement.start_measurement(this.current_task())})),h(2).to(5).on_any(this.measurement.accepted_responses()).if((t=>this.current_task().accepts_answer(t)&&this.current_page_index==this.experiment_definition.tasks.length-1)).do((t=>{this.measurement.stop_measurement(t,this.current_task()),this.show_outro()})),h(5).to(6).on("Enter").do((t=>{}))]}set_experiment_index(t){this.current_page_index=t,this.output_writer().print_string_to_page_number("Task "+(this.current_page_index+1)+" / "+this.experiment_definition.tasks.length)}inc_current_experiment(){this.set_experiment_index(++this.current_page_index)}init_experiment(){this.experiment_definition.init_experiment(!1)}show_pre_task_info(){this.output_writer().clear_stage(),this.output_writer().clear_error(),this.current_task().print_pre_task_info()}next_task(){return this.experiment_definition.tasks[this.current_page_index+1]}first_task(){return this.experiment_definition.tasks[0]}}class N extends R{constructor(t,e,n,i){super("Training",(()=>{t(),i.output_writer().print_html_on_stage("<hr>Press [Enter] to start training.")}),(()=>{i.output_writer().print_html_on_stage("You finished the training phase.<hr>"+(e.can_be_repeated?"Please, press [Enter] to run again a training session.<br>":"")+"Please, press [E] (capital E, i.e., [shift] + [e]) to enter the experiment phase.")}),n,i),this.training_configuration=e}print_cancel_text(){this.output_writer().clear_stage(),this.output_writer().print_string_to_page_number("Cancelled"),this.output_writer().print_html_on_stage("You cancelled this training session.<hr>Press [Enter] if you want to start another training session.<br>Press [E] (capital E!) if you want to start with the experiment.")}automata_configurator(){return new s([0,1,2,3,4,5,6,7],0,(()=>{}),this.transitions(),[6])}transitions(){let t=super.transitions(),e=[h(0).to(7).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((t=>{this.print_cancel_text()})),h(2).to(7).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((t=>{this.print_cancel_text()})),h(4).to(7).on("Escape").if((()=>this.current_page_index<this.experiment_definition.tasks.length-1&&this.training_configuration.can_be_cancelled)).do((t=>{this.print_cancel_text()})),h(7).to(6).on("E").do((()=>{})),h(7).to(0).on("Enter").do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),h(5).to(0).on("Enter").if((()=>this.training_configuration.can_be_repeated)).do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),h(5).to(6).on("E").do((t=>{}))];return t.splice(t.length-1),e.forEach((e=>t.push(e))),t}input(t){if(!["a","b","c"].includes(t)&&0!=this.automata.current_state)return super.input(t);super.input(t)}init_experiment(){this.training_configuration.init_experiment(this.experiment_definition)}}class P extends R{constructor(t,e,n){super("Main Experiment",(()=>{t(),n.output_writer().print_html_on_stage("<hr>Press [Enter] to start the experiment.")}),(()=>{n.output_writer().print_html_on_stage("You finished the experiment phase.<hr>Please, press [Enter] to go to the next phase.<br>")}),e,n)}}class B extends I{create_code_all_experiment_automatas(t){t.measurement.output_writer();let e=new O("Introduction",t.introduction_texts,t.measurement),n=new O("Finish",t.finish_texts,t.measurement);n.automata.add_finish_action((()=>t.finish_function(i.experiment_definition)));let i=new P(t.pre_run_experiment_output,this,t.measurement);i.init_experiment();let r=this.clone(),s=new N(t.pre_run_training_output,t.training_configuration,r,t.measurement);s.init_experiment();let o=null;null!=t.post_questionnaire&&(o=new p(t.post_questionnaire,t.measurement));let a=[];return null!=e&&a.push(e),0!=s.experiment_definition.tasks.length&&a.push(s),a.push(i),null!=o&&(a.push(o),i.experiment_definition.questionnaires.push(o)),a.push(n),new M(a)}clone(){return new B(this.template.experiment_name,this.is_training,this.treatments_combinator.clone(),this.template.variables,this.template.repetitions,this.measurement,this.template.task_creator)}}class L{constructor(t,e){this.variable=t,this.value=""+e}clone(){return new L(this.variable,this.value)}}function D(t,e,n){if(t.length>e.length)throw"Cannot loop both: first array has length: "+t.length+", but second has length "+e.length;let i=0;for(let r of t)n(r,e[i++])}function F(t){return new U(t)}class U{constructor(t){this.counter=t}and_collect(t){let e=[];for(let n=1;n<=this.counter;n++)e.push(t(n));return e}_times(t){for(let e=1;e<=this.counter;e++)t()}times(t){for(let e=1;e<=this.counter;e++)t(e)}}class W{constructor(t){this.treatment_combination=[],this.treatment_combination=t}clone(){let t=new W([]);for(let e of this.treatment_combination)t.treatment_combination.push(e.clone());return t}}class G{constructor(t){this.can_be_cancelled=!0,this.can_be_repeated=!0,void 0!==t&&(null!=t.fixed_treatments&&(this.fixed_treatments=t.fixed_treatments),this.can_be_cancelled=t.can_be_cancelled,this.can_be_repeated=t.can_be_repeated)}init_experiment(t){if(t.tasks=[],null!=this.fixed_treatments)for(let e of this.fixed_treatments){let n=new W([]);D(t.all_independent_variables(),e,((t,e)=>{n.treatment_combination.push(new L(t,e))}));let i=new C(n,t,"");i.is_training=!0,t.experiment_definition_task_creator(i),t.tasks.push(i)}else t.init_experiment(!0)}}class H{constructor(t,e){this.treatments=[],this.name=t;for(let t of e)this.treatments.push(new L(this,t))}}function Y(t,e,n){if(0==t.length)n(e);else{let i=t.shift();for(let r of i)e.push(r),Y(t,e,n),e.pop();t.unshift(i)}}function J(t,e){Y(t,[],e)}class K{constructor(){this.independent_variables=[]}push_variable(t,e){this.independent_variables.push(new H(t,e))}print_to_array(t){for(let e of this.independent_variables)t.push(e.name+";")}create_treatment_combinations(){let t=[];return J(this.independent_variables.map((t=>t.treatments)),(e=>{t.push(new W([...e]))})),t}get_variable_named(t){for(let e of this.independent_variables)if(e.name===t)return e;throw"Unknown independent variable named: "+t}static from_layout(t){let e=new K;for(let n of t)e.push_variable(n.variable,n.treatments);return e}}class z extends f{print_experiment_name(t){this.get_html_element_by_id("STATE").innerHTML=t}clear_error(){let t=["STAGE_ERROR"];for(let e of t){let t=document.getElementById(e);for(;t.firstChild;)t.removeChild(t.firstChild)}}clear_stage(){let t=["STAGE","STAGE_MSG","STAGE_ERROR"];for(let e of t){let t=document.getElementById(e);for(;t.firstChild;)t.removeChild(t.firstChild)}}clear_state(){let t=["STATE","TASK"];for(let e of t){let t=document.getElementById(e);for(;t.firstChild;)t.removeChild(t.firstChild)}}print_error_string_on_stage(t){this.get_html_element_by_id("STAGE_ERROR").innerHTML=t}get_html_element_by_id(t){return document.getElementById(t)}print_string_to_state(t){this.get_html_element_by_id("STATE").innerHTML=t}print_string_on_stage(t){this.print_html_on_stage("<p>"+t+"</p>")}ask_for_input(){let t=document.createElement("p"),e=document.createElement("label");e.setAttribute("type","text"),t.textContent="Answer: ",t.appendChild(e);let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("class","input"),t.appendChild(n),n.id="INPUT",this.get_html_element_by_id("STAGE").appendChild(t),n.focus()}set_focus_on_input(){this.get_html_element_by_id("INPUT").focus()}print_string_to_page_number(t){this.get_html_element_by_id("TASK").innerHTML=t}get_given_answer(){return this.get_html_element_by_id("INPUT").value}print_on_input_response(t){this.get_html_element_by_id("INPUT").value=t}create_html_element_from_string(t){return(new DOMParser).parseFromString(t,"text/html").body}print_html_on_stage(t){this.get_html_element_by_id("STAGE").appendChild(this.create_html_element_from_string(t))}print_html_on_error(t){this.get_html_element_by_id("STAGE_ERROR").appendChild(this.create_html_element_from_string(t))}}function Q(t){let e=[];if(0==t)return[];for(let n=1;n<=t;n++){let i=Q(t-n);for(let t of i){let i=[n];for(let e of t)i.push(e);e.push(i)}0==i.length&&e.push([t])}return e}function V(t,e){if(1==e)return[[t]];let n=[];for(let i=0;i<=t;i++){let r=V(t-i,e-1);for(let t of r){if(t.length!=e-1)throw"invalid partition!";let r=[i];for(let e of t)r.push(e);n.push(r)}0==r.length&&n.push([t])}return n}!function(){let t=[];t=Q(4),t=Q(0),console.log(t)}(),v("42");let X=2;function Z(e,n,i){if(1==i)return new st(E(e),X);{let r=T(n);n.push(r);let s=T(n);n.push(s);let o=E(function(t){let e=V(t,2),n=[];for(let t of e){let e=!0;for(let n of t)if(!(n>=1)){e=!1;break}if(e){if(2!=t.length&&console.log("strange"),2!=t.length)throw"wtf";n.push(t)}}return n}(i)),a=new nt(r,Z(e,n,o[0])),_=new nt(s,Z(e,n,o[1])),u=new ot(a,_);return u.init_position_with(new t(0)),u.init_position_subquery(new t(0)),u}}function $(t,e){let n=[];return F(t)._times((()=>n.push(function(t,e){let n=new tt(T(t),[]);return F(e)._times((()=>n.attributes.push(S(n.attributes)))),n}(n.map((t=>t.name)),e)))),n}class tt{constructor(t,e){this.name=t,this.attributes=e}random_qualified_attribute_string(){return this.name+"."+E(this.attributes)}random_qualified_attribute_strings_without_repetition(t){return this.random_attribute_strings_without_repetition(t).map((t=>this.name+"."+t))}random_attribute_strings_without_repetition(t){return j(this.attributes,t)}}class et{query_string_with_subqueries(){let t=[];return this.write_into_array_with_subqueries(t,0),t.join("")}inject_error(t,e){}query_string_with_WITH(){let t=[],e=[];return this.collect_sub_queries(e),this.write_subqueries(t,e),this.write_main_query_for_with(t),t.join("")}write_subqueries(t,e){let n=!0;t.push("WITH ");for(let i of e)n||t.push("\n"+" ".repeat(10)+"),\n"+" ".repeat(5)),n=!1,t.push(i.name+" AS (\n"),i.query.write_into_with(t,12);t.push("\n"+" ".repeat(10)+"),\n")}}class nt extends et{accessible_field_names(){return this.query.accessible_field_names().map((t=>this.name+"."+t[t.length-1]))}init_position_with(t){this.query.init_position_with(t)}init_position_subquery(t){this.query.init_position_subquery(t)}inject_error(t,e){this.query.inject_error(t,e)}constructor(t,e){super(),this.name=t,this.query=e}random_attribute_strings(t){return this.query.random_attribute_strings(t).map((t=>this.name+"."+t))}write_into_array_with_subqueries(t,e){t.push("(\n"),this.query.write_into_array_with_subqueries(t,e+4),t.push(" ".repeat(e)),t.push(") "+this.name+"\n")}collect_sub_queries(t){this.query.collect_sub_queries(t),t.push(this)}write_main_query_for_with(t){throw"should never be called"}}class it{constructor(t,e){this.qualified_string=t,this.rename=e}}class rt extends et{constructor(t){super(),this.explicit_projections=this.create_projections(t)}write_into_array_with_subqueries(t,e){t.push(" ".repeat(e)),t.push("SELECT "),t.push(this.explicit_projections.map((t=>t.qualified_string+" AS "+t.rename)).join(", ")+"\n")}create_projections(t){let e=[],n=[];for(let i of t){let t=S(e);e.push(t),n.push(new it(i,t))}return n}inject_error_into_selection(){throw"'inject_error_into_selection' not implemented"}}class st extends rt{accessible_field_names(){return this.explicit_projections.map((t=>this.from.name+"."+t.rename))}inject_error(t,e){"With"==e?this.position_with==t&&this.inject_error_into_selection():"Subquery"==e&&this.position_subquery==t&&this.inject_error_into_selection()}inject_error_into_selection(){let t=S(this.from.attributes);E(this.explicit_projections).qualified_string=t}init_position_with(t){this.position_with=++t.value}init_position_subquery(t){this.position_subquery=++t.value}write_main_query_for_with(t){throw new Error("Method not implemented.")}write_into_with(t,e){t.push(" ".repeat(e)),t.push("SELECT "),t.push(this.explicit_projections.map((t=>t.qualified_string+" AS "+t.rename)).join(", ")+"\n"),t.push(" ".repeat(e)),t.push("FROM "),t.push(this.from.name)}constructor(t,e){super(t.random_attribute_strings_without_repetition(e)),this.from=t}random_attribute_strings(t){return j(this.explicit_projections.map((t=>t.rename)),t)}write_into_array_with_subqueries(t,e){super.write_into_array_with_subqueries(t,e),t.push(" ".repeat(e)),t.push("FROM "),t.push(this.from.name+"\n")}collect_sub_queries(t){}}class ot extends rt{accessible_field_names(){return this.left_query.accessible_field_names().concat(this.right_query.accessible_field_names())}inject_error_into_selection(){let t=this.accessible_field_names(),e=E(this.explicit_projections);e.qualified_string=e.qualified_string[0]+"."+S(t.filter((t=>t[0]==e.qualified_string[0])).map((t=>t[t.length-1])))}inject_error_into_on(){let t=this.accessible_field_names();1==q(2)?this.on_left=this.on_left[0]+"."+S(t.filter((t=>t[0]==this.on_left)).map((t=>t[t.length-1]))):this.on_right=this.on_right[0]+"."+S(t.filter((t=>t[0]==this.on_right)).map((t=>t[t.length-1])))}inject_error(t,e){if("With"==e){if(this.position_with==t)return void this.inject_error_into_selection();if(this.position_with_on==t)return void this.inject_error_into_on()}else if("Subquery"==e){if(this.position_subquery==t)return void this.inject_error_into_selection();if(this.position_subquery_on==t)return void this.inject_error_into_on()}this.left_query.inject_error(t,e),this.right_query.inject_error(t,e)}init_position_with(t){this.left_query.init_position_with(t),this.right_query.init_position_with(t),this.position_with=++t.value,this.position_with_on=++t.value}init_position_subquery(t){this.position_subquery=++t.value,this.left_query.init_position_subquery(t),this.right_query.init_position_subquery(t),this.position_subquery_on=++t.value}write_main_query_for_with(t){t.push("SELECT "),t.push(this.explicit_projections.map((t=>t.qualified_string+" AS "+t.rename)).join(", ")+"\n"),t.push("FROM "+this.left_query.name+" JOIN "+this.right_query.name+"\n"),t.push(" ".repeat(5)+"ON ("+this.on_as_string()+")")}write_into_with(t,e){t.push(" ".repeat(e)+"SELECT "),t.push(this.explicit_projections.map((t=>t.qualified_string+" AS "+t.rename)).join(", ")+"\n"),t.push(" ".repeat(e)),t.push("FROM "+this.left_query.name+" JOIN "+this.right_query.name+"\n"),t.push(" ".repeat(e)),t.push("ON ("+this.on_as_string()+")")}collect_sub_queries(t){this.left_query.collect_sub_queries(t),this.right_query.collect_sub_queries(t)}constructor(t,e){super([]),this.left_query=t,this.right_query=e,this.explicit_projections=this.create_random_projections(X),this.on_left=this.left_query.random_attribute_strings(1)[0],this.on_right=this.right_query.random_attribute_strings(1)[0]}create_random_projections(t){let e=E(V(t,2)),n=this.left_query.random_attribute_strings(e[0]),i=this.right_query.random_attribute_strings(e[1]);return this.create_projections(k(n.concat(i)))}random_attribute_strings(t){return k(j(this.explicit_projections,t)).map((t=>t.rename))}write_into_array_with_subqueries(t,e){super.write_into_array_with_subqueries(t,e),t.push(" ".repeat(e)),t.push("FROM "),this.left_query.write_into_array_with_subqueries(t,e+5),t.push(" ".repeat(e)),t.push("JOIN "),this.right_query.write_into_array_with_subqueries(t,e+5),t.push(" ".repeat(e)),t.push("ON ("+this.on_as_string()+")\n")}on_as_string(){return this.on_left+" = "+this.on_right}}let at=$(5,5),_t=at.map((t=>t.name));!function(t,e){for(let t=0;t<5;t++)e(t)}(0,(t=>{let e=Z(at,_t,3);1==t&&(e.inject_error(4,"With"),console.log(e.query_string_with_WITH()),console.log("************************************************"),console.log("dummy"))})),v("42"),function(){let t=new z,e={experiment_name:"SQL-WithVersusSubquery",seed:"42",introduction_pages:[()=>n.print_string_on_stage("Thank you for participating in the experiment. Just check, whether each shown SQL statement is valid.<br><br>Press [1] for valid, press [0] for invalid.")],pre_run_training_instructions:(n=t).string_page_command("You entered the training phase. You can skip the training by pressing [Esc]."),pre_run_experiment_instructions:n.string_page_command("You entered the experiment phase."),post_questionnaire:[d("Age","What's your age??",["younger than 18","between 18 and (excluding) 25","between 25 and (excluding) 30","between 30 and (excluding) 35","between 35 and (excluding) 40","40 or older"]),d("Status","What is your current working status?",["Undergraduate student (BSc not yet finished)","Graduate student (at least BSc finished)","PhD student","Professional software developer","Teacher","Other"]),d("Studies","In case you study, what's your subject?",["I do not study","Computer science","computer science related (such as information systems, aka WiInf)","something else in natural sciences","something else"]),d("YearsOfExperience","How many years of experience do you have in software industry?",["none","less than or equal 1 year","more than 1 year, but less than or equal 3 years","more than 3 years, but less than or equal 5 year","more than 5 years"]),d("impression","What statement describes best your impression \n of the experiment?",["I do not think that there was a difference between the notations","The inference notation made it slightly easier for me","Java made it slightly easier for me","The inference notation made it much easier for me","Java made it much easier for me"])],training_configuration:{can_be_cancelled:!0,can_be_repeated:!0},finish_pages:[n.string_page_command("<p>Almost done. Next, the experiment data will be downloaded (after pressing [Enter]).<br><br>Please, send the downloaded file to the experimenter: <a href='mailto:stefan.hanenberg@uni-due.de'>stefan.hanenberg@uni-due.de</a></p><p>By sending that mail, you agree that your (anonymized) data will be used for scientific analyses where your data (together with others in an anonymized way) will be published.<br><br>I.e., you agree with the information sheet, see <a href='https://github.com/shanenbe/Experiments/blob/main/2024_TypeSystems_ConstructorCall_Flat/Agreement.pdf' target='_blank'>here</a>. Note, that it it no longer necessary to send a signed version of the agreement to the experimenter.<br><br>After sending your email, you can close this window.</p><p>Many thanks for your participation.<br>-Stefan Hanenberg</p>")],layout:[{variable:"Format",treatments:["With","Subquery"]},{variable:"Error_position",treatments:["0","1","2","3","4"]}],repetitions:5,measurement:(r=["0","1"],i=t=>new y(r,t),t=>new w(i(t))),task_configuration:t=>{X=2;let e,i=$(3,3),r=i.map((t=>t.name)),s=Z(i,r,2),o=function(t){let e=[];for(let n of t)e.push(n.name+"("),e.push(n.attributes.join(", ")),e.push(")\n");return e.join("")}(i);"0"!=t.treatment_value("Error_position")&&s.inject_error(parseInt(t.treatment_value("Error_position")),t.treatment_value("Format")),e="With"==t.treatment_value("Format")?s.query_string_with_WITH():s.query_string_with_subqueries(),t.expected_answer="0"==t.treatment_value("Error_position")?"1":"0",t.do_print_task=()=>{n.clear_stage(),n.print_html_on_stage("<div class='sourcecode'>"+n.convert_string_to_html_string(o)+n.convert_string_to_html_string("\n\n")+n.convert_string_to_html_string(e)+n.convert_string_to_html_string("\n\n")+"</div>")},t.accepts_answer=t=>!0,t.do_print_after_task_information=()=>{n.print_error_string_on_stage(n.convert_string_to_html_string("The correct answer was: "+t.expected_answer+"\n\nIn case, you feel not concentrated enough, make a short break.\n\nPress [Enter] to go on. "))}}};var n,i,r;v(e.seed);let s=e.measurement(t),o=function(t){let e=K.from_layout(t.layout),n=new A(e,t.repetitions),i=new B(t.experiment_name,!1,n,e,t.repetitions,t.measurement,t.task_configuration),r=new G(t.training_configuration);return i.create_code_all_experiment_automatas({seed:t.seed,introduction_texts:t.introduction_pages,post_questionnaire:t.post_questionnaire,pre_run_training_output:t.pre_run_training_output,training_configuration:r,pre_run_experiment_output:t.pre_run_experiment_output,finish_texts:t.finish_pages,measurement:t.measurement,finish_function:t.finish_function})}({experiment_name:e.experiment_name,seed:e.seed,introduction_pages:e.introduction_pages,post_questionnaire:e.post_questionnaire,pre_run_training_output:e.pre_run_training_instructions,training_configuration:e.training_configuration,pre_run_experiment_output:e.pre_run_experiment_instructions,finish_pages:e.finish_pages,layout:e.layout,repetitions:e.repetitions,task_configuration:e.task_configuration,measurement:s,finish_function:t=>{document.removeEventListener("keydown",a),function(t,e){const n=new Blob(e,{type:"application/ssc"}),i=window.document.createElement("a");i.href=window.URL.createObjectURL(n),i.download="experimentdata.csv",document.body.appendChild(i),i.click(),document.body.removeChild(i)}(0,t.generate_csv_data())}}),a=t=>{let e=(i="","Alt"==(n=t).key&&n.ctrlKey?"Alt+Ctrl":"Control"==n.key&&n.altKey?"Ctrl+Alt":(i+=n.altKey?"+Alt":"",i+=n.ctrlKey?"+Control":"","Alt"==n.key?"Alt":""+n.key+i));var n,i;o.input(e)};document.addEventListener("keydown",a,!1),o.set_active()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,