(()=>{"use strict";function e(e,t){return-1!=e.indexOf(t)}!function(e,t,n){var r,i=256,s="random",a=n.pow(i,6),o=n.pow(2,52),l=2*o,c=i-1;function _(c,_,f){var b=[],g=m(p((_=1==_?{entropy:!0}:_||{}).entropy?[c,d(t)]:null==c?function(){try{r=require("crypto");var n=crypto.randomByte;return r&&(n=r.randomBytes)?n=n(i):(n=new Uint8Array(i),(e.crypto||e.msCrypto).getRandomValues(n)),d(n)}catch(n){var s=e.navigator,a=s&&s.plugins;return[+new Date,e,a,e.screen,d(t)]}}():c,3),b),v=new u(b),w=function(){for(var e=v.g(6),t=a,n=0;e<o;)e=(e+n)*i,t*=i,n=v.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return w.int32=function(){return 0|v.g(4)},w.quick=function(){return v.g(4)/4294967296},w.double=w,m(d(v.S),t),(_.pass||f||function(e,t,r,i){return i&&(i.S&&h(i,v),e.state=function(){return h(v,{})}),r?(n[s]=e,t):e})(w,g,"global"in _?_.global:this==n,_.state)}function u(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,o=r.S=[];for(n||(e=[n++]);s<i;)o[s]=s++;for(s=0;s<i;s++)o[s]=o[a=c&a+e[s%n]+(t=o[s])],o[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,o=r.S;e--;)t=o[s=c&s+1],n=n*i+o[c&(o[s]=o[a=c&a+t])+(o[a]=t)];return r.i=s,r.j=a,n})(i)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function p(e,t){var n,r=[],i=typeof e;if(t&&"object"==i)for(n in e)try{r.push(p(e[n],t-1))}catch(e){}return r.length?r:"string"==i?e:e+"\0"}function m(e,t){for(var n,r=e+"",i=0;i<r.length;)t[c&i]=c&(n^=19*t[c&i])+r.charCodeAt(i++);return d(t)}function d(e){return String.fromCharCode.apply(0,e)}if(m(n.random(),t),"object"==typeof module&&module.exports){module.exports=_,n["seed"+s]=_;try{r=require("crypto")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return _})):n["seed"+s]=_}("undefined"!=typeof self?self:void 0,[],Math),console.log("RANDOM_INIT");class t{constructor(e){this.set_active_function=()=>{},this.forwarder_name=e}input(e){this.automata.input(e)}add_activation_function(e){}set_active(){}}class n{constructor(e){this.current_state=-1,this.transitions=[],this.states=[],this.start_state=e.start,this.states=e.states;for(let e=0;e<this.states.length;e++)this.transitions.push([]);for(let t of e.transitions){null==this.transitions&&console.log("Something is wrong here"),null!=this.transitions&&null!=t.from||console.log("Something is wrong here"),null==this.transitions[t.from]&&console.log("Something is wrong here");try{this.transitions[t.from].push(t)}catch(e){console.log("weird")}}this.init_function=e.init_function,this.end_states=e.end_states}input(e){let t=this.first_match(e),n=this.current_state;null!=t&&(this.current_state=t.next_state,t.action(n,e,this.current_state))}start(){this.current_state=this.start_state}first_match(e){for(let t=0;t<this.transitions[this.current_state].length;t++)if(this.transitions[this.current_state][t].accepts(e))return this.transitions[this.current_state][t];return null}initialize(){this.current_state=this.start_state,this.init_function()}add_finish_action(e){for(let t of this.transitions)for(let n of t)if(this.is_transition_to_end(n)){let t=n.action;n.action=(n,r,i)=>{t(n,r,i),e()}}}is_transition_to_end(t){return e(this.end_states,t.next_state)}add_action_to_transitions(e,t){for(let n of this.transitions)for(let r of n)if(e(r)){let e=r.action;r.action=(n,r,i)=>{e(n,r,i),t()}}}}class r extends t{constructor(e,t,n,r){super(e),this.pre_run_instructions=n,this.post_run_instructions=r,this.measurement=t,this.automata=this.create_automata(),this.automata.initialize()}set_active(){this.show_intro()}create_automata(){return new n(this.automata_configurator())}output_writer(){return this.measurement.output_writer()}show_intro(){this.output_writer().clear_all(),this.output_writer().print_string_to_state(this.forwarder_name),this.pre_run_instructions()}empty_screen_and_show_instructions(e){this.output_writer().clear_state(),this.output_writer().clear_stage(),null==e||null==e?console.log("something is strange"):e()}}class i{constructor(e,t,n,r,i){this.states=e,this.start=t,this.init_function=n,this.transitions=r,this.end_states=i}}class s{}class a extends s{constructor(e){super(),this.acceptor_function=e}accepts(e){return this.acceptor_function(e)}}class o{constructor(e,t,n,r){this.from=e,this.acceptor=t,this.next_state=n,this.action=r}is_valid_input(e){return this.acceptor.accepts(e)}accepts(e){return this.acceptor.accepts(e)}}function l(e,t,n,r){return new o(e,new a(t),n,((e,t,n)=>r(t)))}function c(t){return{to:n=>({on:e=>({if:r=>({do:i=>l(t,(t=>t==e&&r(t)),n,i)}),do:r=>l(t,(t=>t==e),n,r)}),on_any:r=>({if:i=>({do:s=>l(t,(t=>e(r,t)&&i(t)),n,s)}),do:i=>l(t,(t=>e(r,t)),n,i)})})}}class _{constructor(e,t){this.answer=null,this.variable_name=e,this.question_text=t}store_answer(){let e=document.getElementById(this.variable_name);this.answer=e.value}}class u extends _{constructor(e,t,n){super(e,t),this.alternatives=n}input_html(){let e='<select id="'+this.variable_name+'">';e+="<option disabled selected value> -- select an option -- </option>";let t=0;return this.alternatives.forEach((n=>e+="<option value="+t+++">"+n+"</option>")),e+="</select>",e}store_answer(){let e=document.getElementById(this.variable_name);this.answer=this.alternatives[e.value]}}class h extends r{constructor(e,t){super("Questionnaire",t,(()=>t.output_writer().print_html_on_stage("Please, answer the following questions.<br>")),(()=>t.output_writer().print_html_on_stage("Thank you for answering the questions."))),this.current_question_number=-1,this.questions=e}automata_configurator(){return new i([0,1,2,3,4],0,(()=>{}),this.transitions(),[4])}transitions(){return[c(0).to(4).on("DONE").if((e=>!0)).do((e=>{this.add_result_to_question(),console.log("dummy")}))]}show_intro(){super.show_intro();let e=this.create_questionnaire_html_string();this.output_writer().print_html_on_stage(e),document.getElementById("DONE").onclick=()=>this.input("DONE")}show_outro(){}create_questionnaire_html_string(){let e="<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>";return this.questions.forEach((t=>e+="<tr><td>"+t.question_text+"</td><td>"+t.input_html()+"</td></tr>")),e+="</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>",e}add_result_to_question(){for(let e of this.questions)e.store_answer()}}var p;function m(e,t,n){return new u(e,t,n)}!function(e){e[e.STRING=1]="STRING",e[e.NUMBER=2]="NUMBER"}(p||(p={}));class d{convert_string_to_html_string(e){return function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/\n/g,"<br/>").replace(/ /g,"&nbsp;")}(e)}string_page_command(e){return()=>this.print_string_on_stage(e)}stage_string_pages_commands(e){let t=[];for(let n of e)t.push(this.string_page_command(n));return t}get_given_answer(e){return e}print_on_input_response(e){}set_focus_on_input(){}clear_all(){this.clear_state(),this.clear_stage()}}class f{constructor(e){this.input_type=e}accepted_responses(){return this.input_type.accepted_responses()}given_answer(e){return this.input_type.given_answer(e)}start_measurement(e){this.start_time=(new Date).getTime().valueOf(),e.print_task()}stop_measurement(e,t){let n=(new Date).getTime().valueOf();t.given_answer=this.input_type.get_given_answer(e),t.required_milliseconds=n-this.start_time,t.do_print_after_task_information()}incorrect_response(e,t){let n=(new Date).getTime().valueOf(),r=t.experiment_definition.measurement.get_given_answer(e);t.invalid_answers.push([r,n-this.start_time]),t.do_print_error_message(this.input_type.get_given_answer(e))}output_writer(){return this.input_type.output_writer}get_given_answer(e){return this.input_type.get_given_answer(e)}demands_penalty(){return!1}penalty_is_over(){return!0}}class b extends f{constructor(e){super(e)}}class g{constructor(e){this.output_writer=e}print_input_request(){this.output_writer.ask_for_input()}get_given_answer(e){return this.output_writer.get_given_answer(e)}}class v extends g{constructor(e,t){super(t),this.accepted_keys=e}accepted_responses(){return this.accepted_keys}given_answer(e){return e}print_input_request(){}get_given_answer(e){return e}}const w=new class{constructor(){Math.seedrandom("1234567890")}new_random_integer(e){return Math.trunc(e*Math.random())}set_seed(e){Math.seedrandom(e)}};function y(e){w.set_seed(e)}function k(e){return w.new_random_integer(e)}function x(e){let t=k(e.length),n=e[t];return e.splice(t,1),n}function E(e){return e[k(e.length)]}function q(e){for(;;){let t=String.fromCharCode(97+k(26));if(!e.includes(t))return t}}console.log("DONE");class T{constructor(e,t,n){this.expected_answer="",this.given_answer="",this.required_milliseconds=null,this.task_number_in_execution=-1,this.invalid_answers=[],this.is_training=!1,this.has_pre_task_description=!1,this.do_print_task=()=>{throw new Error("Method not implemented.")},this.do_print_pre_task=()=>{throw new Error("Method not implemented.")},this.do_print_error_message=()=>{throw new Error("Method not implemented.")},this.accepts_answer_function=e=>!0,this.do_print_after_task_information=()=>{throw new Error("Method not implemented.")},this.treatment_combination=e,this.experiment_definition=t}accepts_answer(e){let t=this.experiment_definition.measurement.get_given_answer(e);return this.accepts_answer_function(t)}next_task(){return this.task_number_in_execution<this.experiment_definition.tasks.length?this.experiment_definition.tasks[this.task_number_in_execution]:null}html_string_with_cmd(e,t){}html_node_with_cmd(e,t){}after_task_string_constructor(e){}print_task(){this.do_print_task(),this.print_input_request()}print_pre_task_info(){this.do_print_pre_task()}print_input_request(){this.experiment_definition.measurement.input_type.print_input_request()}treatment_value(e){for(let t of this.treatment_combination.treatment_combination)if(t.variable.name===e)return t.value;throw"Unknown treatment: "+e}set_computed_variable_value(e,t){for(let n of this.treatment_combination.treatment_combination)if(n.variable.name===e)return void(n.value=t);throw"Unknown treatment: "+e}}class R{constructor(e,t){this.variables=e,this.repetitions=t}clone(){return new R(this.variables,this.repetitions)}create_treatment_combinations(){let e=[];for(let t=0;t<this.repetitions;t++)e=e.concat(this.variables.create_treatment_combinations());return e}create_tasks(e){let t=[];for(let n of this.create_treatment_combinations()){let r=new T(n.clone(),e,"");try{e.experiment_definition_task_creator(r)}catch(t){console.log("halt"),e.experiment_definition_task_creator(r)}r.is_training=e.is_training,t.push(r)}return function(e){let t=[...e],n=[];for(;t.length>0;)n.push(t.splice(k(t.length),1)[0]);return n}(t)}get_variable_named(e){return this.variables.get_variable_named(e)}}class C{constructor(e,t,n,r,i,s,a){this.questionnaires=[],this.tasks=[],this.experiment_name=e,this.is_training=t,this.template={experiment_name:e,variables:r,repetitions:i,task_creator:a},this.treatments_combinator=n,this.variables=r,this.measurement=s,this.experiment_definition_task_creator=a}init_experiment(e){this.tasks=this.treatments_combinator.create_tasks(this)}all_independent_variables(){return this.variables.independent_variables}generate_csv_data(){let e=[];for(let t of this.questionnaires)for(let n of t.questions)e.push('"'+n.variable_name+'";');this.variables.print_to_array(e),e.push("number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\n");for(let t of this.tasks){for(let t of this.questionnaires)for(let n of t.questions)e.push('"'+n.answer+'";');for(let n of t.treatment_combination.treatment_combination)e.push(n.value+";");e.push(t.invalid_answers.length+1+";"),e.push(t.expected_answer+";"),e.push(t.given_answer+";"),e.push((t.given_answer==t.expected_answer)+";"),e.push(t.required_milliseconds+";"),t.invalid_answers.forEach((t=>e.push(t[0]+";"+t[1]+";"))),e.push("\n")}return e}}class O extends r{constructor(e,t,n){super(e,n,t[0],t[t.length-1]),this.current_page_number=-1,this.pages=t,this.create_automata()}set_page_index(e){this.current_page_number=e,this.empty_screen_and_show_instructions(this.pages[this.current_page_number]),this.output_writer().print_string_to_state(this.forwarder_name),this.output_writer().print_string_to_page_number("Page "+(this.current_page_number+1)+" / "+this.pages.length);let t="<hr>";e>0&&(t+="[&#8592] = previous page"),e<this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[&#8594] = next page"),e==this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[Enter] = Finish"),this.output_writer().print_html_on_stage(t)}set_active(){super.set_active()}show_intro(){this.set_page_index(0)}show_outro(){}automata_configurator(){return new i([0,1],0,(()=>{}),this.transitions(),[1])}transitions(){return[c(0).to(0).on("ArrowRight").if((e=>this.current_page_number<this.pages.length-1)).do((e=>{this.set_page_index(++this.current_page_number)})),c(0).to(0).on("ArrowLeft").if((e=>this.current_page_number>0)).do((e=>{this.set_page_index(--this.current_page_number)})),c(0).to(1).on("Enter").if((e=>this.current_page_number>=this.pages.length-1)).do((e=>{}))]}}class S extends t{constructor(e){super("Default Sequential Forwarder Forwader"),this.current_forwarder_index=0,this.forwarders=e;for(let t of e)t.automata.add_finish_action((()=>this.automata.input("switch to next state")));var t,r,s;this.automata=(t=[0,1],r=()=>{},s=[c(0).to(0).on("switch to next state").if((()=>this.current_forwarder_index<this.forwarders.length-1)).do((()=>{this.current_forwarder_index++,this.current_forwarder().set_active()})),c(0).to(1).on("switch to next state").if((()=>this.current_forwarder_index==this.forwarders.length-1)).do((()=>{}))],new n(new i(t,0,r,s,[1]))),this.automata.initialize()}input(e){this.forwarders[this.current_forwarder_index].input(e)}input_sequence(e){for(let t of e)this.input(t)}current_forwarder(){return this.forwarders[this.current_forwarder_index]}set_active(){super.set_active(),this.current_forwarder().set_active()}}class j extends r{show_intro(){this.empty_screen_and_show_instructions(this.pre_run_instructions),this.output_writer().print_experiment_name(this.forwarder_name)}show_outro(){this.empty_screen_and_show_instructions(this.post_run_instructions)}automata_configurator(){return new i([0,1,2,4,5,6],0,(()=>{}),this.transitions(),[6])}current_task(){return this.experiment_definition.tasks[this.current_page_index]}constructor(e,t,n,r,i){super(e,i,t,n),this.current_page_index=-1,this.experiment_definition=r}automata_configuration(){return new i([0,1,2,4,5,6],0,(()=>{}),this.transitions(),[6])}transitions(){return[c(0).to(2).on("Enter").if((e=>!this.first_task().has_pre_task_description)).do((e=>{this.set_experiment_index(0),this.measurement.start_measurement(this.current_task())})),c(0).to(1).on("Enter").if((e=>this.first_task().has_pre_task_description)).do((e=>{this.set_experiment_index(0),this.show_pre_task_info()})),c(0).to(5).on("Delete").do((e=>{this.show_outro()})),c(1).to(2).on("Enter").do((e=>{this.measurement.start_measurement(this.current_task())})),c(2).to(2).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&!this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),c(2).to(5).on("?+Control").if((e=>!0)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),c(2).to(4).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index<this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task())})),c(2).to(3).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),c(3).to(2).on("Enter").if((e=>this.measurement.penalty_is_over())).do((e=>{this.measurement.start_measurement(this.current_task())})),c(4).to(1).on("Enter").if((e=>this.current_page_index<this.experiment_definition.tasks.length-1&&this.next_task().has_pre_task_description)).do((e=>{this.inc_current_experiment(),this.show_pre_task_info()})),c(4).to(2).on("Enter").if((e=>this.current_page_index<this.experiment_definition.tasks.length-1&&!this.next_task().has_pre_task_description)).do((e=>{this.inc_current_experiment(),this.measurement.start_measurement(this.current_task())})),c(2).to(5).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index==this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),c(5).to(6).on("Enter").do((e=>{}))]}set_experiment_index(e){this.current_page_index=e,this.output_writer().print_string_to_page_number("Task "+(this.current_page_index+1)+" / "+this.experiment_definition.tasks.length)}inc_current_experiment(){this.set_experiment_index(++this.current_page_index)}init_experiment(){this.experiment_definition.init_experiment(!1)}show_pre_task_info(){this.output_writer().clear_stage(),this.output_writer().clear_error(),this.current_task().print_pre_task_info()}next_task(){return this.experiment_definition.tasks[this.current_page_index+1]}first_task(){return this.experiment_definition.tasks[0]}}class A extends j{constructor(e,t,n,r){super("Training",(()=>{e(),r.output_writer().print_html_on_stage("<hr>Press [Enter] to start training.")}),(()=>{r.output_writer().print_html_on_stage("You finished the training phase.<hr>"+(t.can_be_repeated?"Please, press [Enter] to run again a training session.<br>":"")+"Please, press [E] (capital E, i.e., [shift] + [e]) to enter the experiment phase.")}),n,r),this.training_configuration=t}print_cancel_text(){this.output_writer().clear_stage(),this.output_writer().print_string_to_page_number("Cancelled"),this.output_writer().print_html_on_stage("You cancelled this training session.<hr>Press [Enter] if you want to start another training session.<br>Press [E] (capital E!) if you want to start with the experiment.")}automata_configurator(){return new i([0,1,2,3,4,5,6,7],0,(()=>{}),this.transitions(),[6])}transitions(){let e=super.transitions(),t=[c(0).to(7).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),c(2).to(7).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),c(4).to(7).on("Escape").if((()=>this.current_page_index<this.experiment_definition.tasks.length-1&&this.training_configuration.can_be_cancelled)).do((e=>{this.print_cancel_text()})),c(7).to(6).on("E").do((()=>{})),c(7).to(0).on("Enter").do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),c(5).to(0).on("Enter").if((()=>this.training_configuration.can_be_repeated)).do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),c(5).to(6).on("E").do((e=>{}))];return e.splice(e.length-1),t.forEach((t=>e.push(t))),e}input(e){if(!["a","b","c"].includes(e)&&0!=this.automata.current_state)return super.input(e);super.input(e)}init_experiment(){this.training_configuration.init_experiment(this.experiment_definition)}}class I extends j{constructor(e,t,n){super("Main Experiment",(()=>{e(),n.output_writer().print_html_on_stage("<hr>Press [Enter] to start the experiment.")}),(()=>{n.output_writer().print_html_on_stage("You finished the experiment phase.<hr>Please, press [Enter] to go to the next phase.<br>")}),t,n)}}class N extends C{create_code_all_experiment_automatas(e){e.measurement.output_writer();let t=new O("Introduction",e.introduction_texts,e.measurement),n=new O("Finish",e.finish_texts,e.measurement);n.automata.add_finish_action((()=>e.finish_function(r.experiment_definition)));let r=new I(e.pre_run_experiment_output,this,e.measurement);r.init_experiment();let i=this.clone(),s=new A(e.pre_run_training_output,e.training_configuration,i,e.measurement);s.init_experiment();let a=null;null!=e.post_questionnaire&&(a=new h(e.post_questionnaire,e.measurement));let o=[];return null!=t&&o.push(t),0!=s.experiment_definition.tasks.length&&o.push(s),o.push(r),null!=a&&(o.push(a),r.experiment_definition.questionnaires.push(a)),o.push(n),new S(o)}clone(){return new N(this.template.experiment_name,this.is_training,this.treatments_combinator.clone(),this.template.variables,this.template.repetitions,this.measurement,this.template.task_creator)}}class M{constructor(e,t){this.variable=e,this.value=""+t}clone(){return new M(this.variable,this.value)}}function B(e,t,n){if(e.length>t.length)throw"Cannot loop both: first array has length: "+e.length+", but second has length "+t.length;let r=0;for(let i of e)n(i,t[r++])}function D(e){return new P(e)}class P{constructor(e){this.array=e}do(e){for(let t of this.array)e(t)}do_with_counter(e){for(let t=0;t<this.array.length;t++)e(this.array[t],t)}}function U(e){return new z(e)}class z{constructor(e){this.counter=e}and_collect(e){let t=[];for(let n=1;n<=this.counter;n++)t.push(e(n));return t}_times(e){for(let t=1;t<=this.counter;t++)e()}times(e){for(let t=1;t<=this.counter;t++)e(t)}_do(e){for(let t=1;t<=this.counter;t++)e(t)}}class G{constructor(e){this.treatment_combination=[],this.treatment_combination=e}clone(){let e=new G([]);for(let t of this.treatment_combination)e.treatment_combination.push(t.clone());return e}}class V{constructor(e){this.can_be_cancelled=!0,this.can_be_repeated=!0,void 0!==e&&(null!=e.fixed_treatments&&(this.fixed_treatments=e.fixed_treatments),this.can_be_cancelled=e.can_be_cancelled,this.can_be_repeated=e.can_be_repeated)}init_experiment(e){if(e.tasks=[],null!=this.fixed_treatments)for(let t of this.fixed_treatments){let n=new G([]);B(e.all_independent_variables(),t,((e,t)=>{n.treatment_combination.push(new M(e,t))}));let r=new T(n,e,"");r.is_training=!0,e.experiment_definition_task_creator(r),e.tasks.push(r)}else e.init_experiment(!0)}}class F{constructor(e,t){this.treatments=[],this.name=e;for(let e of t)this.treatments.push(new M(this,e))}}function L(e,t,n){if(0==e.length)n(t);else{let r=e.shift();for(let i of r)t.push(i),L(e,t,n),t.pop();e.unshift(r)}}function H(e,t){L(e,[],t)}class J{constructor(){this.independent_variables=[]}push_variable(e,t){this.independent_variables.push(new F(e,t))}print_to_array(e){for(let t of this.independent_variables)e.push(t.name+";")}create_treatment_combinations(){let e=[];return H(this.independent_variables.map((e=>e.treatments)),(t=>{e.push(new G([...t]))})),e}get_variable_named(e){for(let t of this.independent_variables)if(t.name===e)return t;throw"Unknown independent variable named: "+e}static from_layout(e){let t=new J;for(let n of e)t.push_variable(n.variable,n.treatments);return t}}class Y extends d{print_experiment_name(e){this.get_html_element_by_id("STATE").innerHTML=e}clear_error(){let e=["STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_stage(){let e=["STAGE","STAGE_MSG","STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_state(){let e=["STATE","TASK"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}print_error_string_on_stage(e){this.get_html_element_by_id("STAGE_ERROR").innerHTML=e}get_html_element_by_id(e){return document.getElementById(e)}print_string_to_state(e){this.get_html_element_by_id("STATE").innerHTML=e}print_string_on_stage(e){this.print_html_on_stage("<p>"+e+"</p>")}ask_for_input(){let e=document.createElement("p"),t=document.createElement("label");t.setAttribute("type","text"),e.textContent="Answer: ",e.appendChild(t);let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("class","input"),e.appendChild(n),n.id="INPUT",this.get_html_element_by_id("STAGE").appendChild(e),n.focus()}set_focus_on_input(){this.get_html_element_by_id("INPUT").focus()}print_string_to_page_number(e){this.get_html_element_by_id("TASK").innerHTML=e}get_given_answer(){return this.get_html_element_by_id("INPUT").value}print_on_input_response(e){this.get_html_element_by_id("INPUT").value=e}create_html_element_from_string(e){return(new DOMParser).parseFromString(e,"text/html").body}print_html_on_stage(e){this.get_html_element_by_id("STAGE").appendChild(this.create_html_element_from_string(e))}print_html_on_error(e){this.get_html_element_by_id("STAGE_ERROR").appendChild(this.create_html_element_from_string(e))}}function K(e){let t=[];if(0==e)return[];for(let n=1;n<=e;n++){let r=K(e-n);for(let e of r){let r=[n];for(let t of e)r.push(t);t.push(r)}0==r.length&&t.push([e])}return t}function W(e,t){if(1==t)return[[e]];let n=[];for(let r=0;r<=e;r++){let i=W(e-r,t-1);for(let e of i){if(e.length!=t-1)throw"invalid partition!";let i=[r];for(let t of e)i.push(t);n.push(i)}0==i.length&&n.push([e])}return n}!function(){let e=[];e=K(4),e=K(0),console.log(e)}();class Q{pull_random_word(){return this.words.splice(k(this.words.length),1)[0]}pull_n_random_words(e){return this.pull_n_random_formatted_words(e,(e=>e))}pull_n_random_formatted_words(e,t){let n=[];for(let r=0;r<e;r++)n.push(t(this.pull_random_word()));return n}max_word_length(){return Math.max.apply(null,this.words.map((e=>e.length)))}min_word_length(){return Math.min.apply(null,this.words.map((e=>e.length)))}generate_composite_identifier_of_length(e){if(e<=5)return E(this.words.filter((t=>t.length==e)));let t=Math.floor(e/2);return this.generate_composite_identifier_of_length(t)+this.generate_composite_identifier_of_length(e-t)}get_random_word_of_length(e){let t=E(this.words.filter((t=>t.length==e)));if(null==t)throw"shit";return t}get_random_word_list(e,t){let n=this.min_word_length(),r=this.max_word_length(),i=[],s=E(function(e,t){let i=W(e,t),s=[];for(let e of i){let i=!0;for(let t of e)if(!((a=t)>=n&&a<=r)){i=!1;break}if(i){if(e.length!=t&&console.log("strange"),e.length!=t)throw"wtf";s.push(e)}}var a;return s}(t,e));for(let e of s)i.push(this.get_random_word_of_length(e));return i}replace_letters_starting_at(e,t,n){let r=e.slice(0,n);r+=q([e[n]]);let i=e.slice(n+1,e.length);return this.replace_letters(i,t-1).map((e=>r+e))}replace_letters(e,t){if(0==t)return""==e?[]:[e];if(1==e.length&&1==t)return[q([e[0]])];if(t>e.length)return[];let n=[],r=W(t,2);for(let t of r)for(let r=1;r<e.length;r++){let i=e.slice(0,r),s=this.replace_letters(i,t[0]),a=e.slice(r);H([s,this.replace_letters(a,t[1])],(e=>{n.push(e[0]+e[1])}))}return n}}Q.capitalizeFirstLetter_formatter=e=>String(e).charAt(0).toUpperCase()+String(e).slice(1),Q.lowerCaseFirstLetter_formatter=e=>String(e).charAt(0).toLowerCase()+String(e).slice(1);class X extends Q{constructor(){super(),this.words=X.static_words.slice()}}X.static_words=["account","achiever","acoustics","act","action","activity","actor","addition","adjustment","advertisement","advice","aftermath","afternoon","afterthought","agreement","air","airplane","airport","alarm","amount","amusement","anger","angle","animal","ants","apparatus","apparel","appliance","approval","arch","argument","arithmetic","arm","army","art","attack","attraction","aunt","authority","back","badge","bag","bait","balance","ball","base","baseball","basin","basket","basketball","bat","bath","battle","bead","bear","bed","bedroom","beds","bee","beef","beginner","behavior","belief","believe","bell","bells","berry","bike","bikes","bird","birds","birth","birthday","bit","bite","blade","blood","blow","board","boat","bomb","bone","book","books","boot","border","bottle","boundary","box","brake","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","cabbage","cable","cactus","cake","cakes","calculator","calendar","camera","camp","can","cannon","canvas","cap","caption","car","card","care","carpenter","carriage","cars","cart","cast","cat","cats","cattle","cause","cave","celery","cellar","cemetery","cent","chalk","chance","change","channel","cheese","cherries","cherry","chess","chicken","chickens","chin","church","circle","clam","cloth","clover","club","coach","coal","coast","coat","cobweb","coil","collar","color","committee","company","comparison","competition","condition","connection","control","cook","copper","corn","cough","country","cover","cow","cows","crack","cracker","crate","crayon","cream","creator","creature","credit","crib","crime","crook","crow","crowd","crown","cub","cup","current","curtain","curve","cushion","dad","daughter","day","death","debt","decision","deer","degree","design","desire","desk","destruction","detail","development","digestion","dime","dinner","dinosaurs","direction","dirt","discovery","discussion","distance","distribution","division","dock","doctor","dog","dogs","doll","dolls","donkey","door","downtown","drain","drawer","dress","drink","driving","drop","duck","ducks","dust","ear","earth","earthquake","edge","education","effect","egg","eggnog","eggs","elbow","end","engine","error","event","example","exchange","existence","expansion","experience","expert","eye","eyes","face","fact","fairies","fall","fang","farm","fear","feeling","field","finger","fire","fireman","fish","flag","flame","flavor","flesh","flight","flock","floor","flower","flowers","fly","fog","fold","food","foot","force","fork","form","fowl","frame","friction","friend","friends","frog","frogs","front","fruit","fuel","furniture","gate","geese","ghost","giants","giraffe","glass","glove","gold","government","governor","grade","grain","grandfather","grandmother","grape","grass","grip","ground","group","growth","guide","guitar","gun","hair","haircut","hall","hammer","hand","hands","harbor","harmony","hat","head","health","heat","hill","history","hobbies","hole","holiday","home","honey","hook","hope","horn","horse","horses","hose","hospital","hot","hour","house","houses","humor","hydrant","ice","icicle","idea","impulse","income","increase","industry","ink","insect","instrument","insurance","interest","invention","iron","island","jail","jam","jar","jeans","jelly","jellyfish","jewel","join","judge","juice","jump","kettle","key","kick","kiss","kittens","kitty","knee","knife","knot","knowledge","laborer","lace","ladybug","lake","lamp","land","language","laugh","leather","leg","legs","letter","letters","lettuce","level","library","limit","line","linen","lip","liquid","loaf","lock","locket","look","loss","love","low","lumber","lunch","lunchroom","machine","magic","maid","mailbox","man","marble","mark","market","mask","mass","match","meal","measure","meat","meeting","memory","men","metal","mice","middle","milk","mind","mine","minister","mint","minute","mist","mitten","mom","money","month","moon","morning","mother","motion","mountain","mouth","move","muscle","name","nation","neck","need","needle","nerve","nest","night","noise","north","nose","note","notebook","number","nut","oatmeal","observation","ocean","offer","office","oil","orange","oranges","order","oven","page","pail","pan","pancake","paper","parcel","part","partner","party","passenger","payment","peace","pear","pen","pencil","person","pest","pet","pets","pickle","picture","pie","pies","pig","pigs","pin","pipe","pizzas","place","plane","planes","plant","plantation","plants","plastic","plate","play","playground","pleasure","plot","plough","pocket","point","poison","pollution","popcorn","porter","position","pot","potato","powder","power","price","produce","profit","property","prose","protest","pull","pump","punishment","purpose","push","quarter","quartz","queen","question","quicksand","quiet","quill","quilt","quince","quiver","rabbit","rabbits","rail","railway","rain","rainstorm","rake","range","rat","rate","ray","reaction","reading","reason","receipt","recess","record","regret","relation","religion","representative","request","respect","rest","reward","rhythm","rice","riddle","rifle","ring","rings","river","road","robin","rock","rod","roll","roof","room","root","rose","route","rub","rule","run","sack","sail","salt","sand","scale","scarecrow","scarf","scene","scent","school","science","scissors","screw","sea","seashore","seat","secretary","seed","selection","self","sense","servant","shade","shake","shame","shape","sheep","sheet","shelf","ship","shirt","shock","shoe","shoes","shop","show","side","sidewalk","sign","silk","silver","sink","sister","sisters","size","skate","skin","skirt","sky","slave","sleep","sleet","slip","slope","smash","smell","smile","smoke","snail","snails","snake","snakes","sneeze","snow","soap","society","sock","soda","sofa","son","song","songs","sort","sound","soup","space","spade","spark","spiders","sponge","spoon","spot","spring","spy","square","squirrel","stage","stamp","star","start","statement","station","steam","steel","stem","step","stew","stick","sticks","stitch","stocking","stomach","stone","stop","store","story","stove","stranger","straw","stream","street","stretch","string","structure","substance","sugar","suggestion","suit","summer","sun","support","surprise","sweater","swim","swing","system","table","tail","talk","tank","taste","tax","teaching","team","teeth","temper","tendency","tent","territory","test","texture","theory","thing","things","thought","thread","thrill","throat","throne","thumb","thunder","ticket","tiger","time","tin","title","toad","toe","toes","tomatoes","tongue","tooth","toothbrush","toothpaste","top","touch","town","toy","toys","trade","trail","train","trains","tramp","transport","tray","treatment","tree","trees","trick","trip","trouble","trousers","truck","trucks","tub","turkey","turn","twig","twist","umbrella","uncle","underwear","unit","use","vacation","value","van","vase","vegetable","veil","vein","verse","vessel","vest","view","visitor","voice","volcano","volleyball","voyage","walk","wall","war","wash","waste","watch","water","wave","waves","wax","way","wealth","weather","week","weight","wheel","whip","whistle","wilderness","wind","window","wine","wing","winter","wire","wish","wood","wool","word","work","worm","wound","wren","wrench","wrist","writer","writing","yak","yam","yard","yarn","year","yoke","zebra","zephyr","zinc","zipper","zoo"];let Z=(new X).replace_letters("lo",2);function $(e){U(7).times((t=>{e.push(k(100))}))}console.log(Z);class ee{constructor(e,t){this.vector=[],this.target_functions=[],$(this.vector),U(e).times((e=>{let t=new te(!0,!1,e);this.target_functions.push(t)})),this.set_error_function(e,t),this.fill_rest_methods(),D(this.target_functions).do((e=>e.create_body()))}fill_rest_methods(){let e=8-this.target_functions.length,t=this.target_functions.length;U(e).times((()=>{let e=k(this.target_functions.length),n=new te(!1,!1,42);n.function_no=t++,this.target_functions.splice(e,0,n)}));for(let e=0;e<8;e++)this.target_functions[e].function_no=e+1}set_error_function(e,t){let n;n=e%2==0?e/2:Math.floor(e/2)+1;let r,i=k(n);r=1==t?i:n+i,r>this.target_functions.length-1&&(r=this.target_functions.length-1),this.target_functions[r].is_faulty=!0}as_html_java_code(){let e="<span id='main'><br><br><br></span>\npublic static void main(String[] args) {<br>&nbsp;&nbsp;var vector = Vector.new("+this.vector.join(", ")+");<br>\n";return D(this.target_functions).do((t=>e+=t.as_html_java_call())),e+="&nbsp;&nbsp;// ERROR: OUT OF BOUNDS<br>\n",e+="&nbsp;&nbsp;var vec_value_7 = vector.get(6);<br>\n}<br>\n",D(this.target_functions).do((t=>e+=t.as_java_html_function())),e}as_html_Rust_code(){let e="<span id='main'><br><br><br></span>\nfn main() {<br>&nbsp;&nbsp;let mut vector = vec!["+this.vector.join(", ")+"];<br>\n";return D(this.target_functions).do((t=>e+=t.as_html_Rust_call())),e+="&nbsp;&nbsp;// ERROR: OUT OF BOUNDS<br>\n",e+="&nbsp;&nbsp;let vec_value_7 = vector[6];<br>\n}<br>\n",D(this.target_functions).do((t=>e+=t.as_rust_html_function())),e}index_of_error_function(){for(let e=0;e<this.target_functions.length;e++)if(this.target_functions[e].is_faulty)return e+1;throw"something is wrong here"}}class te{constructor(e,t,n){this.function_no=-1,this.is_mutable=!1,this.is_faulty=!1,this.lines=[],this.function_no=n,this.is_mutable=e,this.is_faulty=t}create_body(){let e=[],t=["v_start"],n=[],r=[],i=new X,s=()=>"v_"+i.pull_random_word();if(this.is_faulty){let i=new re(s(),"v_start");i.is_mutable,e.push(i);let a=new re(s(),i.variable_name);a.is_mutable,e.push(a),this.clear_variable=a.variable_name,t=[],r=[i.variable_name,a.variable_name],n=[i,a]}else{let a;1==k(2)?(a=new se("v_"+i.pull_random_word()),t=["v_start"]):(a=new ie(s(),"v_start"),t=[]),a.is_mutable,e.push(a);let o=new re(s(),a.variable_name);e.push(o),n=[a,o],r=[a.variable_name,o.variable_name],this.clear_variable=o.variable_name,"v_produce"==this.clear_variable&&console.log("dummy")}for(e.push(new re(s(),null)),U(5)._do((()=>e.push(new ie(s(),null)))),U(2)._do((()=>e.push(new se(s())))),"v_produce"==this.clear_variable&&console.log("dummy");this.lines.length<10;){let i=x(e),s=!1;if(t.length>0){if(i instanceof ie){let e=i;if(i.requires_target()){let n=E(t);e.target_variable=n,s=!0}else(-1!=t.indexOf(e.target_variable)||(i.target_variable="v_start"))&&(s=!0)}else if(i instanceof re){let e=i;if(i.requires_target()){let n=x(t);-1==r.indexOf(n)?(e.target_variable=n,s=!0):t.push(n)}else-1!=r.indexOf(e.target_variable)?0!=r.indexOf(e.variable_name)&&-1==this.lines.indexOf(n[0])||(s=!0):"v_start"==e.target_variable&&(s=!0)}else i instanceof se&&(s=!0);s?(-1==r.indexOf(i.variable_name)?(t.push(i.variable_name),i instanceof re&&-1==t.indexOf(i.target_variable)&&t.splice(t.indexOf(i.target_variable),1)):i instanceof re&&-1!=t.indexOf(i.target_variable)&&t.splice(t.indexOf(i.target_variable),1),this.lines.push(i)):e.push(i)}else i instanceof se?(-1==r.indexOf(i.variable_name)&&t.push(i.variable_name),this.lines.push(i)):i instanceof ie&&"v_start"==i.target_variable?(t.push(i.variable_name),this.lines.push(i)):e.push(i)}this.set_muts_and_refs()}set_muts_and_refs(){let e=["v_start"];D(this.lines).do((t=>{t instanceof re&&e.includes(t.target_variable)&&(e.push(t.target_variable),t.is_reference=!0)}));let t=[this.clear_variable];D([...this.lines].reverse()).do((e=>{t.includes(e.variable_name)&&(e.is_mutable=!0),e instanceof re&&t.includes(e.target_variable)&&(t.push(e.target_variable),e.is_mutable=!0)}))}as_html_java_call(){let e="function_"+this.function_no;return"&nbsp;&nbsp;<a href='#"+e+"'>"+e+"</a>(vector);<br>\n"}as_html_Rust_call(){let e="function_"+this.function_no;return this.is_mutable?"&nbsp;&nbsp;<a href='#"+e+"'>"+e+"</a>(&mut vector);<br>\n":"&nbsp;&nbsp;<a href='#"+e+"'>"+e+"</a>(&vector);<br>\n"}as_java_html_function(){let e="function_"+this.function_no,t="<br><br><br><span id='"+e+"'><br><br><br></span>void "+e+"(Vector v_start) { <br>\n";return D(this.lines).do((e=>{t+=e.as_java_line()})),t+="<br>",t+="&nbsp;&nbsp;"+this.clear_variable+".clear();<br>",t+="} // <a href='#main'>Back to main</a><br><br>",t}as_rust_html_function(){let e="function_"+this.function_no,t="<br><br><br><span id='"+e+"'><br><br><br></span>fn "+e+"(v_start: &Vec&lt;i32&gt;) {//"+this.is_faulty+"<br>\n";return D(this.lines).do((e=>{t+=e.as_rust_line()})),t+="<br>",t+="&nbsp;&nbsp;"+this.clear_variable+".clear();<br>",t+="} // <a href='#main'>Back to main</a><br><br>",t}}class ne{constructor(e){this.is_mutable=!1,this.is_reference=!1,this.variable_name=e}requires_target(){return!1}as_java_line(){return"&nbsp;&nbsp;var "+this.variable_name}as_rust_line(){return"&nbsp;&nbsp;let "+(this.is_mutable?"mut ":"")+this.variable_name}}class re extends ne{constructor(e,t){super(e),this.target_variable=t}requires_target(){return null==this.target_variable}set_target(e){this.target_variable=e}as_java_line(){return super.as_java_line()+" = "+this.target_variable+";<br>"}as_rust_line(){return super.as_rust_line()+" = "+this.target_variable+";<br>"}}class ie extends re{constructor(e,t){super(e,t)}as_java_line(){return"&nbsp;&nbsp;var "+this.variable_name+" = "+this.target_variable+".clone();<br>"}as_rust_line(){return"&nbsp;&nbsp;let "+this.variable_name+" = "+this.target_variable+".clone();<br>"}}class se extends ne{constructor(e){super(e),this.vector=[],$(this.vector)}as_java_line(){return super.as_java_line()+" = Vector.new("+this.vector.join(", ")+");<br>"}as_rust_line(){return super.as_rust_line()+" = vec!["+this.vector.join(", ")+"];<br>"}set_target(e){}}let ae=[null,null,null,null,null];ae[0]="<p>Thank you for participating in the experiment.</p><p>This experiment is about the language constructs immutability/mutability and ownership, constructs that appear for example in the programming language Rust.</p><p>On the following pages, you will receive a short tutorial to this experiment. Please, read the tutorial carefully.</p>";let oe=e=>"&nbsp;".repeat(e);ae[1]="<p>If you pass in Rust a variable to a different function, the calling function looses its ownership and the variable cannot be used in the calling function for a second time.</p><p>The following (wrong!) code shows a main method where a variable v (which is a vector) is passed to a function f. </p><div style=\"font-family:'Courier New'\">fn main() {<br>&nbsp;&nbsp;let v = vec![0, 3, 8];<br>&nbsp;&nbsp;f(v);"+oe(20)+'// Here, the variable v is passed to the function f (main looses the ownership of v).<br>&nbsp;&nbsp;println!("{}", v[1]);&nbsp;&nbsp;&nbsp;&nbsp;// This is wrong, because the variable v is no longer owned by the main function.<br>}<br><br>fn f(v_start: Vec&lt;i32&gt;){}</div><p>When the vector is passed, main function does no longer own the variable v. Hence, the main function cannot print out the vector at the second position (via v[1]).</p><p>One way to keep the ownership is to pass a reference. I.e., the vector v must be defined as a reference to a vector. The function that receives the vector must declare the parameter as a reference as well.</p><div style="font-family:\'Courier New\'">fn main() {<br>&nbsp;&nbsp;let v = &vec![0, 3, 8];'+oe(5)+"// Definition of the vector as a reference via the token &<br>&nbsp;&nbsp;f(v);"+oe(23)+'// Here, the variable v is passed as a reference to f (ownership of v is kept).<br>&nbsp;&nbsp;println!("{}", v[1]);'+oe(7)+"// This is now valid, because the reference v is passed (and kept in the calling function).<br>}<br><br>fn f(v_start: &Vec&lt;i32&gt;){}</div><p>Alternatively, one can also pass the explicit reference to a function.</p><div style=\"font-family:'Courier New'\">fn main() {<br>&nbsp;&nbsp;let v = vec![0, 3, 8];"+oe(5)+"// Definition of the vector as a reference via the token &<br>&nbsp;&nbsp;f(&v);"+oe(23)+'// Here, the variable v is passed as a reference to f (ownership of v is kept).<br>&nbsp;&nbsp;println!("{}", v[1]);'+oe(7)+"// This is now valid, because the reference v is passed (and kept in the calling function).<br>}<br><br>",ae[2]="<p>Another issue in Rust is mutability. You can change only variables that are declared as mutable (mut). For example, the following code is not valid, because the vector v (respectively the reference) is not mutable.</p><div style=\"font-family:'Courier New'\">fn main() {<br>&nbsp;&nbsp;let v = &vec![0, 3, 8];<br>&nbsp;&nbsp;v[0]=3;"+oe(20)+"// Invalid change, because v is not mutable.<br>}<br></div><p>To change the code in a compilable version, one needs to declare the vector v as mutable.</p><div style=\"font-family:'Courier New'\">fn main() {<br>&nbsp;&nbsp;let v = &mut vec![0, 3, 8];"+oe(3)+"// Definition of the vector as a mutable reference via tokens &mut<br>&nbsp;&nbsp;v[0]=3;"+oe(23)+"// Now, the vector can be changed.<br>}<br></div><p>Mutability is also required, if a function receives a reference that it wants to change. Thereto, a variable has to be declared as mutable.</p><div style=\"font-family:'Courier New'\">fn main() {<br>&nbsp;&nbsp;let v = &mut vec![0, 3, 8];"+oe(3)+"// Definition of the vector as a mutable reference via tokens &mut<br>&nbsp;&nbsp;f(v);"+oe(25)+"// The vector can be passed without losing the ownership.<br>}<br><br>fn f(v_start: &mut Vec&lt;i32&gt;){ &nbsp;// function requires mutable vector<br>&nbsp;&nbsp;v_start[1]=2;"+oe(16)+"// Changes the second element of the vector<br>}</div></div><p>Alternatively, the variable is marked as mutable reference when it is passed.</p><div style=\"font-family:'Courier New'\">fn main() {<br>&nbsp;&nbsp;let mut v = vec![0, 3, 8];"+oe(3)+"// Definition of the vector as mutable<br>&nbsp;&nbsp;f(&mut v);"+oe(23)+"// Passing the vector as mutable reference.<br>}<br><br>fn f(v_start: &mut Vec&lt;i32&gt;){ &nbsp;// function requires mutable vector<br>&nbsp;&nbsp;v_start[1]=2;"+oe(16)+"// Changes the second element of the vector<br>}</div>",ae[3]="<p>In the present experiment, code will be given to you in the programming languages Java and the programming language Rust. The code consists of a main function where a vector is defined and passed to eight other functions. The last line of themain function contains a runtime-error: the vector is accessed at a position that does not exist. I.e., one of the invoked functions must have accidentally changed the vector.</p><p>The following code snipped illustrates an example of the Rust function. Note, that only methods that receive a mutable reference can change the variable.</p><div style=\"font-family:'Courier New'\">fn main() {<br>&nbsp;&nbsp;let mut vector = vec![48, 50, 57, 21, 32, 82, 82];<br>&nbsp;&nbsp;function_1(&mut vector);<br>&nbsp;&nbsp; ... // seven more calls to function_2 up to function_8.<br>&nbsp;&nbsp;// ERROR: OUT OF BOUNDS<br>&nbsp;&nbsp;let vec_value_7 = vector[6];<br>}<br><br></div><p>The following code snipped illustrates an example of the Java function (in the experiment, we do not show the whole class definition, but only the relevant Java methods).</p><div style=\"font-family:'Courier New'\">public static void main(String[] args) {<br>&nbsp;&nbsp;var vector = Vector.new(41, 33, 63, 85, 75, 54, 81);<br>&nbsp;&nbsp;function_1(vector);<br>&nbsp;&nbsp; ... // seven more calls to methods function_2 up to function_8.<br>&nbsp;&nbsp;// ERROR: OUT OF BOUNDS<br>&nbsp;&nbsp;var vec_value_7 = vector[6];<br>}<br><br></div><p>In the experiment, there is a link from the function calls to the function definitions. I.e. you can click on a function call in order to see the function definition.</p>",ae[4]="<p>All functions looks similar. There, a number of variables is declared that are either initialized by a different variable, by a clone of a variable, or via a new vector, i.e., each variableis a representation of a vector. The incoming parameter always has the name v_start. The last line of each function is a call of the function clear on a vector, i.e., the content of the vector is deleted. </p><p>The following code is an example of a Java method.<div style=\"font-family:'Courier New'\">void function_6(Vector v_start) {<br>&nbsp;&nbsp;var v_birds = Vector.new(59, 59, 53, 26, 96, 91, 38);<br>&nbsp;&nbsp;var v_chess = v_birds.clone();<br>&nbsp;&nbsp;var v_coat = v_chess.clone();<br>&nbsp;&nbsp;var v_effect = v_birds;<br>&nbsp;&nbsp;var v_shoes = Vector.new(99, 15, 17, 3, 15, 11, 37);<br>&nbsp;&nbsp;var v_level = v_start.clone();<br>&nbsp;&nbsp;var v_burst = v_chess.clone();<br>&nbsp;&nbsp;var v_love = v_level;<br>&nbsp;&nbsp;var v_popcorn = v_coat.clone(); <br>&nbsp;&nbsp;var v_wash = v_popcorn.clone();<br>&nbsp;&nbsp;<br><br>&nbsp;&nbsp;v_love.clear();<br>}  // Back to main <br></div><br><p>In the example, the method does not change the content of the incoming vector, because clear is invoked on the variable v_love, which is an alias of the variable v_level, which itself is a clone (i.e., a copy) of the incoming variable v_start. I.e., the function does not change v_start but a copy of the vector (which means that the effect cannot be seen in a calling method).</p> Please, read the code above carfully (because you will have to read such code in the experiment). In the experiment, the last comment (back to main) is a link that navigates back to the main function.",ae[5]="<p>The following code shows an example of a Rust function.<div style=\"font-family:'Courier New'\">fn function_8(v_start: &mut Vec<i32>) {<br>&nbsp;&nbsp;let v_stop = vec![15, 61, 47, 72, 73, 48, 91];<br>&nbsp;&nbsp;let v_guitar = v_stop.clone();<br>&nbsp;&nbsp;let v_front = v_guitar;<br>&nbsp;&nbsp;let v_rice = v_start;<br>&nbsp;&nbsp;let v_tub = v_stop.clone();<br>&nbsp;&nbsp;let v_circle = v_stop.clone();<br>&nbsp;&nbsp;let mut v_night = v_rice;<br>&nbsp;&nbsp;let v_profit = v_stop.clone();<br>&nbsp;&nbsp;let v_apparatus = v_profit.clone();<br>&nbsp;&nbsp;let v_brother = vec![85, 25, 51, 58, 50, 99, 42];<br><br>&nbsp;&nbsp;v_night.clear();<br>} // Back to main</div><p>The code above changes the incoming variable, because the variable v_nights is an alias of the variable v_rice, which is an alias of the incoming variable.</p>",ae[6]="<p>The experiment shows you Java code or Rust code and it is the participant's task to decide, what function changes the content of the vector defined in the main. If youfound that function, just press the button of the function's number (e.g. press [2] if the second function changes the content of the vector).</p><p>The experiment starts with a training phase. Please, use this training phase in order to get used to the experiment and the shown code. The training is repeated until you explicitly start the experiment phase (by pressing [ESC].</p></p>",y("42"),function(){let e=new Y,t={experiment_name:"Rust_Readability",seed:"42",introduction_pages:[()=>n.print_html_on_stage(ae[0]),()=>n.print_html_on_stage(ae[1]),()=>n.print_html_on_stage(ae[2]),()=>n.print_html_on_stage(ae[3]),()=>n.print_html_on_stage(ae[4]),()=>n.print_html_on_stage(ae[5])],pre_run_training_instructions:(n=e).string_page_command("You entered the training phase. You can skip the training by pressing [Esc]."),pre_run_experiment_instructions:n.string_page_command("You entered the experiment phase."),post_questionnaire:[m("Age","What's your age??",["younger than 18","between 18 and (excluding) 25","between 25 and (excluding) 30","between 30 and (excluding) 35","between 35 and (excluding) 40","40 or older"]),m("Status","What is your current working status?",["Undergraduate student (BSc not yet finished)","Graduate student (at least BSc finished)","PhD student","Professional software developer","Teacher","Other"]),m("Studies","In case you study, what's your subject?",["I do not study","Computer science","computer science related (such as information systems, aka WiInf)","something else in natural sciences","something else"]),m("YearsOfExperience","How many years of experience do you have in software industry?",["none","less than or equal 1 year","more than 1 year, but less than or equal 3 years","more than 3 years, but less than or equal 5 year","more than 5 years"]),m("impression","What statement describes best your impression \n of the experiment?",["I do not think that there was a difference between the notations","The inference notation made it slightly easier for me","Java made it slightly easier for me","The inference notation made it much easier for me","Java made it much easier for me"])],training_configuration:{can_be_cancelled:!0,can_be_repeated:!0},finish_pages:[n.string_page_command("<p>Almost done. Next, the experiment data will be downloaded (after pressing [Enter]).<br><br>Please, send the downloaded file to the experimenter: <a href='mailto:stefan.hanenberg@uni-due.de'>stefan.hanenberg@uni-due.de</a></p><p>By sending that mail, you agree that your (anonymized) data will be used for scientific analyses where your data (together with others in an anonymized way) will be published.<br><br>I.e., you agree with the information sheet, see <a href='https://github.com/shanenbe/Experiments/blob/main/2025_Rust_Readability/Agreement.pdf' target='_blank'>here</a>. Note, that it is not necessary to send a signed version of the agreement to the experimenter.<br><br>After sending your email, you can close this window.</p><p>Many thanks for your participation.<br>-Stefan Hanenberg</p>")],layout:[{variable:"Group",treatments:["Rust 2","Rust 5","Rust 8","Java 8"]},{variable:"Area",treatments:["1st half","2nd half"]}],repetitions:4,measurement:(i=["1","2","3","4","5","6","7","8"],r=e=>new v(i,e),e=>new b(r(e))),task_configuration:e=>{let t,r=function(e,t){let n=function(e,t){return new ee(e,t)}(e,t),r=n.index_of_error_function();return{main_function:n,solution_index:r,target_functions:null}}(parseInt(e.treatment_value("Group")[e.treatment_value("Group").length-1]),"1st half"==e.treatment_value("Group")?1:2);t=e.treatment_value("Group").startsWith("Java")?r.main_function.as_html_java_code():r.main_function.as_html_Rust_code(),e.expected_answer=r.solution_index,e.do_print_task=()=>{n.clear_stage(),n.print_html_on_stage("<div class='sourcecode'>"+t+"</div>")},e.accepts_answer=e=>!0,e.do_print_after_task_information=()=>{n.clear_stage(),n.print_error_string_on_stage(n.convert_string_to_html_string("The correct answer was: "+e.expected_answer+"\n\nIn case, you feel not concentrated enough, make a short break.\n\nPress [Enter] to go on. "))}}};var n,r,i;y(t.seed);let s=t.measurement(e),a=function(e){let t=J.from_layout(e.layout),n=new R(t,e.repetitions),r=new N(e.experiment_name,!1,n,t,e.repetitions,e.measurement,e.task_configuration),i=new V(e.training_configuration);return r.create_code_all_experiment_automatas({seed:e.seed,introduction_texts:e.introduction_pages,post_questionnaire:e.post_questionnaire,pre_run_training_output:e.pre_run_training_output,training_configuration:i,pre_run_experiment_output:e.pre_run_experiment_output,finish_texts:e.finish_pages,measurement:e.measurement,finish_function:e.finish_function})}({experiment_name:t.experiment_name,seed:t.seed,introduction_pages:t.introduction_pages,post_questionnaire:t.post_questionnaire,pre_run_training_output:t.pre_run_training_instructions,training_configuration:t.training_configuration,pre_run_experiment_output:t.pre_run_experiment_instructions,finish_pages:t.finish_pages,layout:t.layout,repetitions:t.repetitions,task_configuration:t.task_configuration,measurement:s,finish_function:e=>{document.removeEventListener("keydown",o),function(e,t){const n=new Blob(t,{type:"application/ssc"}),r=window.document.createElement("a");r.href=window.URL.createObjectURL(n),r.download=e,document.body.appendChild(r),r.click(),document.body.removeChild(r)}(t.experiment_name+".csv",e.generate_csv_data())}}),o=e=>{let t=(r="","Alt"==(n=e).key&&n.ctrlKey?"Alt+Ctrl":"Control"==n.key&&n.altKey?"Ctrl+Alt":(r+=n.altKey?"+Alt":"",r+=n.ctrlKey?"+Control":"","Alt"==n.key?"Alt":""+n.key+r));var n,r;a.input(t)};document.addEventListener("keydown",o,!1),a.set_active()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,